// Generated by dart2js (NullSafetyMode.sound, deferred-serialization, csp), the Dart to JavaScript compiler version: 2.18.6.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {JS_CONST: function JS_CONST() {
    },
    createSentinel() {
      return $;
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_dateNow() {
      return Date.now();
    },
    Primitives_initTicker() {
      var $window, performance;
      if ($.Primitives_timerFrequency !== 0)
        return;
      $.Primitives_timerFrequency = 1000;
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
      return t1;
    },
    Primitives_getMonth(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
      return t1;
    },
    Primitives_getDay(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
      return t1;
    },
    Primitives_getHours(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
      return t1;
    },
    Primitives_getMinutes(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds(receiver) {
      var t1 = A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
      return t1;
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$(index, indexable, _s5_, null, $length);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new A.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = A.S(message);
              return A.saveStackTrace(ex, new A.NullError(t1 + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              A._asString(message);
              return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return A.Primitives_objectHashCode(object);
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    convertMainArgumentList(args) {
      var i,
        result = A._setArrayType([], type$.JSArray_String);
      if (args == null)
        return result;
      if (Array.isArray(args)) {
        for (i = 0; i < args.length; ++i)
          result.push(String(args[i]));
        return result;
      }
      result.push(String(args));
      return result;
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source));
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1,
        nativeRegexp = pattern.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      t1 = receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      return t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _._first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _.__js_helper$_previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    throwLateFieldNI(fieldName) {
      return A.throwExpression(A.LateError$fieldNI(fieldName));
    },
    throwLateFieldAI(fieldName) {
      return A.throwExpression(A.LateError$fieldAI(fieldName));
    },
    throwLateFieldADI(fieldName) {
      return A.throwExpression(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."));
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      return A.createRuntimeType(rti == null ? A.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, isFn, $name, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = A.Error_safeToString(object);
      return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new A._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(A._Universe__lookupFunctionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return A._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future$value(value, $T) {
      var t1, t2;
      if (value == null) {
        $T._as(value);
        t1 = value;
      } else
        t1 = value;
      t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, $T) {
      var stackTrace, t1;
      A.checkNotNullable(error, "error", type$.Object);
      $.Zone__current !== B.C__RootZone;
      stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Completer_Completer($T) {
      return new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
    },
    _Future__chainCoreFuture(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(callback));
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController$broadcast(sync, $T) {
      return new A._SyncBroadcastStreamController(null, null, $T._eval$1("_SyncBroadcastStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      return;
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T),
        t4 = A._BufferingStreamSubscription__registerErrorHandler(t1, onError),
        t5 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      return new A._ControllerSubscription(_controller, t3, t4, type$.void_Function._as(t5), t1, t2, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _nullDoneHandler() {
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._previous = _._async$_next = null;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    StreamConsumer: function StreamConsumer() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A._isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _dynamicCompare(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    _defaultCompare($K) {
      if ($K._eval$1("int(0,0)")._is(A.core_Comparable_compare$closure()))
        return A.core_Comparable_compare$closure();
      return A.collection___dynamicCompare$closure();
    },
    SplayTreeMap$($K, $V) {
      var t1 = A._defaultCompare($K);
      return new A.SplayTreeMap(t1, new A.SplayTreeMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("SplayTreeMap<1,2>"));
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._collection$_first = _._collection$_rest = _._nums = _._strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._table = t0;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeMapNode: function _SplayTreeMapNode(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _.key = t1;
      _._right = _._left = null;
      _.$ti = t2;
    },
    _SplayTree: function _SplayTree() {
    },
    SplayTreeMap: function SplayTreeMap(t0, t1, t2) {
      var _ = this;
      _._root = null;
      _._compare = t0;
      _._validKey = t1;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t2;
    },
    SplayTreeMap_closure: function SplayTreeMap_closure(t0) {
      this.K = t0;
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable(t0, t1) {
      this._tree = t0;
      this.$ti = t1;
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._tree = t0;
      _._path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    _SplayTreeMapEntryIterator: function _SplayTreeMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _._tree = t0;
      _._path = t1;
      _._modificationCount = null;
      _._splayCount = t2;
      _.$ti = t3;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    Error__objectToString(object) {
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    Stopwatch__now() {
      return $.Primitives_timerTicks.call$0();
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$of(elements, growable, $E) {
      var t1 = A.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    String_String$fromCharCodes(charCodes) {
      return A.String__stringFromIterable(charCodes, 0, null);
    },
    String__stringFromIterable(charCodes, start, end) {
      var i, list, t2,
        t1 = charCodes.$ti,
        it = new A.ListIterator(charCodes, charCodes.get$length(charCodes), t1._eval$1("ListIterator<ListIterable.E>"));
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, null, null));
      list = [];
      for (t1 = t1._eval$1("ListIterable.E"); it.moveNext$0();) {
        t2 = it.__internal$_current;
        list.push(t2 == null ? t1._as(t2) : t2);
      }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if (A.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0 || false, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var isNegative, bits, i, t1, t2, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      isNegative = value < 0;
      if (isNegative)
        value = -value;
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (i = 0; i < 8; ++i)
        bits[i] = 0;
      t1 = bits.buffer;
      t1 = new DataView(t1, 0);
      B.NativeByteData_methods._setFloat64$3(t1, 0, value, true);
      t1 = bits[7];
      t2 = bits[6];
      exponent = (t1 << 4 >>> 0) + (t2 >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = t2 & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      if (isNegative)
        return absResult.$negate(0);
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl(digit & bitMask, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    Comparable_compare(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    DateTime$now() {
      return new A.DateTime(Date.now(), false);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = A._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new A.IndexError(t1, true, invalidValue, $name, message == null ? "Index out of range" : message);
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source) {
      return new A.FormatException(message, source);
    },
    print(object) {
      A.printString(object);
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._start = 0;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _File__open(namespace, path, mode) {
      throw A.wrapException(A.UnsupportedError$("File._open"));
    },
    _Namespace__namespace() {
      throw A.wrapException(A.UnsupportedError$("_Namespace"));
    },
    _Namespace__namespacePointer() {
      throw A.wrapException(A.UnsupportedError$("_Namespace"));
    },
    _isDirectIOCapableTypedList(buffer) {
      throw A.wrapException(A.UnsupportedError$("_isDirectIOCapableTypedList"));
    },
    _exceptionFromResponse(response, message, path) {
      var t1 = J.getInterceptor$asx(response);
      switch (t1.$index(response, 0)) {
        case 1:
          return new A.ArgumentError(false, null, null, message + ": " + path);
        case 2:
          return new A.FileSystemException(message, path, new A.OSError(A._asString(t1.$index(response, 2)), A._asInt(t1.$index(response, 1))));
        case 3:
          return new A.FileSystemException("File closed", path, null);
        default:
          return new A._Exception("Unknown error");
      }
    },
    _ensureFastAndSerializableByteData(buffer, start, end) {
      var $length, newBuffer;
      if (A._isDirectIOCapableTypedList(buffer))
        return new A._BufferAndStart(buffer, start);
      $length = end - start;
      newBuffer = new Uint8Array($length);
      B.NativeUint8List_methods.setRange$4(newBuffer, 0, $length, buffer, start);
      return new A._BufferAndStart(newBuffer, 0);
    },
    File_File(path) {
      var t1;
      $.$get$_ioOverridesToken();
      A.ArgumentError_checkNotNull(path, "path", type$.String);
      t1 = A.FileSystemEntity__toNullTerminatedUtf8Array(B.C_Utf8Encoder.convert$1(path));
      return new A._File(path, t1);
    },
    FileSystemException$(message, path, osError) {
      return new A.FileSystemException(message, path, osError);
    },
    _File__namespacePointer() {
      return A._Namespace__namespacePointer();
    },
    _File__dispatchWithNamespace(request, data) {
      B.JSArray_methods.$indexSet(data, 0, A._File__namespacePointer());
    },
    FileSystemEntity__toNullTerminatedUtf8Array(l) {
      var t2, tmp,
        t1 = l.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(l, t2);
        t2 = l[t2] !== 0;
      } else
        t2 = true;
      if (t2) {
        tmp = new Uint8Array(t1 + 1);
        B.NativeUint8List_methods.setRange$3(tmp, 0, t1, l);
        return tmp;
      } else
        return l;
    },
    OSError: function OSError(t0, t1) {
      this.message = t0;
      this.errorCode = t1;
    },
    _BufferAndStart: function _BufferAndStart(t0, t1) {
      this.buffer = t0;
      this.start = t1;
    },
    FileMode: function FileMode(t0) {
      this._mode = t0;
    },
    FileSystemException: function FileSystemException(t0, t1, t2) {
      this.message = t0;
      this.path = t1;
      this.osError = t2;
    },
    _FileStreamConsumer: function _FileStreamConsumer(t0, t1) {
      this._file = t0;
      this._openFuture = t1;
    },
    _FileStreamConsumer_addStream_closure: function _FileStreamConsumer_addStream_closure(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.stream = t2;
    },
    _FileStreamConsumer_addStream_closure_error: function _FileStreamConsumer_addStream_closure_error(t0, t1, t2) {
      this._subscription = t0;
      this.openedFile = t1;
      this.completer = t2;
    },
    _FileStreamConsumer_addStream__closure: function _FileStreamConsumer_addStream__closure(t0, t1, t2) {
      this._subscription = t0;
      this.openedFile = t1;
      this.error = t2;
    },
    _FileStreamConsumer_addStream___closure: function _FileStreamConsumer_addStream___closure(t0) {
      this._subscription = t0;
    },
    _FileStreamConsumer_addStream__closure0: function _FileStreamConsumer_addStream__closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    _FileStreamConsumer_close_closure: function _FileStreamConsumer_close_closure() {
    },
    _FileStreamConsumer_close_closure0: function _FileStreamConsumer_close_closure0(t0) {
      this.$this = t0;
    },
    _File: function _File(t0, t1) {
      this._io$_path = t0;
      this._rawPath = t1;
    },
    _File_open_closure: function _File_open_closure(t0) {
      this.$this = t0;
    },
    _File_length_closure: function _File_length_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_close_closure: function _RandomAccessFile_close_closure(t0) {
      this.$this = t0;
    },
    _RandomAccessFile_writeFrom_closure: function _RandomAccessFile_writeFrom_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.start = t2;
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    _StreamSinkImpl: function _StreamSinkImpl() {
    },
    _StreamSinkImpl_flush_closure: function _StreamSinkImpl_flush_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure: function _StreamSinkImpl__controller_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure0: function _StreamSinkImpl__controller_closure0(t0) {
      this.$this = t0;
    },
    _IOSinkImpl: function _IOSinkImpl(t0, t1, t2) {
      var _ = this;
      _._encoding = t0;
      _._target = t1;
      _._doneCompleter = t2;
      _._controllerCompleter = _._controllerInstance = null;
      _._hasError = _._isBound = _._isClosed = false;
    },
    CombinedIterator: function CombinedIterator(t0, t1) {
      this._iterators = t0;
      this.$ti = t1;
    },
    CombinedListView__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List"));
    },
    CombinedListView: function CombinedListView(t0, t1) {
      this._lists = t0;
      this.$ti = t1;
    },
    CombinedListView_iterator_closure: function CombinedListView_iterator_closure(t0) {
      this.$this = t0;
    },
    CombinedListView_length_closure: function CombinedListView_length_closure(t0) {
      this.$this = t0;
    },
    UnmodifiableSetView$(setBase, $E) {
      return new A.UnmodifiableSetView(setBase, $E._eval$1("UnmodifiableSetView<0>"));
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingSet: function DelegatingSet() {
    },
    FirFilter: function FirFilter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.bitWidth = t0;
      _.depth = t1;
      _.name = t2;
      _._modules = t3;
      _._internalSignals = t4;
      _._inputs = t5;
      _._outputs = t6;
      _._parent = null;
      _._uniqueInstanceName = t7;
      _.reserveName = t8;
      _._definitionName = t9;
      _.reserveDefinitionName = t10;
      _._hasBuilt = false;
    },
    Level: function Level(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    LogRecord: function LogRecord(t0, t1, t2) {
      this.level = t0;
      this.message = t1;
      this.loggerName = t2;
    },
    Logger_Logger($name) {
      return $.Logger__loggers.putIfAbsent$2($name, new A.Logger_Logger_closure($name));
    },
    Logger: function Logger(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _.parent = t1;
      _._level = null;
      _._children = t2;
    },
    Logger_Logger_closure: function Logger_Logger_closure(t0) {
      this.name = t0;
    },
    DuplicateDetectionSet: function DuplicateDetectionSet(t0, t1, t2) {
      this._duplicate_detection_set$_set = t0;
      this._duplicates = t1;
      this.$ti = t2;
    },
    TraverseableCollection: function TraverseableCollection(t0, t1, t2) {
      this._traverseable_collection$_set = t0;
      this._list = t1;
      this.$ti = t2;
    },
    SignalRedrivenException: function SignalRedrivenException(t0) {
      this.__SignalRedrivenException__message_F = t0;
    },
    Const$(val, width) {
      var t2, t3, t4,
        t1 = A.S(val);
      t1 = A.Sanitizer_sanitizeSV("const_" + t1);
      t2 = A._setArrayType([], type$.JSArray_of_void_Function_LogicValueChanged);
      t3 = A.StreamController_StreamController$broadcast(true, type$.LogicValueChanged);
      t4 = B._FilledLogicValue__LogicValueEnum_3_1.get$_enum();
      t2 = new A._Wire(width, new A._FilledLogicValue(width > 0 ? t4 : B._LogicValueEnum_0, width), new A.SynchronousPropagator(new A.SynchronousEmitter(t2, type$.SynchronousEmitter_LogicValueChanged), type$.SynchronousPropagator_LogicValueChanged), t3);
      t1 = new A.Const(t1, t2, A.LinkedHashSet_LinkedHashSet$_empty(type$.Logic));
      if (width < 0)
        A.throwExpression(A.Exception_Exception("Logic width must be greater than or equal to 0."));
      t2.put$2$fill(val, false);
      t1._unassignable = true;
      return t1;
    },
    Logic$($name, width) {
      var t1 = A.Sanitizer_sanitizeSV($name),
        t2 = A._setArrayType([], type$.JSArray_of_void_Function_LogicValueChanged),
        t3 = A.StreamController_StreamController$broadcast(true, type$.LogicValueChanged),
        t4 = B._FilledLogicValue__LogicValueEnum_3_1.get$_enum();
      t4 = width > 0 ? t4 : B._LogicValueEnum_0;
      return new A.Logic(t1, new A._Wire(width, new A._FilledLogicValue(t4, width), new A.SynchronousPropagator(new A.SynchronousEmitter(t2, type$.SynchronousEmitter_LogicValueChanged), type$.SynchronousPropagator_LogicValueChanged), t3), A.LinkedHashSet_LinkedHashSet$_empty(type$.Logic));
    },
    LogicValueChanged: function LogicValueChanged(t0, t1) {
      this.newValue = t0;
      this.previousValue = t1;
    },
    Const: function Const(t0, t1, t2) {
      var _ = this;
      _._unassignable = false;
      _.name = t0;
      _._wire = t1;
      _._srcConnection = null;
      _._dstConnections = t2;
      _._parentModule = null;
    },
    _Wire: function _Wire(t0, t1, t2, t3) {
      var _ = this;
      _.width = t0;
      _._currentValue = t1;
      _._preTickValue = null;
      _._glitchController = t2;
      _._changedController = t3;
      _._changedBeingWatched = false;
      _.___Wire__postTickSubscription_F = _.___Wire__preTickSubscription_F = $;
      _._isPutting = false;
    },
    _Wire_changed_closure: function _Wire_changed_closure(t0) {
      this.$this = t0;
    },
    _Wire_changed_closure0: function _Wire_changed_closure0(t0) {
      this.$this = t0;
    },
    Logic: function Logic(t0, t1, t2) {
      var _ = this;
      _._unassignable = false;
      _.name = t0;
      _._wire = t1;
      _._srcConnection = null;
      _._dstConnections = t2;
      _._parentModule = null;
    },
    Module_isUnpreferred($name) {
      return B.JSString_methods.startsWith$1(A._asString($name), "_");
    },
    Module: function Module() {
    },
    BusSubset: function BusSubset(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.__BusSubset__subset_F = _.__BusSubset__original_F = $;
      _.startIndex = t0;
      _.endIndex = t1;
      _.name = t2;
      _._modules = t3;
      _._internalSignals = t4;
      _._inputs = t5;
      _._outputs = t6;
      _._parent = null;
      _._uniqueInstanceName = t7;
      _.reserveName = t8;
      _._definitionName = t9;
      _.reserveDefinitionName = t10;
      _._hasBuilt = false;
    },
    BusSubset__setup_closure: function BusSubset__setup_closure(t0) {
      this.$this = t0;
    },
    _BusSubset_Module_InlineSystemVerilog: function _BusSubset_Module_InlineSystemVerilog() {
    },
    SimpleClockGenerator$(clockPeriod) {
      var _s6_ = "clkgen",
        t1 = type$.Logic,
        t2 = type$.String;
      t1 = new A.SimpleClockGenerator(clockPeriod, _s6_, A.LinkedHashSet_LinkedHashSet$_empty(type$.Module), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), _s6_, false, null, false);
      t1.SimpleClockGenerator$2$name(clockPeriod, _s6_);
      return t1;
    },
    SimpleClockGenerator: function SimpleClockGenerator(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.clockPeriod = t0;
      _.name = t1;
      _._modules = t2;
      _._internalSignals = t3;
      _._inputs = t4;
      _._outputs = t5;
      _._parent = null;
      _._uniqueInstanceName = t6;
      _.reserveName = t7;
      _._definitionName = t8;
      _.reserveDefinitionName = t9;
      _._hasBuilt = false;
    },
    SimpleClockGenerator_closure: function SimpleClockGenerator_closure(t0) {
      this.$this = t0;
    },
    SimpleClockGenerator__closure: function SimpleClockGenerator__closure(t0) {
      this.$this = t0;
    },
    _SimpleClockGenerator_Module_CustomSystemVerilog: function _SimpleClockGenerator_Module_CustomSystemVerilog() {
    },
    ConditionalAssign$(receiver, driver) {
      if (driver._wire.width !== receiver._wire.width)
        A.throwExpression(A.Exception_Exception("Width for " + receiver.toString$0(0) + " and " + driver.toString$0(0) + " must match but do not."));
      return new A.ConditionalAssign(receiver, driver, A.LinkedHashMap_LinkedHashMap$_empty(type$.Logic, type$.LogicValue));
    },
    If$(condition, orElse, then) {
      return new A.If(then, orElse, condition, A.LinkedHashMap_LinkedHashMap$_empty(type$.Logic, type$.LogicValue));
    },
    _Always: function _Always() {
    },
    Sequential: function Sequential(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _._clks = t0;
      _._inputToPreTickInputValuesMap = t1;
      _._preTickClkValues = t2;
      _._pendingExecute = false;
      _._driverInputsPendingPostUpdate = t3;
      _._pendingPostUpdate = false;
      _.conditionals = t4;
      _._assignedReceiverToOutputMap = t5;
      _._assignedDriverToInputMap = t6;
      _._portUniquifier = t7;
      _.name = t8;
      _._modules = t9;
      _._internalSignals = t10;
      _._inputs = t11;
      _._outputs = t12;
      _._parent = null;
      _._uniqueInstanceName = t13;
      _.reserveName = t14;
      _._definitionName = t15;
      _.reserveDefinitionName = t16;
      _._hasBuilt = false;
    },
    Sequential__setup_closure: function Sequential__setup_closure(t0, t1) {
      this.$this = t0;
      this.driverInput = t1;
    },
    Sequential__setup__closure2: function Sequential__setup__closure2(t0) {
      this.$this = t0;
    },
    Sequential__setup__closure4: function Sequential__setup__closure4() {
    },
    Sequential__setup__closure3: function Sequential__setup__closure3() {
    },
    Sequential__setup_closure0: function Sequential__setup_closure0(t0, t1) {
      this.$this = t0;
      this.i = t1;
    },
    Sequential__setup__closure: function Sequential__setup__closure(t0) {
      this.$this = t0;
    },
    Sequential__setup__closure1: function Sequential__setup__closure1() {
    },
    Sequential__setup__closure0: function Sequential__setup__closure0() {
    },
    Sequential_alwaysVerilogStatement_closure: function Sequential_alwaysVerilogStatement_closure(t0) {
      this.inputs = t0;
    },
    Conditional: function Conditional() {
    },
    ConditionalAssign: function ConditionalAssign(t0, t1, t2) {
      var _ = this;
      _.receiver = t0;
      _.driver = t1;
      _.__Conditional__assignedDriverToInputMap_A = _.__Conditional__assignedReceiverToOutputMap_A = $;
      _._driverValueOverrideMap = t2;
    },
    If: function If(t0, t1, t2, t3) {
      var _ = this;
      _.then = t0;
      _.orElse = t1;
      _.condition = t2;
      _.__Conditional__assignedDriverToInputMap_A = _.__Conditional__assignedReceiverToOutputMap_A = $;
      _._driverValueOverrideMap = t3;
    },
    If_verilogContents_closure: function If_verilogContents_closure(t0, t1, t2, t3) {
      var _ = this;
      _.indent = t0;
      _.inputsNameMap = t1;
      _.outputsNameMap = t2;
      _.assignOperator = t3;
    },
    If_verilogContents_closure0: function If_verilogContents_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.indent = t0;
      _.inputsNameMap = t1;
      _.outputsNameMap = t2;
      _.assignOperator = t3;
    },
    __Always_Module_CustomSystemVerilog: function __Always_Module_CustomSystemVerilog() {
    },
    Add$(in0, in1) {
      var t1 = new A.Add_closure(),
        t2 = type$.Logic,
        t3 = type$.String;
      t2 = new A.Add(t1, "+", "add", A.LinkedHashSet_LinkedHashSet$_empty(type$.Module), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), "add", false, null, false);
      t2._TwoInputBitwiseGate$5$name(t1, "+", in0, in1, "add");
      return t2;
    },
    Multiply$(in0, in1) {
      var _s8_ = "multiply",
        t1 = new A.Multiply_closure(),
        t2 = type$.Logic,
        t3 = type$.String;
      t2 = new A.Multiply(t1, "*", _s8_, A.LinkedHashSet_LinkedHashSet$_empty(type$.Module), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), A.LinkedHashMap_LinkedHashMap$_empty(t3, t2), _s8_, false, null, false);
      t2._TwoInputBitwiseGate$5$name(t1, "*", in0, in1, _s8_);
      return t2;
    },
    _TwoInputBitwiseGate: function _TwoInputBitwiseGate() {
    },
    _TwoInputBitwiseGate__setup_closure: function _TwoInputBitwiseGate__setup_closure(t0) {
      this.$this = t0;
    },
    _TwoInputBitwiseGate__setup_closure0: function _TwoInputBitwiseGate__setup_closure0(t0) {
      this.$this = t0;
    },
    Add: function Add(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.___TwoInputBitwiseGate__outName_F = _.___TwoInputBitwiseGate__in1Name_F = _.___TwoInputBitwiseGate__in0Name_F = $;
      _._op = t0;
      _._opStr = t1;
      _.name = t2;
      _._modules = t3;
      _._internalSignals = t4;
      _._inputs = t5;
      _._outputs = t6;
      _._parent = null;
      _._uniqueInstanceName = t7;
      _.reserveName = t8;
      _._definitionName = t9;
      _.reserveDefinitionName = t10;
      _._hasBuilt = false;
    },
    Add_closure: function Add_closure() {
    },
    Multiply: function Multiply(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.___TwoInputBitwiseGate__outName_F = _.___TwoInputBitwiseGate__in1Name_F = _.___TwoInputBitwiseGate__in0Name_F = $;
      _._op = t0;
      _._opStr = t1;
      _.name = t2;
      _._modules = t3;
      _._internalSignals = t4;
      _._inputs = t5;
      _._outputs = t6;
      _._parent = null;
      _._uniqueInstanceName = t7;
      _.reserveName = t8;
      _._definitionName = t9;
      _.reserveDefinitionName = t10;
      _._hasBuilt = false;
    },
    Multiply_closure: function Multiply_closure() {
    },
    __TwoInputBitwiseGate_Module_InlineSystemVerilog: function __TwoInputBitwiseGate_Module_InlineSystemVerilog() {
    },
    Simulator_registerAction(timestamp, action) {
      var t1 = $.Simulator__currentTimestamp;
      if (timestamp <= t1)
        throw A.wrapException(A.Exception_Exception('Cannot add timestamp "' + timestamp + '" in the past.  Current time is ' + t1));
      t1 = $.$get$Simulator__pendingTimestamps();
      if (!t1._containsKey$1(timestamp))
        t1.$indexSet(0, timestamp, A._setArrayType([], type$.JSArray_of_void_Function));
      t1 = t1.$index(0, timestamp);
      t1.toString;
      B.JSArray_methods.add$1(t1, action);
    },
    Simulator_tick() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, nextTimeStamp, t1;
      var $async$Simulator_tick = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $.$get$Simulator__injectedActions();
              $async$goto = !t1.get$isEmpty(t1) ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.Simulator_tickExecute(new A.Simulator_tick_closure()), $async$Simulator_tick);
            case 5:
              // returning from await.
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              t1 = $.$get$Simulator__pendingTimestamps();
              nextTimeStamp = t1.firstKey$0();
              if (nextTimeStamp == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $.Simulator__currentTimestamp = nextTimeStamp;
              $async$goto = 6;
              return A._asyncAwait(A.Simulator_tickExecute(new A.Simulator_tick_closure0(nextTimeStamp)), $async$Simulator_tick);
            case 6:
              // returning from await.
              t1.remove$1(0, $.Simulator__currentTimestamp);
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Simulator_tick, $async$completer);
    },
    Simulator__executeInjectedActions() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t1;
      var $async$Simulator__executeInjectedActions = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
            case 2:
              // for condition
              if (!(t1 = $.$get$Simulator__injectedActions(), !t1.get$isEmpty(t1))) {
                // goto after for
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(t1.removeFirst$0().call$0(), $async$Simulator__executeInjectedActions);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$Simulator__executeInjectedActions, $async$completer);
    },
    Simulator_tickExecute(toExecute) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$Simulator_tickExecute = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.Simulator__phase = B.SimulatorPhase_1;
              $.$get$Simulator__preTickController().add$1(0, null);
              $.Simulator__phase = B.SimulatorPhase_2;
              $.$get$Simulator__startTickController().add$1(0, null);
              toExecute.call$0();
              $.Simulator__phase = B.SimulatorPhase_3;
              $.$get$Simulator__clkStableController().add$1(0, null);
              $async$goto = 2;
              return A._asyncAwait(A.Simulator__executeInjectedActions(), $async$Simulator_tickExecute);
            case 2:
              // returning from await.
              $.Simulator__phase = B.SimulatorPhase_0;
              $.$get$Simulator__postTickController().add$1(0, null);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$Simulator_tickExecute, $async$completer);
    },
    Simulator_run() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t1, err, t2;
      var $async$Simulator_run = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (($.$get$Simulator__simulationEndedCompleter().future._state & 30) !== 0)
                throw A.wrapException(A.Exception_Exception("Simulation has already been run and ended.  To run a new simulation, use Simulator.reset()."));
            case 2:
              // while condition
              if ($.$get$Simulator__pendingTimestamps()._root == null) {
                t1 = $.$get$Simulator__injectedActions();
                t1 = !t1.get$isEmpty(t1);
              } else
                t1 = true;
              if (t1)
                if ($.Simulator__simExceptions.length === 0) {
                  t1 = $.Simulator__maxSimTime;
                  t1 = t1 < 0 || $.Simulator__currentTimestamp < t1;
                } else
                  t1 = false;
              else
                t1 = false;
              if (!t1) {
                // goto after while
                $async$goto = 3;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(A.Simulator_tick(), $async$Simulator_run);
            case 4:
              // returning from await.
              // goto while condition
              $async$goto = 2;
              break;
            case 3:
              // after while
              t1 = $.Simulator__simExceptions;
              if (0 < t1.length) {
                err = t1[0];
                t1 = err.exception;
                $.$get$Simulator_logger().log$4(B.Level_SEVERE_1000, t1.toString$0(0), t1, err.stackTrace);
                throw A.wrapException(t1);
              }
              t1 = $.Simulator__currentTimestamp;
              t2 = $.Simulator__maxSimTime;
              if (t1 >= t2 && t2 > 0)
                $.$get$Simulator_logger().log$4(B.Level_WARNING_900, "Simulation ended due to maximum simulation time.", null, null);
            case 5:
              // for condition
              if (!(t1 = $.$get$Simulator__endOfSimulationActions(), !t1.get$isEmpty(t1))) {
                // goto after for
                $async$goto = 6;
                break;
              }
              $async$goto = 7;
              return A._asyncAwait(t1.removeFirst$0().call$0(), $async$Simulator_run);
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              $.$get$Simulator__simulationEndedCompleter().complete$0();
              $async$goto = 8;
              return A._asyncAwait($.$get$Simulator__simulationEndedCompleter().future, $async$Simulator_run);
            case 8:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$Simulator_run, $async$completer);
    },
    SimulatorPhase: function SimulatorPhase(t0) {
      this._name = t0;
    },
    Simulator_tick_closure: function Simulator_tick_closure() {
    },
    Simulator_tick_closure0: function Simulator_tick_closure0(t0) {
      this.nextTimeStamp = t0;
    },
    _SimulatorException: function _SimulatorException(t0, t1) {
      this.exception = t0;
      this.stackTrace = t1;
    },
    SynthBuilder: function SynthBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _.top = t0;
      _.synthesizer = t1;
      _._moduleToInstanceTypeMap = t2;
      _._synthesisResults = t3;
      _._instanceTypeUniquifier = t4;
    },
    SynthBuilder_getFileContents_closure: function SynthBuilder_getFileContents_closure() {
    },
    SynthesisResult: function SynthesisResult() {
    },
    Synthesizer: function Synthesizer() {
    },
    SystemVerilogSynthesizer_instantiationVerilogWithParameters(module, instanceType, instanceName, inputs, outputs) {
      var connections, t1, connectionsStr;
      if (type$.CustomSystemVerilog._is(module))
        return module.instantiationVerilog$4(instanceType, instanceName, inputs, outputs);
      connections = A._setArrayType([], type$.JSArray_String);
      t1 = type$.UnmodifiableMapView_String_Logic._eval$1("~(1,2)");
      module._inputs.forEach$1(0, t1._as(new A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure(connections, inputs)));
      module._outputs.forEach$1(0, t1._as(new A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure0(connections, outputs)));
      connectionsStr = B.JSArray_methods.join$1(connections, ",");
      return instanceType + "  " + instanceName + "(" + connectionsStr + ");";
    },
    SystemVerilogSynthesizer: function SystemVerilogSynthesizer() {
    },
    SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure: function SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure(t0, t1) {
      this.connections = t0;
      this.inputs = t1;
    },
    SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure0: function SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure0(t0, t1) {
      this.connections = t0;
      this.outputs = t1;
    },
    CustomSystemVerilog: function CustomSystemVerilog() {
    },
    InlineSystemVerilog: function InlineSystemVerilog() {
    },
    _SystemVerilogSynthesisResult: function _SystemVerilogSynthesisResult(t0, t1, t2) {
      var _ = this;
      _.___SystemVerilogSynthesisResult__moduleContentsString_F = _.___SystemVerilogSynthesisResult__portsString_F = $;
      _._synthModuleDefinition = t0;
      _.module = t1;
      _.moduleToInstanceTypeMap = t2;
    },
    _SystemVerilogSynthesisResult__verilogInputs_closure: function _SystemVerilogSynthesisResult__verilogInputs_closure() {
    },
    _SystemVerilogSynthesisResult__verilogOutputs_closure: function _SystemVerilogSynthesisResult__verilogOutputs_closure() {
    },
    _SystemVerilogSynthesisResult__verilogModuleContents_closure: function _SystemVerilogSynthesisResult__verilogModuleContents_closure() {
    },
    _SynthSubModuleInstantiation: function _SynthSubModuleInstantiation(t0, t1, t2, t3) {
      var _ = this;
      _.module = t0;
      _.name = t1;
      _.inputMapping = t2;
      _.outputMapping = t3;
      _._needsDeclaration = true;
      _._synthLogicNameToInlineableSynthSubmoduleMap = null;
    },
    _SynthSubModuleInstantiation__moduleInputsMap_closure: function _SynthSubModuleInstantiation__moduleInputsMap_closure(t0) {
      this.$this = t0;
    },
    _SynthSubModuleInstantiation_instantiationVerilog_closure: function _SynthSubModuleInstantiation_instantiationVerilog_closure() {
    },
    _SynthModuleDefinition: function _SynthModuleDefinition(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.module = t0;
      _.assignments = t1;
      _.internalNets = t2;
      _.inputs = t3;
      _.outputs = t4;
      _.logicToSynthMap = t5;
      _.moduleToSubModuleInstantiationMap = t6;
      _.___SynthModuleDefinition__synthInstantiationNameUniquifier_F = $;
    },
    _SynthModuleDefinition__collapseChainableModules_closure: function _SynthModuleDefinition__collapseChainableModules_closure() {
    },
    _SynthModuleDefinition__collapseChainableModules_closure0: function _SynthModuleDefinition__collapseChainableModules_closure0(t0) {
      this._box_0 = t0;
    },
    _SynthModuleDefinition__collapseChainableModules_closure1: function _SynthModuleDefinition__collapseChainableModules_closure1(t0) {
      this._box_0 = t0;
    },
    _SynthLogic: function _SynthLogic(t0, t1, t2) {
      var _ = this;
      _.logic = t0;
      _._systemverilog$_name = t1;
      _._renameable = t2;
      _._needsDeclaration = true;
      _._mergedConst = _._mergedNameSynthLogic = null;
    },
    _SynthAssignment: function _SynthAssignment(t0, t1) {
      this.dst = t0;
      this._src = t1;
    },
    SynchronousPropagator: function SynchronousPropagator(t0, t1) {
      this._emitter = t0;
      this.$ti = t1;
    },
    SynchronousEmitter: function SynchronousEmitter(t0, t1) {
      this._actions = t0;
      this._isEmitting = false;
      this.$ti = t1;
    },
    Uniquifier$(reservedNames) {
      var t1 = type$.String,
        t2 = reservedNames == null ? A.LinkedHashSet_LinkedHashSet$_empty(t1) : reservedNames;
      return new A.Uniquifier(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int), A.LinkedHashSet_LinkedHashSet$_empty(t1), t2);
    },
    Uniquifier: function Uniquifier(t0, t1, t2) {
      this._nameCounters = t0;
      this._takenNames = t1;
      this._reservedNames = t2;
    },
    Uniquifier_getUniqueName_constructActualName: function Uniquifier_getUniqueName_constructActualName(t0, t1) {
      this.$this = t0;
      this.requestedName = t1;
    },
    BigLogicValueBigIntUtilities_toIntUnsigned(_this, width) {
      var mask;
      if (width > 64)
        throw A.wrapException(A.Exception_Exception("Cannot convert to BigInt when width " + width + " is greater than 64"));
      else if (width === 64) {
        mask = A._BigLogicValue__maskOfWidth(32);
        return (_this.$and(0, mask).toInt$0(0) | B.JSInt_methods._shlPositive$1(_this.$shr(0, 32).$and(0, mask).toInt$0(0), 32)) >>> 0;
      } else
        return _this.toInt$0(0);
    },
    _BigLogicValue__maskOfWidth(width) {
      var t1;
      if (!$._BigLogicValue__masksOfWidth.containsKey$1(width)) {
        t1 = $.$get$_BigIntImpl_one();
        $._BigLogicValue__masksOfWidth.$indexSet(0, width, t1.$shl(0, width).$sub(0, t1));
      }
      t1 = $._BigLogicValue__masksOfWidth.$index(0, width);
      t1.toString;
      return t1;
    },
    _BigLogicValue$(value, invalid, width) {
      var t1 = new A._BigLogicValue(width),
        t2 = type$.BigInt;
      t1.___BigLogicValue__value_F = t2._as(A._BigLogicValue__maskOfWidth(width).$and(0, value));
      t1.___BigLogicValue__invalid_F = t2._as(A._BigLogicValue__maskOfWidth(width).$and(0, invalid));
      return t1;
    },
    LogicValue_ofInt(value, width) {
      return width > 64 ? A.LogicValue__bigLogicValueOrFilled(A._BigIntImpl__BigIntImpl$from(value), $.$get$_BigIntImpl_zero(), width) : A.LogicValue__smallLogicValueOrFilled(value, 0, width);
    },
    LogicValue_ofBigInt(value, width) {
      return width > 64 ? A.LogicValue__bigLogicValueOrFilled(value, $.$get$_BigIntImpl_zero(), width) : A.LogicValue__smallLogicValueOrFilled(A.BigLogicValueBigIntUtilities_toIntUnsigned(value, width), 0, width);
    },
    LogicValue_of(it) {
      var t1, t2, smallBuffer, fullResult, t3, t4, t5, lvPlusSmall, upperBound;
      for (t1 = it.$ti, t2 = new A.ListIterator(it, it.get$length(it), t1._eval$1("ListIterator<ListIterable.E>")), t1 = t1._eval$1("ListIterable.E"), smallBuffer = B._FilledLogicValue__LogicValueEnum_0_0, fullResult = B._FilledLogicValue__LogicValueEnum_0_0; t2.moveNext$0();) {
        t3 = t2.__internal$_current;
        if (t3 == null)
          t3 = t1._as(t3);
        t4 = t3.width;
        t5 = smallBuffer.width;
        lvPlusSmall = t4 + t5;
        if (lvPlusSmall <= 64)
          smallBuffer = t3._concatenate$1(smallBuffer);
        else {
          upperBound = 64 * B.JSInt_methods._tdivFast$1(lvPlusSmall, 64) - t5;
          fullResult = t3.getRange$2(0, 0, upperBound)._concatenate$1(smallBuffer)._concatenate$1(fullResult);
          smallBuffer = t3.getRange$2(0, upperBound, t4);
        }
      }
      return smallBuffer._concatenate$1(fullResult);
    },
    LogicValue__bigLogicValueOrFilled(value, invalid, width) {
      var t4,
        t1 = value.$and(0, A._BigLogicValue__maskOfWidth(width)).compareTo$1(0, A._BigLogicValue__maskOfWidth(width)),
        t2 = value.$and(0, A._BigLogicValue__maskOfWidth(width)),
        t3 = $.$get$_BigIntImpl_zero();
      t2 = t2.compareTo$1(0, t3);
      t4 = invalid.$and(0, A._BigLogicValue__maskOfWidth(width)).compareTo$1(0, A._BigLogicValue__maskOfWidth(width));
      t3 = invalid.$and(0, A._BigLogicValue__maskOfWidth(width)).compareTo$1(0, t3);
      t1 = A.LogicValue__filledIfPossible(t1 === 0, t2 === 0, t4 === 0, t3 === 0, width);
      return t1 == null ? A._BigLogicValue$(value, invalid, width) : t1;
    },
    LogicValue__smallLogicValueOrFilled(value, invalid, width) {
      var t1 = A.LogicValue__filledIfPossible((value & A._SmallLogicValue__maskOfWidth(width)) >>> 0 === A._SmallLogicValue__maskOfWidth(width), (value & A._SmallLogicValue__maskOfWidth(width)) >>> 0 === 0, (invalid & A._SmallLogicValue__maskOfWidth(width)) >>> 0 === A._SmallLogicValue__maskOfWidth(width), (invalid & A._SmallLogicValue__maskOfWidth(width)) >>> 0 === 0, width);
      return t1 == null ? A._SmallLogicValue$(value, invalid, width) : t1;
    },
    LogicValue__filledIfPossible(value1s, value0, invalid1s, invalid0, width) {
      var t1;
      if (value0) {
        if (invalid0) {
          t1 = B._FilledLogicValue__LogicValueEnum_0_1.get$_enum();
          return new A._FilledLogicValue(width > 0 ? t1 : B._LogicValueEnum_0, width);
        } else if (invalid1s) {
          t1 = B._FilledLogicValue__LogicValueEnum_2_1.get$_enum();
          return new A._FilledLogicValue(width > 0 ? t1 : B._LogicValueEnum_0, width);
        }
      } else if (value1s)
        if (invalid0) {
          t1 = B._FilledLogicValue__LogicValueEnum_1_1.get$_enum();
          return new A._FilledLogicValue(width > 0 ? t1 : B._LogicValueEnum_0, width);
        } else if (invalid1s) {
          t1 = B._FilledLogicValue__LogicValueEnum_3_1.get$_enum();
          return new A._FilledLogicValue(width > 0 ? t1 : B._LogicValueEnum_0, width);
        }
      return null;
    },
    _SmallLogicValue__maskOfWidth(width) {
      var t1;
      if (!$._SmallLogicValue__masksOfWidth.containsKey$1(width))
        $._SmallLogicValue__masksOfWidth.$indexSet(0, width, B.JSInt_methods.$shl(1, width) - 1);
      t1 = $._SmallLogicValue__masksOfWidth.$index(0, width);
      t1.toString;
      return t1;
    },
    _SmallLogicValue$(value, invalid, width) {
      var t1 = B.JSInt_methods.$shl(1, width) - 1;
      return new A._SmallLogicValue((t1 & value) >>> 0, (t1 & invalid) >>> 0, width);
    },
    _BigLogicValue: function _BigLogicValue(t0) {
      this.___BigLogicValue__invalid_F = this.___BigLogicValue__value_F = $;
      this.width = t0;
    },
    _FilledLogicValue: function _FilledLogicValue(t0, t1) {
      this._values$_value = t0;
      this.width = t1;
    },
    LogicValue: function LogicValue() {
    },
    LogicValue_operator$add_closure: function LogicValue_operator$add_closure() {
    },
    LogicValue_operator$mul_closure: function LogicValue_operator$mul_closure() {
    },
    _LogicValueEnum: function _LogicValueEnum(t0) {
      this._name = t0;
    },
    _SmallLogicValue: function _SmallLogicValue(t0, t1, t2) {
      this._values$_value = t0;
      this._invalid = t1;
      this.width = t2;
    },
    WaveDumper$(module) {
      var _s9_ = "waves.vcd",
        t1 = type$.Logic,
        t2 = $.Simulator__currentTimestamp;
      t2 = new A.WaveDumper(module, A.File_File(_s9_), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.String), A.LinkedHashSet_LinkedHashSet$_empty(t1), t2);
      t2.WaveDumper$2$outputPath(module, _s9_);
      return t2;
    },
    WaveDumper: function WaveDumper(t0, t1, t2, t3, t4) {
      var _ = this;
      _.module = t0;
      _._outputFile = t1;
      _.__WaveDumper__outFileSink_F = $;
      _._signalMarkerIdx = 0;
      _._signalToMarkerMap = t2;
      _._changedLogicsThisTimestamp = t3;
      _._currentDumpingTimestamp = t4;
    },
    WaveDumper_closure: function WaveDumper_closure(t0) {
      this.$this = t0;
    },
    WaveDumper_closure0: function WaveDumper_closure0(t0) {
      this.$this = t0;
    },
    WaveDumper__collectAllSignals_closure: function WaveDumper__collectAllSignals_closure(t0, t1) {
      this.$this = t0;
      this.sig = t1;
    },
    WaveDumper__writeSignalValueUpdate_closure: function WaveDumper__writeSignalValueUpdate_closure() {
    },
    main(noPrint) {
      return A.main$body(noPrint);
    },
    main$body(noPrint) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        systemVerilogCode, i, en, resetB, inputVal, clk, t1, t2, t3, t4, firFilter;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              en = A.Logic$("en", 1);
              resetB = A.Logic$("resetB", 1);
              inputVal = A.Logic$("inputVal", 8);
              clk = A.SimpleClockGenerator$(5).output$1("clk");
              t1 = A._setArrayType([0, 0, 0, 1], type$.JSArray_int);
              t2 = type$.Module;
              t3 = type$.Logic;
              t4 = type$.String;
              firFilter = new A.FirFilter(8, 4, "FirFilter", A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashSet_LinkedHashSet$_empty(t3), A.LinkedHashMap_LinkedHashMap$_empty(t4, t3), A.LinkedHashMap_LinkedHashMap$_empty(t4, t3), "FirFilter", false, null, false);
              firFilter.FirFilter$7$bitWidth$name(en, resetB, clk, inputVal, t1, 8, "FirFilter");
              $async$goto = 2;
              return A._asyncAwait(firFilter.build$0(), $async$main);
            case 2:
              // returning from await.
              if (!firFilter._hasBuilt)
                A.throwExpression(A.Exception_Exception("Module has not yet built!  Must call build() first."));
              t1 = new A.DateTime(Date.now(), false).toString$0(0);
              t3 = new A.SystemVerilogSynthesizer();
              t4 = new A.SynthBuilder(firFilter, t3, A.LinkedHashMap_LinkedHashMap$_empty(t2, t4), A.LinkedHashSet_LinkedHashSet$_empty(type$.SynthesisResult), A.Uniquifier$(null));
              t4.SynthBuilder$2(firFilter, t3);
              systemVerilogCode = "/**\n * Generated by ROHD - www.github.com/intel/rohd\n * Generation time: " + t1 + "\n * ROHD Version: 0.4.1\n */\n\n" + B.JSArray_methods.join$1(t4.getFileContents$0(), "\n\n////////////////////\n\n");
              t1 = !noPrint;
              if (t1) {
                A.print(systemVerilogCode);
                t2 = A.File_File("rtl.sv");
                type$.Utf8Codec._eval$1("Codec.S")._as(systemVerilogCode);
                t2.writeAsBytesSync$3$flush$mode(B.C_Utf8Codec.get$encoder().convert$1(systemVerilogCode), false, B.FileMode_1);
              }
              en._wire.put$2$fill(0, false);
              resetB._wire.put$2$fill(0, false);
              inputVal._wire.put$2$fill(1, false);
              if (t1)
                A.WaveDumper$(firFilter);
              A.Simulator_registerAction(5, new A.main_closure(en));
              A.Simulator_registerAction(10, new A.main_closure0(resetB));
              for (i = 1; i < 10; ++i)
                A.Simulator_registerAction(5 + i * 4, new A.main_closure1(inputVal, i));
              A.Simulator_registerAction(100, new A.main_closure2(noPrint));
              $.Simulator__maxSimTime = 100;
              $async$goto = 3;
              return A._asyncAwait(A.Simulator_run(), $async$main);
            case 3:
              // returning from await.
              if (t1)
                A.print("To view waves, check out waves.vcd with a waveform viewer (e.g. `gtkwave waves.vcd`).");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    main_closure: function main_closure(t0) {
      this.en = t0;
    },
    main_closure0: function main_closure0(t0) {
      this.resetB = t0;
    },
    main_closure1: function main_closure1(t0, t1) {
      this.inputVal = t0;
      this.i = t1;
    },
    main_closure2: function main_closure2(t0) {
      this.noPrint = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    Sanitizer_sanitizeSV(initialName) {
      var t1 = A.RegExp_RegExp("[^a-zA-Z0-9_]"),
        newName = A.stringReplaceAllUnchecked(initialName, t1, "_");
      if (B.JSString_methods.startsWith$1(newName, A.RegExp_RegExp("[0-9]")))
        newName = "s" + newName;
      for (t1 = B.Set_o0yI._collection$_map; t1.containsKey$1(newName);)
        newName += "_";
      return newName;
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $mul$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return B.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_8k0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      otherList = iterable;
      t1 = J.getInterceptor$asx(otherList);
      if (skipCount + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, skipCount + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, skipCount + i);
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t1 = A.List_List$of(receiver, true, t1._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add(receiver, other) {
      A._asNum(other);
      return receiver + other;
    },
    $mul(receiver, other) {
      A._asNum(other);
      return receiver * other;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return B.Type_num_cv7;
    },
    $isComparable: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return B.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return B.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    startsWith$1(receiver, pattern) {
      var otherLength,
        t1 = receiver.length;
      if (typeof pattern == "string") {
        otherLength = pattern.length;
        if (otherLength > t1)
          return false;
        return pattern === receiver.substring(0, otherLength);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, 0) != null;
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    lastIndexOf$1(receiver, pattern) {
      var start = receiver.length,
        t1 = pattern.length;
      if (start + t1 > start)
        start -= t1;
      return receiver.lastIndexOf(pattern, start);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return B.Type_String_k8F;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this.__internal$_message;
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 15
  };
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {};
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._precomputed1._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.ConstantMap.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[A._asString(key)];
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = A._asString(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    },
    get$keys() {
      return new A._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  A._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this._map._keys.length;
    }
  };
  A.Primitives_initTicker_closure.prototype = {
    call$0() {
      return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 13
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$keys() {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this._addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this._addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      if ((key & 0x3fffffff) === key)
        return this._removeHashTableEntry$2(this.__js_helper$_nums, key);
      else
        return this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    __js_helper$_modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this.__js_helper$_last = cell;
      else {
        t1 = _this.__js_helper$_last;
        t1.toString;
        cell.__js_helper$_previous = t1;
        _this.__js_helper$_last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell.__js_helper$_previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      --_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    }
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1(_, f) {
      var t1, cell, modifications;
      this.$ti._eval$1("~(1)")._as(f);
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 34
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 43
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 53
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1
  };
  A._MatchImplementation.prototype = {
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    }
  };
  A.StringMatch.prototype = {
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    }
  };
  A._Cell.prototype = {
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_RkP;
    }
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_zNC;
    },
    _setFloat64$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat64(byteOffset, value, littleEndian);
    }
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var targetLength, count, sourceLength, source;
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          A.throwExpression(A.RangeError$range(start, 0, end, null, null));
        count = end - start;
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          A.throwExpression(A.StateError$("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2bx;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint16List: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_WLA;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint8List: 1
  };
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this._message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 2
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 33
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 5
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 25
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 35
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {};
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_previous(_previous) {
      this._previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_previous(previous);
      subscription.set$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, t5, t6, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0) {
        t1 = new A._DoneStreamSubscription($.Zone__current, onDone, t1._eval$1("_DoneStreamSubscription<1>"));
        t1._schedule$0();
        return t1;
      }
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1);
      t5 = A._BufferingStreamSubscription__registerErrorHandler(t2, onError);
      t6 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      t1 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, t4, t5, type$.void_Function._as(t6), t2, t3, t1);
      subscription.set$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t1._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    _forEachListener$1(action) {
      var t1, subscription, id, next, _this = this;
      A._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw A.wrapException(A.StateError$(string$.Cannot));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1
  };
  A._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return A._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0() {
      if ((this._state & 2) !== 0)
        return new A.StateError(string$.Cannot);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new A._SyncBroadcastStreamController__sendData_closure(_this, data));
    }
  };
  A._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._add$1(this.data);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 3, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$2$test(onError, test) {
      var t1, t2, result;
      type$.nullable_bool_Function_Object._as(test);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone) {
        onError = A._registerErrorHandler(onError, t2);
        if (test != null)
          test = type$.bool_Function_Object._as(test);
      }
      t2 = test == null ? 2 : 6;
      this._addListener$1(new A._FutureListener(result, t2, test, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new A._Future($.Zone__current, t1);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFuture(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__chainFuture_closure(_this, value)));
        } else
          A._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 2
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 6
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__chainFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 28
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first(_) {
      var future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<1>")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var e, s, t1, exception, stackTrace;
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        stackTrace = s;
        if (stackTrace == null)
          stackTrace = A.AsyncError_defaultStackTrace(t1);
        this.future._completeError$2(t1, stackTrace);
      }
    },
    $signature: 0
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._precomputed1._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1)");
    }
  };
  A.StreamConsumer.prototype = {};
  A.StreamTransformerBase.prototype = {};
  A._StreamController.prototype = {
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new A._PendingEvents(t1._eval$1("_PendingEvents<1>"));
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (type$.Future_void._is(cancelResult))
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0();
      A._runGuarded(_this.onResume);
    },
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._add$1(data);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 3
  };
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(1)?")._as(handleData), t1._precomputed1));
    },
    pause$0() {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null) {
        pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._precomputed1;
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_onData(_onData) {
      this._onData = A._instanceType(this)._eval$1("~(1)")._as(_onData);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<1>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  A._DoneStreamSubscription.prototype = {
    _schedule$0() {
      var _this = this;
      if ((_this._state & 2) !== 0)
        return;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(_this.get$_sendDone()));
      _this._state = (_this._state | 2) >>> 0;
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    pause$0() {
      this._state += 4;
    },
    resume$0() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 = this._state = t1 - 4;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0() {
      return $.$get$Future__nullFuture();
    },
    _sendDone$0() {
      var doneHandler, _this = this,
        t1 = _this._state = (_this._state & 4294967293) >>> 0;
      if (t1 >= 4)
        return;
      _this._state = (t1 | 1) >>> 0;
      doneHandler = _this._onDone;
      if (doneHandler != null)
        _this._zone.runGuarded$1(doneHandler);
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {};
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      var t1 = this.error,
        t2 = this.stackTrace;
      A.checkNotNullable(t1, "error", type$.Object);
      A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
      A.Error__throw(t1, t2);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    $index(_, key) {
      return null;
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    lookup$1(object) {
      return this._lookup$1(object);
    },
    _lookup$1(object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return null;
      return A._instanceType(_this)._eval$1("1?")._as(bucket[index]._element);
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)")._as(action);
      cell = _this._collection$_first;
      modifications = _this._collection$_modifications;
      for (t1 = t1._precomputed1; cell != null;) {
        action.call$1(t1._as(cell._element));
        if (modifications !== _this._collection$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(element);
    },
    _collection$_add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    clear$0(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._strings = _this._nums = _this._collection$_rest = _this._collection$_first = _this._last = null;
        _this._collection$_length = 0;
        _this._modified$0();
      }
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.UnmodifiableListView.prototype = {
    get$length(_) {
      var t1 = this._collection$_source;
      return t1.get$length(t1);
    },
    $index(_, index) {
      var t1 = this._collection$_source;
      return t1.elementAt$1(t1, A._asInt(index));
    }
  };
  A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  A.ListMixin.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    toString$0(receiver) {
      return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  A.MapBase.prototype = {};
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 54
  };
  A.MapMixin.prototype = {
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(1,2)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._rest[1]; t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._rest[1]; t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.get$key(), entry.get$value());
      }
      return result;
    },
    containsKey$1(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A._UnmodifiableMapMixin.prototype = {};
  A.MapView.prototype = {
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    containsKey$1(key) {
      return this._collection$_map.containsKey$1(key);
    },
    get$length(_) {
      return this._collection$_map.__js_helper$_length;
    },
    get$keys() {
      var t1 = this._collection$_map;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._collection$_map);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.ListQueue.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty(_) {
      return this._head === this._tail;
    },
    get$length(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first(_) {
      var t2, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = _this._table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      t1 = t2[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var t1, t2, t3, _this = this,
        $length = _this.get$length(_this);
      if (0 > index || index >= $length)
        A.throwExpression(A.IndexError$(index, _this, "index", null, $length));
      t1 = _this._table;
      t2 = t1.length;
      t3 = (_this._head + index & t2 - 1) >>> 0;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      return t3 == null ? _this.$ti._precomputed1._as(t3) : t3;
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      B.JSArray_methods.$indexSet(t2, t1, null);
      _this._head = (_this._head + 1 & _this._table.length - 1) >>> 0;
      return result;
    },
    set$_table(_table) {
      this._table = this.$ti._eval$1("List<1?>")._as(_table);
    }
  };
  A._ListQueueIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (!(t2 < t3.length))
        return A.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._position = (_this._position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.SetMixin.prototype = {
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this, "{", "}");
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      A.checkNotNullable(index, _s5_, type$.int);
      A.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, _s5_, null, elementIndex));
    }
  };
  A.SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  A._SetBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  A._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      this.$ti._precomputed1._as(value);
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    }
  };
  A._UnmodifiableSet.prototype = {
    get$iterator(_) {
      var t1 = this._collection$_map.get$keys();
      return t1.get$iterator(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    }
  };
  A._SplayTreeNode.prototype = {
    set$_left(_left) {
      this._left = A._instanceType(this)._eval$1("_SplayTreeNode.1?")._as(_left);
    },
    set$_right(_right) {
      this._right = A._instanceType(this)._eval$1("_SplayTreeNode.1?")._as(_right);
    },
    get$key() {
      return this.key;
    }
  };
  A._SplayTreeMapNode.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    },
    $isMapEntry: 1,
    get$value() {
      return this.value;
    }
  };
  A._SplayTree.prototype = {
    _splay$1(key) {
      var root, compare, comp, current, newTreeLeft, left, newTreeRight, right, currentLeft, currentLeft0, currentRight, currentRight0, _this = this, _null = null;
      A._instanceType(_this)._eval$1("_SplayTree.K")._as(key);
      root = _this.get$_root();
      if (root == null) {
        _this._compare$2(key, key);
        return -1;
      }
      compare = _this.get$_compare();
      for (comp = _null, current = root, newTreeLeft = comp, left = newTreeLeft, newTreeRight = left, right = newTreeRight; true;) {
        comp = compare.call$2(current.key, key);
        if (comp > 0) {
          currentLeft = current._left;
          if (currentLeft == null)
            break;
          comp = compare.call$2(currentLeft.key, key);
          if (comp > 0) {
            current.set$_left(currentLeft._right);
            currentLeft.set$_right(current);
            currentLeft0 = currentLeft._left;
            if (currentLeft0 == null) {
              current = currentLeft;
              break;
            }
            current = currentLeft;
            currentLeft = currentLeft0;
          }
          if (right == null)
            newTreeRight = current;
          else
            right.set$_left(current);
          right = current;
          current = currentLeft;
        } else {
          if (comp < 0) {
            currentRight = current._right;
            if (currentRight == null)
              break;
            comp = compare.call$2(currentRight.key, key);
            if (comp < 0) {
              current.set$_right(currentRight._left);
              currentRight.set$_left(current);
              currentRight0 = currentRight._right;
              if (currentRight0 == null) {
                current = currentRight;
                break;
              }
              current = currentRight;
              currentRight = currentRight0;
            }
            if (left == null)
              newTreeLeft = current;
            else
              left.set$_right(current);
          } else
            break;
          left = current;
          current = currentRight;
        }
      }
      if (left != null) {
        left.set$_right(current._left);
        current.set$_left(newTreeLeft);
      }
      if (right != null) {
        right.set$_left(current._right);
        current.set$_right(newTreeRight);
      }
      if (_this.get$_root() !== current) {
        _this.set$_root(current);
        ++_this._splayCount;
      }
      return comp;
    },
    _splayMin$1(node) {
      var nextLeft, current, nextLeft0;
      A._instanceType(this)._eval$1("_SplayTree.1")._as(node);
      nextLeft = node._left;
      for (current = node; nextLeft != null; current = nextLeft, nextLeft = nextLeft0) {
        current.set$_left(nextLeft._right);
        nextLeft.set$_right(current);
        nextLeft0 = nextLeft._left;
      }
      return current;
    },
    _splayMax$1(node) {
      var nextRight, current, nextRight0;
      A._instanceType(this)._eval$1("_SplayTree.1")._as(node);
      nextRight = node._right;
      for (current = node; nextRight != null; current = nextRight, nextRight = nextRight0) {
        current.set$_right(nextRight._left);
        nextRight.set$_left(current);
        nextRight0 = nextRight._right;
      }
      return current;
    },
    _remove$1(key) {
      var root, left, t1, root0, _this = this;
      A._instanceType(_this)._eval$1("_SplayTree.K")._as(key);
      if (_this.get$_root() == null)
        return null;
      if (_this._splay$1(key) !== 0)
        return null;
      root = _this.get$_root();
      left = root._left;
      --_this._count;
      t1 = root._right;
      if (left == null)
        _this.set$_root(t1);
      else {
        root0 = _this._splayMax$1(left);
        root0.set$_right(t1);
        _this.set$_root(root0);
      }
      ++_this._modificationCount;
      return root;
    },
    _addNewRoot$2(node, comp) {
      var root, _this = this;
      A._instanceType(_this)._eval$1("_SplayTree.1")._as(node);
      ++_this._count;
      ++_this._modificationCount;
      root = _this.get$_root();
      if (root == null) {
        _this.set$_root(node);
        return;
      }
      if (comp < 0) {
        node.set$_left(root);
        node.set$_right(root._right);
        root.set$_right(null);
      } else {
        node.set$_right(root);
        node.set$_left(root._left);
        root.set$_left(null);
      }
      _this.set$_root(node);
    },
    get$_collection$_first() {
      var _this = this,
        root = _this.get$_root();
      if (root == null)
        return null;
      _this.set$_root(_this._splayMin$1(root));
      return _this.get$_root();
    },
    _containsKey$1(key) {
      return A.boolConversionCheck(this._validKey$1(key)) && this._splay$1(A._instanceType(this)._eval$1("_SplayTree.K")._as(key)) === 0;
    },
    _compare$2(arg0, arg1) {
      return this.get$_compare().call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this.get$_validKey().call$1(arg0);
    }
  };
  A.SplayTreeMap.prototype = {
    $index(_, key) {
      var _this = this;
      if (!A.boolConversionCheck(_this._validKey.call$1(key)))
        return null;
      if (_this._root != null)
        if (_this._splay$1(_this.$ti._precomputed1._as(key)) === 0)
          return _this._root.value;
      return null;
    },
    remove$1(_, key) {
      var mapRoot;
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      mapRoot = this._remove$1(this.$ti._precomputed1._as(key));
      if (mapRoot != null)
        return mapRoot.value;
      return null;
    },
    $indexSet(_, key, value) {
      var t2, comp, t3, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t2 = t1._rest[1];
      t2._as(value);
      comp = _this._splay$1(key);
      if (comp === 0) {
        t1 = _this._root;
        t1.toString;
        t2 = t1.$ti;
        t3 = t2._rest[1];
        t3 = new A._SplayTreeMapNode(t3._as(value), t1.key, t2._eval$1("@<1>")._bind$1(t3)._eval$1("_SplayTreeMapNode<1,2>"));
        t3.set$_left(t1._left);
        t3.set$_right(t1._right);
        _this.set$_root(t3);
        ++_this._splayCount;
        return;
      }
      _this._addNewRoot$2(new A._SplayTreeMapNode(value, key, t1._eval$1("@<1>")._bind$1(t2)._eval$1("_SplayTreeMapNode<1,2>")), comp);
    },
    forEach$1(_, f) {
      var nodes, node,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      t1 = t1._eval$1("@<1>")._bind$1(t1._rest[1]);
      nodes = new A._SplayTreeMapEntryIterator(this, A._setArrayType([], t1._eval$1("JSArray<_SplayTreeMapNode<1,2>>")), this._splayCount, t1._eval$1("_SplayTreeMapEntryIterator<1,2>"));
      for (; nodes.moveNext$0();) {
        node = nodes.get$current();
        f.call$2(node.get$key(), node.get$value());
      }
    },
    get$length(_) {
      return this._count;
    },
    containsKey$1(key) {
      return this._containsKey$1(key);
    },
    get$keys() {
      var t1 = this.$ti;
      return new A._SplayTreeKeyIterable(this, t1._eval$1("@<1>")._bind$1(t1._eval$1("_SplayTreeMapNode<1,2>"))._eval$1("_SplayTreeKeyIterable<1,2>"));
    },
    firstKey$0() {
      if (this._root == null)
        return null;
      return this.get$_collection$_first().key;
    },
    set$_root(_root) {
      this._root = this.$ti._eval$1("_SplayTreeMapNode<1,2>?")._as(_root);
    },
    $isMap: 1,
    _compare$2(arg0, arg1) {
      return this._compare.call$2(arg0, arg1);
    },
    _validKey$1(arg0) {
      return this._validKey.call$1(arg0);
    },
    get$_root() {
      return this._root;
    },
    get$_compare() {
      return this._compare;
    }
  };
  A.SplayTreeMap_closure.prototype = {
    call$1(a) {
      return this.K._is(a);
    },
    $signature: 27
  };
  A._SplayTreeIterator.prototype = {
    get$current() {
      var t1 = this._path;
      if (t1.length === 0) {
        A._instanceType(this)._eval$1("_SplayTreeIterator.T")._as(null);
        return null;
      }
      return this._getValue$1(B.JSArray_methods.get$last(t1));
    },
    moveNext$0() {
      var node, next, _this = this,
        t1 = _this._modificationCount,
        t2 = _this._tree,
        t3 = t2._modificationCount;
      if (t1 !== t3) {
        if (t1 == null) {
          _this._modificationCount = t3;
          node = t2.get$_root();
          for (t1 = _this._path; node != null;) {
            B.JSArray_methods.add$1(t1, node);
            node = node._left;
          }
          return t1.length !== 0;
        }
        throw A.wrapException(A.ConcurrentModificationError$(t2));
      }
      t1 = _this._path;
      if (t1.length === 0)
        return false;
      if (_this._splayCount !== t2._splayCount) {
        t3 = A._instanceType(_this)._eval$1("_SplayTreeIterator.K")._as(B.JSArray_methods.get$last(t1).key);
        B.JSArray_methods.clear$0(t1);
        t2._splay$1(t3);
        t3 = t2.get$_root();
        t3.toString;
        B.JSArray_methods.add$1(t1, t3);
        _this._splayCount = t2._splayCount;
      }
      node = B.JSArray_methods.get$last(t1);
      next = node._right;
      if (next != null) {
        for (; next != null;) {
          B.JSArray_methods.add$1(t1, next);
          next = next._left;
        }
        return true;
      }
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      t1.pop();
      while (true) {
        if (!(t1.length !== 0 && B.JSArray_methods.get$last(t1)._right === node))
          break;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        node = t1.pop();
      }
      return t1.length !== 0;
    },
    $isIterator: 1
  };
  A._SplayTreeKeyIterable.prototype = {
    get$length(_) {
      return this._tree._count;
    },
    get$iterator(_) {
      var t1 = this._tree,
        t2 = this.$ti;
      return new A._SplayTreeKeyIterator(t1, A._setArrayType([], t2._eval$1("JSArray<2>")), t1._splayCount, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_SplayTreeKeyIterator<1,2>"));
    },
    contains$1(_, o) {
      return this._tree._containsKey$1(o);
    }
  };
  A._SplayTreeKeyIterator.prototype = {
    _getValue$1(node) {
      return this.$ti._rest[1]._as(node).key;
    }
  };
  A._SplayTreeMapEntryIterator.prototype = {
    _getValue$1(node) {
      return this.$ti._eval$1("_SplayTreeMapNode<1,2>")._as(node);
    }
  };
  A._ListBase_Object_ListMixin.prototype = {};
  A._SetBase_Object_SetMixin.prototype = {};
  A._SplayTreeMap__SplayTree_MapMixin.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A.__SetBase_Object_SetMixin.prototype = {};
  A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.Utf8Codec.prototype = {
    get$encoder() {
      return B.C_Utf8Encoder;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, t2, encoder,
        end = A.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = $length * 3;
      t2 = new Uint8Array(t1);
      encoder = new A._Utf8Encoder(t2);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return new Uint8Array(t2.subarray(0, A._checkValidRange(0, encoder._bufferIndex, t1)));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
              return A.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var used, otherUsed, resultUsed, resultDigits, t1, _this = this;
      type$._BigIntImpl._as(other);
      used = _this._used;
      otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var used, otherUsed, resultDigits, t1, _this = this;
      type$._BigIntImpl._as(other);
      used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, i, t3, t4,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < resultUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & t4;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndNotSetSign$2(other, isNegative) {
      var t1, t2, i, t3, t4,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & ~t4;
      }
      for (i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t2 = digits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absOrSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 | t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $and(_, other) {
      var t1, n, p, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used === 0 || other._used === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $or(_, other) {
      var t1, n, p, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used === 0)
        return other;
      if (other._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absAndSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absOrSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return n._absSubSetSign$2(t1, true)._absAndNotSetSign$2(p, true)._absAddSetSign$2(t1, true);
    },
    $not(_) {
      var _this = this;
      if (_this._used === 0)
        return $.$get$_BigIntImpl__minusOne();
      if (_this._isNegative)
        return _this._absSubSetSign$2($.$get$_BigIntImpl_one(), false);
      return _this._absAddSetSign$2($.$get$_BigIntImpl_one(), true);
    },
    $add(_, other) {
      var t1, t2, isNegative, _this = this;
      type$._BigIntImpl._as(other);
      t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t1, t2, isNegative, _this = this;
      type$._BigIntImpl._as(other);
      t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var used, otherUsed, resultUsed, digits, otherDigits, resultDigits, t1, i, t2;
      type$._BigIntImpl._as(other);
      used = this._used;
      otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits.__late_helper$_value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed.__late_helper$_value = resultUsed1;
      $._BigIntImpl____lastRemUsed.__late_helper$_value = yUsed0;
      $._BigIntImpl____lastRem_nsh.__late_helper$_value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    get$sign(_) {
      if (this._used === 0)
        return 0;
      return this._isNegative ? -1 : 1;
    },
    get$isEven(_) {
      var t1;
      if (this._used !== 0) {
        t1 = this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = (t1[0] & 1) === 0;
      } else
        t1 = true;
      return t1;
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, t3, digits4, t4, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = type$._BigIntImpl; rest._used > 1;) {
        t3 = t2._as($.$get$_BigIntImpl__bigInt10000());
        if (t3._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t3).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t4 = digits4.length;
        if (t4 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t4 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t4 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t3);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    _toRadixCodeUnit$1(digit) {
      if (digit < 10)
        return 48 + digit;
      return 97 + digit - 10;
    },
    toRadixString$1(_, radix) {
      var t1, digitString, base, reversedDigitCodeUnits, rest, t2, digit, _this = this;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, null, null));
      t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        digitString = B.JSInt_methods.toRadixString$1(t1[0], radix);
        if (_this._isNegative)
          return "-" + digitString;
        return digitString;
      }
      if (radix === 16)
        return _this._toHexString$0();
      base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      reversedDigitCodeUnits = A._setArrayType([], type$.JSArray_int);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = base._used === 0; rest._used !== 0;) {
        if (t2)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digit = rest._rem$1(base).toInt$0(0);
        rest = rest._div$1(base);
        B.JSArray_methods.add$1(reversedDigitCodeUnits, _this._toRadixCodeUnit$1(digit));
      }
      digitString = A.String_String$fromCharCodes(new A.ReversedListIterable(reversedDigitCodeUnits, type$.ReversedListIterable_int));
      if (t1)
        return "-" + digitString;
      return digitString;
    },
    _toHexString$0() {
      var t1, t2, t3, i, chunk, j, msbChunk, _this = this,
        chars = A._setArrayType([], type$.JSArray_int);
      for (t1 = _this._used - 1, t2 = _this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        chunk = t2[i];
        for (j = 0; j < 4; ++j) {
          B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(chunk & 15));
          chunk = chunk >>> 4;
        }
      }
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      msbChunk = t2[t1];
      for (; msbChunk !== 0;) {
        B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(msbChunk & 15));
        msbChunk = msbChunk >>> 4;
      }
      if (_this._isNegative)
        B.JSArray_methods.add$1(chars, 45);
      return A.String_String$fromCharCodes(new A.ReversedListIterable(chars, type$.ReversedListIterable_int));
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 40
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 42
  };
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._value === other._value && true;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._value, type$.DateTime._as(other)._value);
    },
    get$hashCode(_) {
      var t1 = this._value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
      return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    toIso8601String$0() {
      var _this = this,
        y = A.Primitives_getYear(_this) >= -9999 && A.Primitives_getYear(_this) <= 9999 ? A.DateTime__fourDigits(A.Primitives_getYear(_this)) : A.DateTime__sixDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
      return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A._Enum.prototype = {};
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.invalidValue);
    }
  };
  A.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        source = this.source;
      if (typeof source == "string") {
        if (source.length > 78)
          source = B.JSString_methods.substring$2(source, 0, 75) + "...";
        return report + "\n" + source;
      } else
        return report;
    },
    $isException: 1
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1(_, action) {
      var t1;
      A._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = "" + J.toString$0$(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      A.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw A.wrapException(A.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0(_) {
      return A.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  A.Iterator.prototype = {};
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    },
    get$key() {
      return this.key;
    },
    get$value() {
      return this.value;
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeType(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
      var ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
      ticks = t1 - this._start;
      if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
      return ticks * 1000;
    }
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.OSError.prototype = {
    toString$0(_) {
      var t1 = "" + "OS Error",
        t2 = this.message;
      if (t2.length !== 0) {
        t1 = t1 + ": " + t2;
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ", errno = " + B.JSInt_methods.toString$0(t2);
      } else {
        t2 = this.errorCode;
        if (t2 !== -1)
          t1 = t1 + ": errno = " + B.JSInt_methods.toString$0(t2);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1
  };
  A._BufferAndStart.prototype = {};
  A.FileMode.prototype = {};
  A.FileSystemException.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = "" + "FileSystemException",
        t2 = _this.message;
      if (t2.length !== 0) {
        t1 = t1 + (": " + t2) + (", path = '" + _this.path + "'");
        t2 = _this.osError;
        if (t2 != null)
          t1 += " (" + t2.toString$0(0) + ")";
      } else {
        t2 = _this.osError;
        if (t2 != null)
          t1 = t1 + (": " + t2.toString$0(0)) + (", path = '" + _this.path + "'");
        else
          t1 += ": " + _this.path;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isException: 1
  };
  A._FileStreamConsumer.prototype = {
    addStream$1(stream) {
      var t1, completer;
      type$.Stream_List_int._as(stream);
      t1 = new A._Future($.Zone__current, type$._Future_nullable_File);
      completer = new A._SyncCompleter(t1, type$._SyncCompleter_nullable_File);
      this._openFuture.then$1$1(new A._FileStreamConsumer_addStream_closure(this, completer, stream), type$.Null).catchError$1(completer.get$completeError());
      return t1;
    },
    close$0() {
      return this._openFuture.then$1$1(new A._FileStreamConsumer_close_closure(), type$.void).then$1$1(new A._FileStreamConsumer_close_closure0(this), type$.nullable_File);
    }
  };
  A._FileStreamConsumer_addStream_closure.prototype = {
    call$1(openedFile) {
      var _subscription, t1, t2;
      type$.RandomAccessFile._as(openedFile);
      _subscription = A._Cell$named("_subscription");
      t1 = this.completer;
      t2 = new A._FileStreamConsumer_addStream_closure_error(_subscription, openedFile, t1);
      _subscription.__late_helper$_value = this.stream.listen$4$cancelOnError$onDone$onError(new A._FileStreamConsumer_addStream__closure(_subscription, openedFile, t2), true, new A._FileStreamConsumer_addStream__closure0(this.$this, t1), t2);
    },
    $signature: 44
  };
  A._FileStreamConsumer_addStream_closure_error.prototype = {
    call$2(e, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      this._subscription._readLocal$0().cancel$0();
      this.openedFile.close$0();
      t1 = e == null ? type$.Object._as(e) : e;
      this.completer.completeError$2(t1, stackTrace);
    },
    $signature: 45
  };
  A._FileStreamConsumer_addStream__closure.prototype = {
    call$1(d) {
      var e, stackTrace, t1, exception, _this = this;
      type$.List_int._as(d);
      t1 = _this._subscription;
      t1._readLocal$0().pause$0();
      try {
        _this.openedFile.writeFrom$3(d, 0, J.get$length$asx(d)).then$1$2$onError(new A._FileStreamConsumer_addStream___closure(t1), _this.error, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        _this.error.call$2(e, stackTrace);
      }
    },
    $signature: 50
  };
  A._FileStreamConsumer_addStream___closure.prototype = {
    call$1(_) {
      type$.RandomAccessFile._as(_);
      return this._subscription._readLocal$0().resume$0();
    },
    $signature: 24
  };
  A._FileStreamConsumer_addStream__closure0.prototype = {
    call$0() {
      this.completer.complete$1(this.$this._file);
    },
    $signature: 0
  };
  A._FileStreamConsumer_close_closure.prototype = {
    call$1(openedFile) {
      return type$.RandomAccessFile._as(openedFile).close$0();
    },
    $signature: 23
  };
  A._FileStreamConsumer_close_closure0.prototype = {
    call$1(_) {
      return this.$this._file;
    },
    $signature: 26
  };
  A._File.prototype = {
    open$1$mode(mode) {
      if (mode !== B.FileMode_0 && mode !== B.FileMode_1 && mode !== B.FileMode_2 && mode !== B.FileMode_3 && mode !== B.FileMode_4)
        return A.Future_Future$error(new A.ArgumentError(false, null, null, "Invalid file mode for this operation"), type$.RandomAccessFile);
      return A._File__dispatchWithNamespace(5, [null, this._rawPath, mode._mode]).then$1$1(new A._File_open_closure(this), type$.RandomAccessFile);
    },
    length$0(_) {
      return A._File__dispatchWithNamespace(12, [null, this._rawPath]).then$1$1(new A._File_length_closure(this), type$.int);
    },
    writeAsBytesSync$3$flush$mode(bytes, flush, mode) {
      var opened;
      type$.List_int._as(bytes);
      if (mode !== B.FileMode_0 && mode !== B.FileMode_1 && mode !== B.FileMode_2 && mode !== B.FileMode_3 && mode !== B.FileMode_4)
        A.throwExpression(A.ArgumentError$("Invalid file mode for this operation", null));
      A._File__open(A._Namespace__namespace(), this._rawPath, mode._mode);
      opened = null;
    },
    toString$0(_) {
      return "File: '" + this._io$_path + "'";
    },
    $isFile: 1
  };
  A._File_open_closure.prototype = {
    call$1(response) {
      var t1;
      response.$index(0, 0);
      t1 = A._exceptionFromResponse(response, "Cannot open file", this.$this._io$_path);
      throw A.wrapException(t1);
    },
    $signature: 16
  };
  A._File_length_closure.prototype = {
    call$1(response) {
      var t1;
      response.$index(0, 0);
      t1 = A._exceptionFromResponse(response, "Cannot retrieve length of file", this.$this._io$_path);
      throw A.wrapException(t1);
    },
    $signature: 29
  };
  A._RandomAccessFile_close_closure.prototype = {
    call$1(result) {
      var t2,
        t1 = J.getInterceptor$(result);
      if (t1.$eq(result, -1))
        throw A.wrapException(A.FileSystemException$("Cannot close file", this.$this.path, null));
      t2 = this.$this;
      t1 = t2.closed || t1.$eq(result, 0);
      t2.closed = t1;
      if (t1) {
        t1 = t2.___RandomAccessFile__resourceInfo_A;
        t1 === $ && A.throwLateFieldNI("_resourceInfo");
        $._FileResourceInfo_openFiles.remove$1(0, t1.id);
      }
    },
    $signature: 2
  };
  A._RandomAccessFile_writeFrom_closure.prototype = {
    call$1(response) {
      var t1, t2, t3, _this = this;
      if (type$.List_dynamic._is(response) && !J.$eq$(J.$index$asx(response, 0), 0))
        throw A.wrapException(A._exceptionFromResponse(response, "writeFrom failed", _this.$this.path));
      t1 = _this.$this;
      t2 = t1.___RandomAccessFile__resourceInfo_A;
      t2 === $ && A.throwLateFieldNI("_resourceInfo");
      t3 = _this._box_0;
      t2.addWrite$1(t3.end - (_this.start - t3.result.start));
      return t1;
    },
    $signature: 16
  };
  A.FileSystemEntity.prototype = {};
  A._StreamSinkImpl.prototype = {
    flush$0() {
      var t1, future, _this = this;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      t1 = _this._controllerInstance;
      if (t1 == null)
        return A.Future_Future$value(_this, type$.dynamic);
      _this._isBound = true;
      future = _this._controllerCompleter.future;
      t1.close$0();
      return future.whenComplete$1(new A._StreamSinkImpl_flush_closure(_this));
    },
    _closeTarget$0() {
      this._target.close$0().then$1$2$onError(this.get$_completeDoneValue(), this.get$_completeDoneError(), type$.void);
    },
    _completeDoneValue$1(value) {
      var t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    _completeDoneError$2(error, stackTrace) {
      var t1;
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0) {
        this._hasError = true;
        t1.completeError$2(error == null ? type$.Object._as(error) : error, stackTrace);
      }
    },
    get$_io$_controller() {
      var t1, _this = this, _null = null;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (_this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      if (_this._controllerInstance == null) {
        _this.set$_controllerInstance(new A._SyncStreamController(_null, _null, _null, _null, A._instanceType(_this)._eval$1("_SyncStreamController<_StreamSinkImpl.T>")));
        _this._controllerCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this.get$_io$_controller();
        _this._target.addStream$1(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"))).then$1$2$onError(new A._StreamSinkImpl__controller_closure(_this), new A._StreamSinkImpl__controller_closure0(_this), type$.Null);
      }
      t1 = _this._controllerInstance;
      t1.toString;
      return t1;
    },
    set$_controllerInstance(_controllerInstance) {
      this._controllerInstance = A._instanceType(this)._eval$1("StreamController<_StreamSinkImpl.T>?")._as(_controllerInstance);
    },
    $isStreamConsumer: 1
  };
  A._StreamSinkImpl_flush_closure.prototype = {
    call$0() {
      this.$this._isBound = false;
    },
    $signature: 3
  };
  A._StreamSinkImpl__controller_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (t1._isBound) {
        t1._controllerCompleter.complete$1(t1);
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._closeTarget$0();
    },
    $signature: 2
  };
  A._StreamSinkImpl__controller_closure0.prototype = {
    call$2(error, stackTrace) {
      var t2, t3,
        t1 = this.$this;
      if (t1._isBound) {
        t2 = t1._controllerCompleter;
        t2.toString;
        t3 = error == null ? type$.Object._as(error) : error;
        t2.completeError$2(t3, type$.nullable_StackTrace._as(stackTrace));
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._completeDoneError$2(error, type$.nullable_StackTrace._as(stackTrace));
    },
    $signature: 31
  };
  A._IOSinkImpl.prototype = {
    write$1(obj) {
      var t1, t2, _this = this;
      if (obj.length === 0)
        return;
      t1 = _this._encoding;
      A._instanceType(t1)._eval$1("Codec.S")._as(obj);
      t1 = A._instanceType(_this)._eval$1("_StreamSinkImpl.T")._as(t1.get$encoder().convert$1(obj));
      if (_this._isClosed)
        A.throwExpression(A.StateError$("StreamSink is closed"));
      t2 = _this.get$_io$_controller();
      A._instanceType(t2)._precomputed1._as(t1);
      if (t2._state >= 4)
        A.throwExpression(t2._badEventState$0());
      t2._add$1(t1);
    },
    $isIOSink: 1
  };
  A.CombinedIterator.prototype = {
    get$current() {
      var t1,
        iterators = this._iterators;
      if (iterators != null) {
        t1 = iterators.__internal$_current;
        return (t1 == null ? iterators.$ti._precomputed1._as(t1) : t1).get$current();
      }
      this.$ti._precomputed1._as(null);
      return null;
    },
    moveNext$0() {
      var t1, t2,
        iterators = this._iterators;
      if (iterators != null) {
        t1 = iterators.$ti._precomputed1;
        do {
          t2 = iterators.__internal$_current;
          if ((t2 == null ? t1._as(t2) : t2).moveNext$0())
            return true;
        } while (iterators.moveNext$0());
        this.set$_iterators(null);
      }
      return false;
    },
    set$_iterators(_iterators) {
      this._iterators = this.$ti._eval$1("Iterator<Iterator<1>>?")._as(_iterators);
    },
    $isIterator: 1
  };
  A.CombinedListView.prototype = {
    get$iterator(_) {
      var t1 = this._lists,
        t2 = this.$ti,
        t3 = t2._eval$1("Iterator<1>"),
        t4 = A._arrayInstanceType(t1),
        t5 = t4._eval$1("@<1>")._bind$1(t3)._eval$1("MappedListIterable<1,2>");
      t3 = new A.MappedListIterable(t1, t4._bind$1(t3)._eval$1("1(2)")._as(new A.CombinedListView_iterator_closure(this)), t5);
      t5 = new A.ListIterator(t3, t3.get$length(t3), t5._eval$1("ListIterator<ListIterable.E>"));
      t2 = new A.CombinedIterator(t5, t2._eval$1("CombinedIterator<1>"));
      if (!t5.moveNext$0())
        t2.set$_iterators(null);
      return t2;
    },
    get$length(_) {
      return B.JSArray_methods.fold$1$2(this._lists, 0, new A.CombinedListView_length_closure(this), type$.int);
    },
    $index(_, index) {
      var t1, index0, i, t2, _this = this;
      A._asInt(index);
      for (t1 = _this._lists, index0 = index, i = 0; i < 3; ++i) {
        t2 = t1[i]._collection$_source;
        if (index0 < t2.get$length(t2))
          return t2.elementAt$1(t2, index0);
        index0 -= t2.get$length(t2);
      }
      throw A.wrapException(A.IndexError$(index, _this, "index", null, _this.get$length(_this)));
    },
    $indexSet(_, index, value) {
      this.$ti._precomputed1._as(value);
      A.CombinedListView__throw();
    }
  };
  A.CombinedListView_iterator_closure.prototype = {
    call$1(i) {
      return J.get$iterator$ax(this.$this.$ti._eval$1("List<1>")._as(i));
    },
    $signature() {
      return this.$this.$ti._eval$1("Iterator<1>(List<1>)");
    }
  };
  A.CombinedListView_length_closure.prototype = {
    call$2($length, list) {
      return A._asInt($length) + J.get$length$asx(this.$this.$ti._eval$1("List<1>")._as(list));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(int,List<1>)");
    }
  };
  A.UnmodifiableSetView.prototype = {};
  A.UnmodifiableSetMixin.prototype = {};
  A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {};
  A._DelegatingIterableBase.prototype = {
    elementAt$1(_, index) {
      return this._base.elementAt$1(0, index);
    },
    get$first(_) {
      var t1 = this._base;
      return t1.get$first(t1);
    },
    get$iterator(_) {
      var t1 = this._base;
      return A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1);
    },
    get$length(_) {
      return this._base._collection$_length;
    },
    toString$0(_) {
      return A.IterableBase_iterableToFullString(this._base, "{", "}");
    },
    $isIterable: 1
  };
  A.DelegatingSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  A.FirFilter.prototype = {
    FirFilter$7$bitWidth$name(en, resetB, clk, inputVal, coef, bitWidth, $name) {
      var t2, t3, z, index, out, t4, t5, inputTrain, t6, sum, i, i0, t7, _list, _this = this,
        _s8_ = "_outName",
        _s40_ = '" not found as an output of this Module.',
        _s10_ = "sequential",
        t1 = _this.depth;
      if (t1 < 1)
        throw A.wrapException(A.Exception_Exception("Depth parameter should more than 1"));
      en = _this.addInput$2("en", en);
      t2 = _this.bitWidth;
      inputVal = _this.addInput$3$width("inputVal", inputVal, t2);
      resetB = _this.addInput$2("resetB", resetB);
      clk = _this.addInput$2("clk", clk);
      t3 = type$.Logic;
      z = J.JSArray_JSArray$allocateGrowable(t1, t3);
      for (index = 0; index < t1; ++index)
        z[index] = A.Logic$("z" + index, t2);
      out = _this.addOutput$2$width("out", t2);
      t2 = z.length;
      if (0 >= t2)
        return A.ioore(z, 0);
      t4 = z[0];
      t5 = type$.JSArray_ConditionalAssign;
      inputTrain = A._setArrayType([t4.$lt(0, inputVal)], t5);
      t4 = A.Multiply$(t4, coef[0]);
      t6 = t4.___TwoInputBitwiseGate__outName_F;
      t6 === $ && A.throwLateFieldNI(_s8_);
      sum = t4.output$1(t6);
      for (t4 = t2 - 1, i = 0; i < t4; i = i0) {
        i0 = i + 1;
        t6 = z[i0];
        B.JSArray_methods.add$1(inputTrain, t6.$lt(0, z[i]));
        if (!(i0 < 4))
          return A.ioore(coef, i0);
        t6 = A.Multiply$(t6, coef[i0]);
        t7 = t6.___TwoInputBitwiseGate__outName_F;
        t7 === $ && A.throwLateFieldNI(_s8_);
        t6 = t6._outputs;
        if (t6.containsKey$1(t7)) {
          t6 = t6.$index(0, t7);
          t6.toString;
        } else
          t6 = A.throwExpression(A.Exception_Exception('Output name "' + t7 + _s40_));
        t6 = A.Add$(sum, t6);
        t7 = t6.___TwoInputBitwiseGate__outName_F;
        t7 === $ && A.throwLateFieldNI(_s8_);
        t6 = t6._outputs;
        if (t6.containsKey$1(t7)) {
          t6 = t6.$index(0, t7);
          t6.toString;
          sum = t6;
        } else {
          t6 = A.throwExpression(A.Exception_Exception('Output name "' + t7 + _s40_));
          sum = t6;
        }
      }
      t4 = B.JSArray_methods.$add(inputTrain, A._setArrayType([out.$lt(0, sum)], t5));
      t6 = type$.JSArray_Conditional;
      t4 = A._setArrayType([A.If$(en, A._setArrayType([out.$lt(0, 0)], t6), t4)], t6);
      t5 = A._setArrayType([out.$lt(0, 0)], t5);
      _list = J.JSArray_JSArray$allocateGrowable(t1, type$.ConditionalAssign);
      for (index = 0; index < t1; ++index) {
        if (!(index < t2))
          return A.ioore(z, index);
        _list[index] = z[index].$lt(0, 0);
      }
      t1 = A._setArrayType([A.If$(resetB, B.JSArray_methods.$add(t5, _list), t4)], t6);
      t2 = type$.JSArray_Logic;
      t4 = A._setArrayType([clk], t2);
      t2 = A._setArrayType([], t2);
      t5 = A._setArrayType([], type$.JSArray_nullable_LogicValue);
      t6 = A.Uniquifier$(null);
      t7 = type$.String;
      t2 = new A.Sequential(t2, A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.LogicValue), t5, A.LinkedHashSet_LinkedHashSet$_empty(t3), t1, A.LinkedHashMap_LinkedHashMap$_empty(t3, t3), A.LinkedHashMap_LinkedHashMap$_empty(t3, t3), t6, _s10_, A.LinkedHashSet_LinkedHashSet$_empty(type$.Module), A.LinkedHashSet_LinkedHashSet$_empty(t3), A.LinkedHashMap_LinkedHashMap$_empty(t7, t3), A.LinkedHashMap_LinkedHashMap$_empty(t7, t3), _s10_, false, null, false);
      t2._Always$2$name(t1, _s10_);
      t2.Sequential$multi$3$name(t4, t1, _s10_);
    }
  };
  A.Level.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Level && this.value === other.value;
    },
    compareTo$1(_, other) {
      return this.value - type$.Level._as(other).value;
    },
    get$hashCode(_) {
      return this.value;
    },
    toString$0(_) {
      return this.name;
    },
    $isComparable: 1
  };
  A.LogRecord.prototype = {
    toString$0(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    }
  };
  A.Logger.prototype = {
    get$fullName() {
      var t1 = this.parent,
        t2 = t1 == null ? null : t1.name.length !== 0,
        t3 = this.name;
      return t2 === true ? t1.get$fullName() + "." + t3 : t3;
    },
    get$level() {
      var t1, effectiveLevel;
      if (this.parent == null) {
        t1 = this._level;
        t1.toString;
        effectiveLevel = t1;
      } else {
        t1 = $.$get$Logger_root()._level;
        t1.toString;
        effectiveLevel = t1;
      }
      return effectiveLevel;
    },
    log$4(logLevel, message, error, stackTrace) {
      var record, _this = this,
        t1 = logLevel.value;
      if (t1 >= _this.get$level().value) {
        if (stackTrace == null && t1 >= 2000) {
          A.StackTrace_current();
          if (error == null)
            logLevel.toString$0(0);
        }
        t1 = _this.get$fullName();
        Date.now();
        $.LogRecord__nextNumber = $.LogRecord__nextNumber + 1;
        record = new A.LogRecord(logLevel, message, t1);
        if (_this.parent == null)
          _this._publish$1(record);
        else
          $.$get$Logger_root()._publish$1(record);
      }
    },
    _publish$1(record) {
      return null;
    }
  };
  A.Logger_Logger_closure.prototype = {
    call$0() {
      var dot, $parent, t1,
        thisName = this.name;
      if (B.JSString_methods.startsWith$1(thisName, "."))
        A.throwExpression(A.ArgumentError$("name shouldn't start with a '.'", null));
      dot = B.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? A.Logger_Logger("") : null;
      else {
        $parent = A.Logger_Logger(B.JSString_methods.substring$2(thisName, 0, dot));
        thisName = B.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = new A.Logger(thisName, $parent, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger));
      if ($parent == null)
        t1._level = B.Level_INFO_800;
      else
        $parent._children.$indexSet(0, thisName, t1);
      return t1;
    },
    $signature: 32
  };
  A.DuplicateDetectionSet.prototype = {
    add$1(_, value) {
      var t1;
      this.$ti._precomputed1._as(value);
      t1 = this._duplicate_detection_set$_set;
      if (t1.contains$1(0, value))
        this._duplicates.add$1(0, value);
      return t1.add$1(0, value);
    },
    get$iterator(_) {
      var t1 = this._duplicate_detection_set$_set;
      return A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1);
    },
    get$length(_) {
      return this._duplicate_detection_set$_set._collection$_length;
    }
  };
  A.TraverseableCollection.prototype = {
    get$length(_) {
      return this._list.length;
    },
    add$1(_, item) {
      var t1;
      this.$ti._precomputed1._as(item);
      t1 = this._traverseable_collection$_set;
      if (!t1.contains$1(0, item)) {
        B.JSArray_methods.add$1(this._list, item);
        t1.add$1(0, item);
      }
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._list;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    }
  };
  A.SignalRedrivenException.prototype = {
    toString$0(_) {
      var t1 = this.__SignalRedrivenException__message_F;
      t1 === $ && A.throwLateFieldNI("_message");
      return t1;
    },
    $isException: 1
  };
  A.LogicValueChanged.prototype = {
    toString$0(_) {
      return this.previousValue.toString$0(0) + "  -->  " + this.newValue.toString$0(0);
    }
  };
  A.Const.prototype = {};
  A._Wire.prototype = {
    get$changed() {
      var t1, _this = this;
      if (!_this._changedBeingWatched) {
        _this._changedBeingWatched = true;
        t1 = $.$get$Simulator__preTickController();
        t1 = new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new A._Wire_changed_closure(_this));
        _this.___Wire__preTickSubscription_F !== $ && A.throwLateFieldAI("_preTickSubscription");
        _this.___Wire__preTickSubscription_F = t1;
        t1 = $.$get$Simulator__postTickController();
        t1 = new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>")).listen$1(new A._Wire_changed_closure0(_this));
        _this.___Wire__postTickSubscription_F !== $ && A.throwLateFieldAI("_postTickSubscription");
        _this.___Wire__postTickSubscription_F = t1;
      }
      t1 = _this._changedController;
      return new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>"));
    },
    put$2$fill(val, fill) {
      var newValue, t1, t2, prevValue, _this = this;
      if (A._isInt(val))
        newValue = A.LogicValue_ofInt(val, _this.width);
      else if (type$.BigInt._is(val))
        newValue = A.LogicValue_ofBigInt(val, _this.width);
      else if (A._isBool(val)) {
        t1 = val ? 1 : 0;
        newValue = A.LogicValue_ofInt(t1, _this.width);
      } else if (val instanceof A.LogicValue) {
        if (val.width === 1)
          t1 = val.$eq(0, B._FilledLogicValue__LogicValueEnum_2_1) || val.$eq(0, B._FilledLogicValue__LogicValueEnum_3_1) || false;
        else
          t1 = false;
        if (t1) {
          t1 = _this.width;
          t2 = val.get$_enum();
          newValue = new A._FilledLogicValue(t1 > 0 ? t2 : B._LogicValueEnum_0, t1);
        } else
          newValue = val;
      } else
        throw A.wrapException(A.Exception_Exception('Unrecognized value "' + A.S(val) + '" to deposit on this signal. Unknown type ' + J.get$runtimeType$(val).toString$0(0) + " cannot be deposited."));
      t1 = _this.width;
      if (newValue.width !== t1)
        throw A.wrapException(A.Exception_Exception("Updated value width mismatch.  The width of " + A.S(val) + " should be " + t1 + "."));
      if (_this._isPutting) {
        t2 = B._FilledLogicValue__LogicValueEnum_2_1.get$_enum();
        newValue = new A._FilledLogicValue(t1 > 0 ? t2 : B._LogicValueEnum_0, t1);
      }
      prevValue = _this._currentValue;
      _this._currentValue = newValue;
      if (!newValue.$eq(0, prevValue)) {
        _this._isPutting = true;
        t1 = _this._glitchController;
        t2 = t1.$ti._precomputed1._as(new A.LogicValueChanged(_this._currentValue, prevValue));
        t1._emitter._propagate$1(t2);
        _this._isPutting = false;
      }
    },
    put$1(val) {
      return this.put$2$fill(val, false);
    }
  };
  A._Wire_changed_closure.prototype = {
    call$1($event) {
      var t1 = this.$this;
      t1._preTickValue = t1._currentValue;
    },
    $signature: 7
  };
  A._Wire_changed_closure0.prototype = {
    call$1($event) {
      var t2, t3,
        t1 = this.$this;
      if (!t1._currentValue.$eq(0, t1._preTickValue) && t1._preTickValue != null) {
        t2 = t1._currentValue;
        t3 = t1._preTickValue;
        t3.toString;
        t1._changedController.add$1(0, new A.LogicValueChanged(t2, t3));
      }
    },
    $signature: 7
  };
  A.Logic.prototype = {
    get$width() {
      return this._wire.width;
    },
    get$isInput() {
      var t1 = this._parentModule;
      t1 = t1 == null ? null : J.$eq$(t1._inputs.$index(0, this.name), this);
      return t1 === true;
    },
    get$isOutput() {
      var t1 = this._parentModule;
      t1 = t1 == null ? null : J.$eq$(t1._outputs.$index(0, this.name), this);
      return t1 === true;
    },
    toString$0(_) {
      return "Logic(" + this._wire.width + "): " + this.name;
    },
    _assertConnectable$1(other) {
      var _this = this;
      if (_this._srcConnection != null)
        throw A.wrapException(A.Exception_Exception('This signal "' + _this.toString$0(0) + '" is already connected to "' + A.S(_this._srcConnection) + '", so it cannot be connected to "' + other.toString$0(0) + '".'));
      if (_this._unassignable)
        throw A.wrapException(A.Exception_Exception('This signal "' + _this.toString$0(0) + string$.x22_has_));
    },
    gets$1(other) {
      var _this = this;
      if (_this._srcConnection != null)
        A.throwExpression(A.Exception_Exception('This signal "' + _this.toString$0(0) + '" is already connected to "' + A.S(_this._srcConnection) + '", so it cannot be connected to "' + other.toString$0(0) + '".'));
      if (_this._unassignable)
        A.throwExpression(A.Exception_Exception('This signal "' + _this.toString$0(0) + string$.x22_has_));
      _this._unassignable = true;
      _this._updateWire$1(other._wire);
      _this._srcConnection = other;
      other._dstConnections.add$1(0, _this);
    },
    _updateWire$1(newWire) {
      var t1, t2, t3, _this = this;
      _this._wire.put$1(newWire._currentValue);
      t1 = _this._wire;
      t2 = newWire._glitchController._emitter;
      t3 = t2.$ti;
      t3 = t3._eval$1("List<~(1)>")._as(t3._as(t1._glitchController._emitter)._actions);
      B.JSArray_methods.addAll$1(t2._actions, t3);
      B.JSArray_methods.clear$0(t3);
      t3 = type$.Stream_LogicValueChanged._as(newWire.get$changed());
      if (t1._changedBeingWatched) {
        t2 = t1.___Wire__preTickSubscription_F;
        t2 === $ && A.throwLateFieldNI("_preTickSubscription");
        t2.cancel$0();
        t2 = t1.___Wire__postTickSubscription_F;
        t2 === $ && A.throwLateFieldNI("_postTickSubscription");
        t2.cancel$0();
        t2 = t1._changedController;
        t3.listen$1(type$.void_Function_LogicValueChanged._as(t2.get$add(t2)));
        t1._changedBeingWatched = false;
      }
      _this._wire = newWire;
      for (t1 = type$.UnmodifiableListView_Logic, t2 = new A.UnmodifiableListView(_this._dstConnections, t1), t2 = new A.ListIterator(t2, t2.get$length(t2), t1._eval$1("ListIterator<ListMixin.E>")), t1 = t1._eval$1("ListMixin.E"); t2.moveNext$0();) {
        t3 = t2.__internal$_current;
        (t3 == null ? t1._as(t3) : t3)._updateWire$1(newWire);
      }
    },
    $lt(_, other) {
      var _this = this;
      if (_this._unassignable)
        throw A.wrapException(A.Exception_Exception('This signal "' + _this.toString$0(0) + string$.x22_has_));
      if (other instanceof A.Logic)
        return A.ConditionalAssign$(_this, other);
      else
        return A.ConditionalAssign$(_this, A.Const$(other, _this._wire.width));
    },
    $index(_, index) {
      var t1, t2, t3, t4, t5, _this = this,
        _s9_ = "bussubset";
      if (A._isInt(index)) {
        t1 = type$.Logic;
        t2 = type$.String;
        t1 = new A.BusSubset(index, index, _s9_, A.LinkedHashSet_LinkedHashSet$_empty(type$.Module), A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), A.LinkedHashMap_LinkedHashMap$_empty(t2, t1), _s9_, false, null, false);
        t2 = _this._wire.width;
        t3 = index > t2 - 1;
        if (t3 || t3) {
          t3 = A.S(index);
          A.throwExpression(A.Exception_Exception("Index out of bounds, indices " + t3 + " and " + t3 + " must be less than " + _this.get$width()));
        }
        t3 = _this.name;
        t4 = "original_" + t3;
        t1.__BusSubset__original_F = t4;
        t5 = A.S(index);
        t3 = t1.__BusSubset__subset_F = "_" + ("subset_" + t5 + "_" + t5 + "_" + t3);
        t1.addInput$3$width(t4, _this, t2);
        t1.addOutput$2$width(t3, Math.abs(index - index) + 1);
        t1.output$1(t3)._unassignable = true;
        t1._setup$0();
        return t1.output$1(t3);
      }
      throw A.wrapException(A.Exception_Exception("Expected `int` or `Logic`"));
    }
  };
  A.Module.prototype = {
    get$signals() {
      var t1 = type$.UnmodifiableListView_Logic;
      return new A.CombinedListView(A._setArrayType([new A.UnmodifiableListView(this._inputs.get$values(), t1), new A.UnmodifiableListView(this._outputs.get$values(), t1), new A.UnmodifiableListView(new A.UnmodifiableListView(this._internalSignals, t1), t1)], type$.JSArray_List_Logic), type$.CombinedListView_Logic);
    },
    input$1($name) {
      var t1 = this._inputs;
      if (t1.containsKey$1($name)) {
        t1 = t1.$index(0, $name);
        t1.toString;
      } else
        t1 = A.throwExpression(A.Exception_Exception('Input name "' + $name + '" not found as an input to this Module.'));
      return t1;
    },
    output$1($name) {
      var t1 = this._outputs;
      if (t1.containsKey$1($name)) {
        t1 = t1.$index(0, $name);
        t1.toString;
      } else
        t1 = A.throwExpression(A.Exception_Exception('Output name "' + $name + '" not found as an output of this Module.'));
      return t1;
    },
    get$uniqueInstanceName() {
      return this._hasBuilt || false ? this._uniqueInstanceName : A.throwExpression(A.Exception_Exception("Module must be built to access uniquified name.  Call build() before accessing this."));
    },
    build$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, uniquifier;
      var $async$build$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._hasBuilt)
                throw A.wrapException(A.Exception_Exception("This Module has already been built, and can only be built once."));
              t1 = $async$self._outputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 2:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 4;
              return A._asyncAwait($async$self._traceOutputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$build$0);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              t1 = $async$self._inputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 5:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 6;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 7;
              return A._asyncAwait($async$self._traceInputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$build$0);
            case 7:
              // returning from await.
              // goto for condition
              $async$goto = 5;
              break;
            case 6:
              // after for
              uniquifier = A.Uniquifier$(null);
              for (t1 = $async$self._modules, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
                t3 = t1._collection$_current;
                if (t3 == null)
                  t3 = t2._as(t3);
                t3._uniqueInstanceName = uniquifier.getUniqueName$2$initialName$reserved(A.Sanitizer_sanitizeSV(t3.name), false);
              }
              $async$self._hasBuilt = true;
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$build$0, $async$completer);
    },
    _addAndBuildModule$1(module) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1;
      var $async$_addAndBuildModule$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (module._parent != null)
                throw A.wrapException(A.Exception_Exception('This Module "' + $async$self.toString$0(0) + '" already has a parent. If you are hitting this as a user of ROHD, please file a bug at https://github.com/intel/rohd/issues.'));
              t1 = $async$self._modules;
              if (!t1.contains$1(0, module))
                t1.add$1(0, module);
              module._parent = $async$self;
              $async$goto = 2;
              return A._asyncAwait(module.build$0(), $async$_addAndBuildModule$1);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_addAndBuildModule$1, $async$completer);
    },
    _traceInputForModuleContents$2$dontAddSignal(signal, dontAddSignal) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, subModule, t2, subModuleParent, t3, t4, t5, t6, t1;
      var $async$_traceInputForModuleContents$2$dontAddSignal = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = signal.name;
              if (J.$eq$($async$self._outputs.$index(0, t1), signal)) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (!signal.get$isInput() && !signal.get$isOutput() && signal._parentModule != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              subModule = signal.get$isInput() ? signal._parentModule : null;
              t2 = subModule == null;
              subModuleParent = t2 ? null : subModule._parent;
              t3 = !dontAddSignal;
              if (t3 && signal.get$isOutput())
                throw A.wrapException(A.Exception_Exception("Violation of input/output rules in " + $async$self.toString$0(0) + " on " + signal.toString$0(0) + string$.x2e__Log));
              t4 = subModule !== $async$self;
              if (t4 && subModuleParent != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (!t2)
                if (t4)
                  t4 = subModuleParent == null || subModuleParent === $async$self;
                else
                  t4 = false;
              else
                t4 = false;
              $async$goto = t4 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = subModuleParent !== $async$self ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait($async$self._addAndBuildModule$1(subModule), $async$_traceInputForModuleContents$2$dontAddSignal);
            case 8:
              // returning from await.
            case 7:
              // join
              t1 = subModule._outputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 9:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 10;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 11;
              return A._asyncAwait($async$self._traceInputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$_traceInputForModuleContents$2$dontAddSignal);
            case 11:
              // returning from await.
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              t1 = subModule._inputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 12:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 13;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 14;
              return A._asyncAwait($async$self._traceOutputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$_traceInputForModuleContents$2$dontAddSignal);
            case 14:
              // returning from await.
              // goto for condition
              $async$goto = 12;
              break;
            case 13:
              // after for
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              if (t3 && !J.$eq$($async$self._inputs.$index(0, t1), signal) && t2) {
                $async$self._internalSignals.add$1(0, signal);
                signal._parentModule = $async$self;
              }
              if (t3 && J.$eq$($async$self._inputs.$index(0, t1), signal))
                throw A.wrapException(A.Exception_Exception("Input " + signal.toString$0(0) + " of module " + $async$self.toString$0(0) + " is dependent on another input of the same module."));
              t2 = type$.UnmodifiableListView_Logic, t3 = new A.UnmodifiableListView(signal._dstConnections, t2), t3 = new A.ListIterator(t3, t3.get$length(t3), t2._eval$1("ListIterator<ListMixin.E>")), t2 = t2._eval$1("ListMixin.E");
            case 15:
              // for condition
              if (!t3.moveNext$0()) {
                // goto after for
                $async$goto = 16;
                break;
              }
              t4 = t3.__internal$_current;
              if (t4 == null)
                t4 = t2._as(t4);
              t5 = signal._parentModule;
              t5 = t5 == null ? null : J.$eq$(t5._outputs.$index(0, t1), signal);
              if (t5 === true) {
                t5 = t4._parentModule;
                t5 = t5 == null ? null : J.$eq$(t5._outputs.$index(0, t4.name), t4);
                if (t5 === true) {
                  t5 = signal._parentModule;
                  t5.toString;
                  t6 = t4._parentModule;
                  t6.toString;
                  t6 = t5 === t6;
                  t5 = t6;
                } else
                  t5 = false;
              } else
                t5 = false;
              if (t5) {
                // goto for condition
                $async$goto = 15;
                break;
              }
              $async$goto = 17;
              return A._asyncAwait($async$self._traceInputForModuleContents$1(t4), $async$_traceInputForModuleContents$2$dontAddSignal);
            case 17:
              // returning from await.
              // goto for condition
              $async$goto = 15;
              break;
            case 16:
              // after for
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_traceInputForModuleContents$2$dontAddSignal, $async$completer);
    },
    _traceInputForModuleContents$1(signal) {
      return this._traceInputForModuleContents$2$dontAddSignal(signal, false);
    },
    _traceOutputForModuleContents$2$dontAddSignal(signal, dontAddSignal) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, subModule, t2, subModuleParent, t3, t4, t1;
      var $async$_traceOutputForModuleContents$2$dontAddSignal = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = signal.name;
              if (J.$eq$($async$self._inputs.$index(0, t1), signal)) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (!signal.get$isInput() && !signal.get$isOutput() && signal._parentModule != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              subModule = signal.get$isOutput() ? signal._parentModule : null;
              t2 = subModule == null;
              subModuleParent = t2 ? null : subModule._parent;
              t3 = !dontAddSignal;
              if (t3 && signal.get$isInput())
                throw A.wrapException(A.Exception_Exception("Violation of input/output rules in " + $async$self.toString$0(0) + " on " + signal.toString$0(0) + string$.x2e__Log));
              t4 = subModule !== $async$self;
              if (t4 && subModuleParent != null) {
                // goto return
                $async$goto = 1;
                break;
              }
              if (!t2)
                if (t4)
                  t4 = subModuleParent == null || subModuleParent === $async$self;
                else
                  t4 = false;
              else
                t4 = false;
              $async$goto = t4 ? 3 : 5;
              break;
            case 3:
              // then
              $async$goto = subModuleParent !== $async$self ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait($async$self._addAndBuildModule$1(subModule), $async$_traceOutputForModuleContents$2$dontAddSignal);
            case 8:
              // returning from await.
            case 7:
              // join
              t1 = subModule._inputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 9:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 10;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 11;
              return A._asyncAwait($async$self._traceOutputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$_traceOutputForModuleContents$2$dontAddSignal);
            case 11:
              // returning from await.
              // goto for condition
              $async$goto = 9;
              break;
            case 10:
              // after for
              t1 = subModule._outputs.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1];
            case 12:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 13;
                break;
              }
              t3 = t1.__internal$_current;
              $async$goto = 14;
              return A._asyncAwait($async$self._traceInputForModuleContents$2$dontAddSignal(t3 == null ? t2._as(t3) : t3, true), $async$_traceOutputForModuleContents$2$dontAddSignal);
            case 14:
              // returning from await.
              // goto for condition
              $async$goto = 12;
              break;
            case 13:
              // after for
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$goto = t3 && !J.$eq$($async$self._outputs.$index(0, t1), signal) && t2 ? 15 : 16;
              break;
            case 15:
              // then
              $async$self._internalSignals.add$1(0, signal);
              signal._parentModule = $async$self;
              t1 = type$.UnmodifiableListView_Logic, t2 = new A.UnmodifiableListView(signal._dstConnections, t1), t2 = new A.ListIterator(t2, t2.get$length(t2), t1._eval$1("ListIterator<ListMixin.E>")), t1 = t1._eval$1("ListMixin.E");
            case 17:
              // for condition
              if (!t2.moveNext$0()) {
                // goto after for
                $async$goto = 18;
                break;
              }
              t3 = t2.__internal$_current;
              $async$goto = 19;
              return A._asyncAwait($async$self._traceInputForModuleContents$1(t3 == null ? t1._as(t3) : t3), $async$_traceOutputForModuleContents$2$dontAddSignal);
            case 19:
              // returning from await.
              // goto for condition
              $async$goto = 17;
              break;
            case 18:
              // after for
            case 16:
              // join
              t1 = signal._srcConnection;
              $async$goto = t1 != null ? 20 : 21;
              break;
            case 20:
              // then
              $async$goto = 22;
              return A._asyncAwait($async$self._traceOutputForModuleContents$1(t1), $async$_traceOutputForModuleContents$2$dontAddSignal);
            case 22:
              // returning from await.
            case 21:
              // join
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_traceOutputForModuleContents$2$dontAddSignal, $async$completer);
    },
    _traceOutputForModuleContents$1(signal) {
      return this._traceOutputForModuleContents$2$dontAddSignal(signal, false);
    },
    _checkForSafePortName$1($name) {
      if ($name !== A.Sanitizer_sanitizeSV($name))
        throw A.wrapException(A.Exception_Exception('Invalid name "' + $name + '", must be legal SystemVerilog and not collide with any keywords.'));
      if (this._outputs.containsKey$1($name) || this._inputs.containsKey$1($name))
        throw A.wrapException(A.Exception_Exception('Already defined a port with name "' + $name + '".'));
    },
    addInput$3$width($name, x, width) {
      var t1, t2;
      this._checkForSafePortName$1($name);
      if (x._wire.width !== width)
        throw A.wrapException(A.Exception_Exception('Port width mismatch, signal "' + x.toString$0(0) + '" does not have specified width "' + width + '".'));
      t1 = this._inputs;
      t2 = A.Logic$($name, width);
      t2.gets$1(x);
      t1.$indexSet(0, $name, t2);
      t1.$index(0, $name)._parentModule = this;
      t1 = t1.$index(0, $name);
      t1.toString;
      return t1;
    },
    addInput$2($name, x) {
      return this.addInput$3$width($name, x, 1);
    },
    addOutput$2$width($name, width) {
      var t1;
      this._checkForSafePortName$1($name);
      t1 = this._outputs;
      t1.$indexSet(0, $name, A.Logic$($name, width));
      t1.$index(0, $name)._parentModule = this;
      t1 = t1.$index(0, $name);
      t1.toString;
      return t1;
    },
    addOutput$1($name) {
      return this.addOutput$2$width($name, 1);
    },
    toString$0(_) {
      var _this = this,
        t1 = _this._inputs,
        t2 = _this._outputs;
      return '"' + _this.name + '" (' + A.getRuntimeType(_this).toString$0(0) + ")  :  " + A.IterableBase_iterableToShortString(new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")), "(", ")") + " => " + A.IterableBase_iterableToShortString(new A.LinkedHashMapKeyIterable(t2, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>")), "(", ")");
    }
  };
  A.BusSubset.prototype = {
    _setup$0() {
      var t1, _this = this;
      _this._execute$0();
      t1 = _this.__BusSubset__original_F;
      t1 === $ && A.throwLateFieldNI("_original");
      t1 = _this.input$1(t1)._wire._glitchController._emitter;
      B.JSArray_methods.add$1(t1._actions, t1.$ti._eval$1("~(1)")._as(new A.BusSubset__setup_closure(_this)));
    },
    _execute$0() {
      var t4, _this = this,
        _s9_ = "_original",
        t1 = _this.endIndex,
        t2 = _this.startIndex,
        t3 = _this.__BusSubset__subset_F;
      if (t1 < t2) {
        t3 === $ && A.throwLateFieldNI("_subset");
        t3 = _this.output$1(t3);
        t4 = _this.__BusSubset__original_F;
        t4 === $ && A.throwLateFieldNI(_s9_);
        t2 = _this.input$1(t4)._wire._currentValue.getRange$2(0, t1, t2 + 1);
        t2 = t2.get$reversed(t2);
        t3._wire.put$2$fill(t2, false);
      } else {
        t3 === $ && A.throwLateFieldNI("_subset");
        t3 = _this.output$1(t3);
        t4 = _this.__BusSubset__original_F;
        t4 === $ && A.throwLateFieldNI(_s9_);
        t1 = _this.input$1(t4)._wire._currentValue.getRange$2(0, t2, t1 + 1);
        t3._wire.put$2$fill(t1, false);
      }
    },
    inlineVerilog$1(inputs) {
      var t1, t2, t3, _length, _list, i, t4;
      type$.Map_String_String._as(inputs);
      if (inputs.__js_helper$_length !== 1)
        throw A.wrapException(A.Exception_Exception("BusSubset has exactly one input, but saw " + inputs.toString$0(0) + "."));
      t1 = this.__BusSubset__original_F;
      t1 === $ && A.throwLateFieldNI("_original");
      t1 = inputs.$index(0, t1);
      t1.toString;
      t2 = this.startIndex;
      t3 = this.endIndex;
      if (t2 > t3) {
        _length = t2 - t3 + 1;
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.String);
        for (t1 += "[", i = 0; i < _length; ++i)
          _list[i] = t1 + (t3 + i) + "]";
        return "{" + B.JSArray_methods.join$1(_list, ",") + "}";
      }
      t4 = "" + t2;
      return t1 + (t2 === t3 ? "[" + t4 + "]" : "[" + t3 + ":" + t4 + "]");
    },
    $isCustomSystemVerilog: 1
  };
  A.BusSubset__setup_closure.prototype = {
    call$1(args) {
      type$.LogicValueChanged._as(args);
      this.$this._execute$0();
    },
    $signature: 1
  };
  A._BusSubset_Module_InlineSystemVerilog.prototype = {};
  A.SimpleClockGenerator.prototype = {
    SimpleClockGenerator$2$name(clockPeriod, $name) {
      var t1, _this = this;
      _this.addOutput$1("clk");
      t1 = _this.output$1("clk")._wire._glitchController._emitter;
      B.JSArray_methods.add$1(t1._actions, t1.$ti._eval$1("~(1)")._as(new A.SimpleClockGenerator_closure(_this)));
      _this.output$1("clk")._wire.put$2$fill(0, false);
    },
    instantiationVerilog$4(instanceType, instanceName, inputs, outputs) {
      var t1 = type$.Map_String_String;
      t1._as(inputs);
      t1._as(outputs);
      if (inputs.__js_helper$_length !== 0 || outputs.__js_helper$_length !== 1)
        throw A.wrapException(A.Exception_Exception("SimpleClockGenerator has exactly one output and no inputs, but saw inputs " + inputs.toString$0(0) + " and outputs " + outputs.toString$0(0) + "."));
      t1 = outputs.$index(0, "clk");
      t1.toString;
      return "// " + instanceName + "\ninitial begin\n  " + t1 + " = 0;\n  forever begin\n    #" + (this.clockPeriod / 2 | 0) + ";\n    " + t1 + " = ~" + t1 + ";\n  end\nend\n";
    }
  };
  A.SimpleClockGenerator_closure.prototype = {
    call$1(args) {
      var t1;
      type$.LogicValueChanged._as(args);
      t1 = this.$this;
      A.Simulator_registerAction($.Simulator__currentTimestamp + (t1.clockPeriod / 2 | 0), new A.SimpleClockGenerator__closure(t1));
    },
    $signature: 1
  };
  A.SimpleClockGenerator__closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.output$1("clk");
      t1 = t1.output$1("clk")._wire._currentValue.$not(0);
      t2._wire.put$2$fill(t1, false);
    },
    $signature: 0
  };
  A._SimpleClockGenerator_Module_CustomSystemVerilog.prototype = {};
  A._Always.prototype = {
    _Always$2$name(conditionals, $name) {
      var t1, t2, t3, t4, t5, t6, t7, idx, _i, conditional, t8, t9, _i0, driver, inputName, t10, receiver, outputName, _this = this,
        _s40_ = '" not found as an output of this Module.';
      for (t1 = _this.conditionals, t2 = _this._assignedReceiverToOutputMap, t3 = _this._assignedDriverToInputMap, t4 = type$.Logic, t5 = _this._outputs, t6 = _this._portUniquifier, t7 = _this._inputs, idx = 0, _i = 0; _i < 1; ++_i) {
        conditional = t1[_i];
        for (t8 = conditional.getDrivers$0(), t9 = t8.length, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, A.throwConcurrentModificationError)(t8), ++_i0) {
          driver = t8[_i0];
          if (!t3.containsKey$1(driver)) {
            inputName = t6.getUniqueName$1$initialName("_" + A.Sanitizer_sanitizeSV("in" + idx + "_" + driver.name));
            _this.addInput$3$width(inputName, driver, driver._wire.width);
            if (t7.containsKey$1(inputName)) {
              t10 = t7.$index(0, inputName);
              t10.toString;
            } else
              t10 = A.throwExpression(A.Exception_Exception('Input name "' + inputName + '" not found as an input to this Module.'));
            t3.$indexSet(0, driver, t10);
            ++idx;
          }
        }
        for (t8 = conditional.getReceivers$0(), t9 = t8.length, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, A.throwConcurrentModificationError)(t8), ++_i0) {
          receiver = t8[_i0];
          if (!t2.containsKey$1(receiver)) {
            outputName = t6.getUniqueName$1$initialName("_" + A.Sanitizer_sanitizeSV("out" + idx + "_" + receiver.name));
            _this.addOutput$2$width(outputName, receiver._wire.width);
            if (t5.containsKey$1(outputName)) {
              t10 = t5.$index(0, outputName);
              t10.toString;
            } else
              t10 = A.throwExpression(A.Exception_Exception('Output name "' + outputName + _s40_));
            t2.$indexSet(0, receiver, t10);
            if (t5.containsKey$1(outputName)) {
              t10 = t5.$index(0, outputName);
              t10.toString;
            } else
              t10 = A.throwExpression(A.Exception_Exception('Output name "' + outputName + _s40_));
            receiver._assertConnectable$1(t10);
            receiver._unassignable = true;
            receiver._updateWire$1(t10._wire);
            receiver._srcConnection = t10;
            t10._dstConnections.add$1(0, t4._as(receiver));
            ++idx;
          }
        }
        conditional._updateAssignmentMaps$2(t2, t3);
      }
    },
    _alwaysContents$3(inputsNameMap, outputsNameMap, assignOperator) {
      var _i, t2,
        t1 = type$.Map_String_String;
      t1._as(inputsNameMap);
      t1._as(outputsNameMap);
      for (t1 = this.conditionals, _i = 0, t2 = ""; _i < 1; ++_i)
        t2 += t1[_i].verilogContents$4(1, inputsNameMap, outputsNameMap, assignOperator) + "\n";
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    instantiationVerilog$4(instanceType, instanceName, inputs, outputs) {
      var t1 = type$.Map_String_String;
      t1._as(inputs);
      t1._as(outputs);
      return "//  " + instanceName + "\n" + (this.alwaysVerilogStatement$1(inputs) + " begin\n") + this._alwaysContents$3(inputs, outputs, "<=") + "end\n";
    }
  };
  A.Sequential.prototype = {
    Sequential$multi$3$name(clks, conditionals, $name) {
      var t1, t2, t3, i, clk, _this = this;
      for (t1 = _this._clks, t2 = _this._portUniquifier, t3 = _this._preTickClkValues, i = 0; i < 1; ++i) {
        clk = clks[i];
        if (clk._wire.width > 1)
          throw A.wrapException(A.Exception_Exception("Each clk must be 1 bit, but saw " + clk.toString$0(0) + "."));
        B.JSArray_methods.add$1(t1, _this.addInput$2(t2.getUniqueName$1$initialName(A.Sanitizer_sanitizeSV("_" + ("clk" + i + "_" + clk.name))), clk));
        B.JSArray_methods.add$1(t3, null);
      }
      _this._conditional$_setup$0();
    },
    _conditional$_setup$0() {
      var t1, t2, _i, t3, t4, t5, i, _this = this;
      for (t1 = _this.conditionals, t2 = _this._inputToPreTickInputValuesMap, _i = 0; _i < 1; ++_i)
        t1[_i]._updateOverrideMap$1(t2);
      for (t1 = _this._assignedDriverToInputMap.get$values(), t3 = A._instanceType(t1), t3 = t3._eval$1("@<1>")._bind$1(t3._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t3._eval$1("MappedIterator<1,2>")), t3 = t3._rest[1]; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t2.$indexSet(0, t4, t4._wire._currentValue);
        t5 = t4._wire._glitchController._emitter;
        B.JSArray_methods.add$1(t5._actions, t5.$ti._eval$1("~(1)")._as(new A.Sequential__setup_closure(_this, t4)));
      }
      for (t1 = _this._clks, i = 0; i < t1.length; ++i) {
        t2 = t1[i]._wire._glitchController._emitter;
        B.JSArray_methods.add$1(t2._actions, t2.$ti._eval$1("~(1)")._as(new A.Sequential__setup_closure0(_this, i)));
      }
    },
    _conditional$_execute$0() {
      var anyClkInvalid, anyClkPosedge, t3, t4, t5, allDrivenSignals, _i, _this = this,
        _s38_ = "Expected a single-bit value but found ",
        t1 = _this._clks,
        t2 = _this._preTickClkValues,
        i = 0;
      while (true) {
        if (!(i < t1.length)) {
          anyClkInvalid = false;
          anyClkPosedge = false;
          break;
        }
        if (t1[i]._wire._currentValue.get$isValid()) {
          if (!(i < t2.length))
            return A.ioore(t2, i);
          t3 = t2[i];
          t3 = t3 == null ? null : t3.get$isValid();
          t3 = t3 === false;
        } else
          t3 = true;
        if (t3) {
          anyClkInvalid = true;
          anyClkPosedge = false;
          break;
        } else {
          if (!(i < t2.length))
            return A.ioore(t2, i);
          t3 = t2[i];
          if (t3 != null) {
            if (!(i < t1.length))
              return A.ioore(t1, i);
            t4 = t1[i]._wire._currentValue;
            if (t3.width !== 1)
              A.throwExpression(A.Exception_Exception(_s38_ + t3.toString$0(0) + "."));
            if (t4.width !== 1)
              A.throwExpression(A.Exception_Exception(_s38_ + t4.toString$0(0) + "."));
            t5 = B.JSBool_methods.$or(!t3.get$isValid(), !t4.get$isValid());
            if (t5)
              A.throwExpression(A.Exception_Exception("Edge detection on invalid value from " + t3.toString$0(0) + " to " + t4.toString$0(0) + "."));
            t3 = t3.$eq(0, B._FilledLogicValue__LogicValueEnum_0_1) && t4.$eq(0, B._FilledLogicValue__LogicValueEnum_1_1);
          } else
            t3 = false;
          if (t3) {
            anyClkInvalid = false;
            anyClkPosedge = true;
            break;
          }
        }
        ++i;
      }
      if (anyClkInvalid)
        for (t3 = _this._assignedReceiverToOutputMap.get$values(), t4 = A._instanceType(t3), t4 = t4._eval$1("@<1>")._bind$1(t4._rest[1]), t3 = new A.MappedIterator(J.get$iterator$ax(t3.__internal$_iterable), t3._f, t4._eval$1("MappedIterator<1,2>")), t4 = t4._rest[1]; t3.moveNext$0();) {
          t5 = t3.__internal$_current;
          (t5 == null ? t4._as(t5) : t5)._wire.put$2$fill(B._FilledLogicValue__LogicValueEnum_2_1, false);
        }
      else if (anyClkPosedge) {
        t3 = type$.Logic;
        allDrivenSignals = new A.DuplicateDetectionSet(A.LinkedHashSet_LinkedHashSet$_empty(t3), A.LinkedHashSet_LinkedHashSet$_empty(t3), type$.DuplicateDetectionSet_Logic);
        for (t4 = _this.conditionals, _i = 0; _i < 1; ++_i)
          t4[_i].execute$1(allDrivenSignals);
        t4 = allDrivenSignals._duplicates;
        if (t4._collection$_length !== 0) {
          t1 = A.UnmodifiableSetView$(t4, t3).toString$0(0);
          A.createSentinel();
          throw A.wrapException(new A.SignalRedrivenException("Sequential drove the same signal(s) multiple times: " + t1));
        }
      }
      for (i = 0; i < t1.length; ++i)
        B.JSArray_methods.$indexSet(t2, i, null);
    },
    alwaysVerilogStatement$1(inputs) {
      var t1 = this._clks,
        t2 = A._arrayInstanceType(t1);
      return "always_ff @(" + new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Sequential_alwaysVerilogStatement_closure(type$.Map_String_String._as(inputs))), t2._eval$1("MappedListIterable<1,String>")).join$1(0, " or ") + ")";
    }
  };
  A.Sequential__setup_closure.prototype = {
    call$1($event) {
      return this.$call$body$Sequential__setup_closure0(type$.LogicValueChanged._as($event));
    },
    $call$body$Sequential__setup_closure0($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.driverInput;
              if ($.Simulator__phase !== B.SimulatorPhase_3)
                t1._inputToPreTickInputValuesMap.$indexSet(0, t2, t2._wire._currentValue);
              else {
                t1._driverInputsPendingPostUpdate.add$1(0, t2);
                if (!t1._pendingPostUpdate) {
                  t2 = $.$get$Simulator__postTickController();
                  t2 = new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>"));
                  t2.get$first(t2).then$1$1(new A.Sequential__setup__closure2(t1), type$.Null).catchError$2$test(new A.Sequential__setup__closure3(), new A.Sequential__setup__closure4());
                }
                t1._pendingPostUpdate = true;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.Sequential__setup__closure2.prototype = {
    call$1(value) {
      var t1, t2, t3, t4, t5, t6;
      for (t1 = this.$this, t2 = t1._driverInputsPendingPostUpdate, t3 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications, A._instanceType(t2)._precomputed1), t4 = t1._inputToPreTickInputValuesMap, t5 = t3.$ti._precomputed1; t3.moveNext$0();) {
        t6 = t3._collection$_current;
        if (t6 == null)
          t6 = t5._as(t6);
        t4.$indexSet(0, t6, t6._wire._currentValue);
      }
      t2.clear$0(0);
      t1._pendingPostUpdate = false;
    },
    $signature: 9
  };
  A.Sequential__setup__closure4.prototype = {
    call$1(error) {
      return type$.Exception._is(type$.Object._as(error));
    },
    $signature: 18
  };
  A.Sequential__setup__closure3.prototype = {
    call$2(err, stackTrace) {
      type$.Object._as(err);
      type$.StackTrace._as(stackTrace);
      type$.Exception._as(err);
      B.JSArray_methods.add$1($.Simulator__simExceptions, new A._SimulatorException(err, stackTrace));
    },
    $signature: 6
  };
  A.Sequential__setup_closure0.prototype = {
    call$1($event) {
      return this.$call$body$Sequential__setup_closure(type$.LogicValueChanged._as($event));
    },
    $call$body$Sequential__setup_closure($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2, t3;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._preTickClkValues;
              t3 = $async$self.i;
              if (!(t3 < t2.length)) {
                $async$returnValue = A.ioore(t2, t3);
                // goto return
                $async$goto = 1;
                break;
              }
              if (t2[t3] == null)
                B.JSArray_methods.$indexSet(t2, t3, $event.previousValue);
              if (!t1._pendingExecute) {
                t2 = $.$get$Simulator__clkStableController();
                t2 = new A._BroadcastStream(t2, A._instanceType(t2)._eval$1("_BroadcastStream<1>"));
                t2.get$first(t2).then$1$1(new A.Sequential__setup__closure(t1), type$.Null).catchError$2$test(new A.Sequential__setup__closure0(), new A.Sequential__setup__closure1());
              }
              t1._pendingExecute = true;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 17
  };
  A.Sequential__setup__closure.prototype = {
    call$1(value) {
      var t1 = this.$this;
      t1._conditional$_execute$0();
      t1._pendingExecute = false;
    },
    $signature: 9
  };
  A.Sequential__setup__closure1.prototype = {
    call$1(error) {
      return type$.Exception._is(type$.Object._as(error));
    },
    $signature: 18
  };
  A.Sequential__setup__closure0.prototype = {
    call$2(err, stackTrace) {
      type$.Object._as(err);
      type$.StackTrace._as(stackTrace);
      type$.Exception._as(err);
      B.JSArray_methods.add$1($.Simulator__simExceptions, new A._SimulatorException(err, stackTrace));
    },
    $signature: 6
  };
  A.Sequential_alwaysVerilogStatement_closure.prototype = {
    call$1(clk) {
      return "posedge " + A.S(this.inputs.$index(0, type$.Logic._as(clk).name));
    },
    $signature: 38
  };
  A.Conditional.prototype = {
    _updateAssignmentMaps$2(assignedReceiverToOutputMap, assignedDriverToInputMap) {
      var t2, _i,
        t1 = type$.Map_Logic_Logic;
      t1._as(assignedReceiverToOutputMap);
      t1._as(assignedDriverToInputMap);
      this.set$__Conditional__assignedReceiverToOutputMap_A(assignedReceiverToOutputMap);
      this.set$__Conditional__assignedDriverToInputMap_A(assignedDriverToInputMap);
      for (t1 = this.getConditionals$0(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i]._updateAssignmentMaps$2(assignedReceiverToOutputMap, assignedDriverToInputMap);
    },
    _updateOverrideMap$1(driverValueOverrideMap) {
      var t1, t2, _i;
      type$.Map_Logic_LogicValue._as(driverValueOverrideMap);
      this.set$_driverValueOverrideMap(driverValueOverrideMap);
      for (t1 = this.getConditionals$0(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i]._updateOverrideMap$1(driverValueOverrideMap);
    },
    driverValue$1(driver) {
      var _this = this,
        t1 = _this._driverValueOverrideMap,
        t2 = _this.__Conditional__assignedDriverToInputMap_A;
      t2 === $ && A.throwLateFieldNI("_assignedDriverToInputMap");
      t2 = t2.$index(0, driver);
      t2.toString;
      t2 = t1.containsKey$1(t2);
      t1 = _this.__Conditional__assignedDriverToInputMap_A;
      if (t2) {
        t2 = _this._driverValueOverrideMap;
        t1 = t1.$index(0, driver);
        t1.toString;
        t1 = t2.$index(0, t1);
        t1.toString;
      } else
        t1 = t1.$index(0, driver)._wire._currentValue;
      return t1;
    },
    set$__Conditional__assignedReceiverToOutputMap_A(__Conditional__assignedReceiverToOutputMap_A) {
      this.__Conditional__assignedReceiverToOutputMap_A = type$.Map_Logic_Logic._as(__Conditional__assignedReceiverToOutputMap_A);
    },
    set$__Conditional__assignedDriverToInputMap_A(__Conditional__assignedDriverToInputMap_A) {
      this.__Conditional__assignedDriverToInputMap_A = type$.Map_Logic_Logic._as(__Conditional__assignedDriverToInputMap_A);
    },
    set$_driverValueOverrideMap(_driverValueOverrideMap) {
      this._driverValueOverrideMap = type$.Map_Logic_LogicValue._as(_driverValueOverrideMap);
    }
  };
  A.ConditionalAssign.prototype = {
    getReceivers$0() {
      return A._setArrayType([this.receiver], type$.JSArray_Logic);
    },
    getDrivers$0() {
      return A._setArrayType([this.driver], type$.JSArray_Logic);
    },
    getConditionals$0() {
      return A._setArrayType([], type$.JSArray_Conditional);
    },
    execute$1(drivenSignals) {
      var t1, t2, t3, _this = this;
      type$.Set_Logic._as(drivenSignals);
      t1 = _this.receiver;
      t2 = _this.__Conditional__assignedReceiverToOutputMap_A;
      t2 === $ && A.throwLateFieldNI("_assignedReceiverToOutputMap");
      t2 = t2.$index(0, t1);
      t2.toString;
      t3 = _this.driverValue$1(_this.driver);
      t2._wire.put$2$fill(t3, false);
      if (!drivenSignals._duplicate_detection_set$_set.contains$1(0, t1) || t1._wire._currentValue.get$isValid())
        drivenSignals.add$1(0, t1);
    },
    verilogContents$4(indent, inputsNameMap, outputsNameMap, assignOperator) {
      var padding, t2, _this = this,
        t1 = type$.Map_String_String;
      t1._as(inputsNameMap);
      t1._as(outputsNameMap);
      padding = B.JSArray_methods.join$0(A.List_List$filled(indent, "  ", false, type$.String));
      t1 = _this.__Conditional__assignedDriverToInputMap_A;
      t1 === $ && A.throwLateFieldNI("_assignedDriverToInputMap");
      t1 = inputsNameMap.$index(0, t1.$index(0, _this.driver).name);
      t1.toString;
      t2 = _this.__Conditional__assignedReceiverToOutputMap_A;
      t2 === $ && A.throwLateFieldNI("_assignedReceiverToOutputMap");
      t2 = outputsNameMap.$index(0, t2.$index(0, _this.receiver).name);
      t2.toString;
      return padding + t2 + " " + assignOperator + " " + t1 + ";";
    }
  };
  A.If.prototype = {
    getReceivers$0() {
      var t1, t2, _i,
        allReceivers = A._setArrayType([], type$.JSArray_Logic);
      for (t1 = this.then, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        B.JSArray_methods.addAll$1(allReceivers, t1[_i].getReceivers$0());
      for (t1 = this.orElse, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        B.JSArray_methods.addAll$1(allReceivers, t1[_i].getReceivers$0());
      return allReceivers;
    },
    getDrivers$0() {
      var t1, t2, _i,
        allDrivers = A._setArrayType([this.condition], type$.JSArray_Logic);
      for (t1 = this.then, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        B.JSArray_methods.addAll$1(allDrivers, t1[_i].getDrivers$0());
      for (t1 = this.orElse, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        B.JSArray_methods.addAll$1(allDrivers, t1[_i].getDrivers$0());
      return allDrivers;
    },
    getConditionals$0() {
      var t1 = A.List_List$of(this.then, true, type$.Conditional);
      B.JSArray_methods.addAll$1(t1, this.orElse);
      return t1;
    },
    execute$1(drivenSignals) {
      var t1, t2, _i, t3, t4, t5, t6, t7, t8, t9, t10, t11, _this = this;
      type$.Set_Logic._as(drivenSignals);
      t1 = _this.condition;
      if (_this.driverValue$1(t1).$index(0, 0).$eq(0, B._FilledLogicValue__LogicValueEnum_1_1))
        for (t1 = _this.then, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].execute$1(drivenSignals);
      else if (_this.driverValue$1(t1).$index(0, 0).$eq(0, B._FilledLogicValue__LogicValueEnum_0_1))
        for (t1 = _this.orElse, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].execute$1(drivenSignals);
      else
        for (t2 = _this.getReceivers$0(), t3 = t2.length, t4 = drivenSignals._duplicate_detection_set$_set, t5 = type$.Logic, t6 = drivenSignals.$ti._precomputed1, t7 = drivenSignals._duplicates, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
          t8 = t5._as(t2[_i]);
          t9 = _this.__Conditional__assignedReceiverToOutputMap_A;
          t9 === $ && A.throwLateFieldNI("_assignedReceiverToOutputMap");
          t9 = t9.$index(0, t8);
          t9.toString;
          t10 = _this._driverValueOverrideMap;
          t11 = _this.__Conditional__assignedDriverToInputMap_A;
          t11 === $ && A.throwLateFieldNI("_assignedDriverToInputMap");
          t11 = t11.$index(0, t1);
          t11.toString;
          t11 = t10.containsKey$1(t11);
          t10 = _this.__Conditional__assignedDriverToInputMap_A;
          if (t11) {
            t11 = _this._driverValueOverrideMap;
            t10 = t10.$index(0, t1);
            t10.toString;
            t10 = t11.$index(0, t10);
            t10.toString;
          } else
            t10 = t10.$index(0, t1)._wire._currentValue;
          t10 = t10.$index(0, 0);
          t9._wire.put$2$fill(t10, false);
          if (!t4.contains$1(0, t8) || t8._wire._currentValue.get$isValid()) {
            t6._as(t8);
            if (t4.contains$1(0, t8))
              t7.add$1(0, t8);
            t4.add$1(0, t8);
          }
        }
    },
    verilogContents$4(indent, inputsNameMap, outputsNameMap, assignOperator) {
      var padding, conditionName, t2, ifContents, elseContents, verilog, _this = this,
        t1 = type$.Map_String_String;
      t1._as(inputsNameMap);
      t1._as(outputsNameMap);
      padding = B.JSArray_methods.join$0(A.List_List$filled(indent, "  ", false, type$.String));
      t1 = _this.__Conditional__assignedDriverToInputMap_A;
      t1 === $ && A.throwLateFieldNI("_assignedDriverToInputMap");
      conditionName = inputsNameMap.$index(0, t1.$index(0, _this.condition).name);
      t1 = _this.then;
      t2 = A._arrayInstanceType(t1);
      ifContents = new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.If_verilogContents_closure(indent, inputsNameMap, outputsNameMap, assignOperator)), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
      t2 = _this.orElse;
      t1 = A._arrayInstanceType(t2);
      elseContents = new A.MappedListIterable(t2, t1._eval$1("String(1)")._as(new A.If_verilogContents_closure0(indent, inputsNameMap, outputsNameMap, assignOperator)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "\n");
      verilog = padding + "if(" + A.S(conditionName) + ") begin\n" + ifContents + "\n" + padding + "end ";
      return (t2.length !== 0 ? verilog + ("else begin\n" + elseContents + "\n" + padding + "end ") : verilog) + "\n";
    }
  };
  A.If_verilogContents_closure.prototype = {
    call$1(conditional) {
      var _this = this;
      return type$.Conditional._as(conditional).verilogContents$4(_this.indent + 2, _this.inputsNameMap, _this.outputsNameMap, _this.assignOperator);
    },
    $signature: 14
  };
  A.If_verilogContents_closure0.prototype = {
    call$1(conditional) {
      var _this = this;
      return type$.Conditional._as(conditional).verilogContents$4(_this.indent + 2, _this.inputsNameMap, _this.outputsNameMap, _this.assignOperator);
    },
    $signature: 14
  };
  A.__Always_Module_CustomSystemVerilog.prototype = {};
  A._TwoInputBitwiseGate.prototype = {
    _TwoInputBitwiseGate$5$name(_op, _opStr, in0, in1, $name) {
      var in1Logic, t2, t3, t4, _this = this,
        t1 = in1 instanceof A.Logic;
      if (t1 && in0._wire.width !== in1._wire.width)
        throw A.wrapException(A.Exception_Exception("Input widths must match, but found " + in0.toString$0(0) + " and " + A.S(in1) + " with different widths."));
      in1Logic = t1 ? in1 : A.Const$(in1, in0._wire.width);
      t1 = in0.name;
      t2 = "_" + ("in0_" + t1);
      _this.___TwoInputBitwiseGate__in0Name_F !== $ && A.throwLateFieldAI("_in0Name");
      _this.___TwoInputBitwiseGate__in0Name_F = t2;
      t3 = in1Logic.name;
      t4 = "_" + ("in1_" + t3);
      _this.___TwoInputBitwiseGate__in1Name_F !== $ && A.throwLateFieldAI("_in1Name");
      _this.___TwoInputBitwiseGate__in1Name_F = t4;
      t3 = "_" + (t1 + "_" + $name + "_" + t3);
      _this.___TwoInputBitwiseGate__outName_F !== $ && A.throwLateFieldAI("_outName");
      _this.___TwoInputBitwiseGate__outName_F = t3;
      _this.addInput$3$width(t2, in0, in0._wire.width);
      _this.addInput$3$width(t4, in1Logic, in1Logic._wire.width);
      _this.addOutput$2$width(t3, in0._wire.width);
      _this._gates$_setup$0();
    },
    _gates$_setup$0() {
      var t1, _this = this;
      _this._gates$_execute$0();
      t1 = _this.___TwoInputBitwiseGate__in0Name_F;
      t1 === $ && A.throwLateFieldNI("_in0Name");
      t1 = _this.input$1(t1)._wire._glitchController._emitter;
      B.JSArray_methods.add$1(t1._actions, t1.$ti._eval$1("~(1)")._as(new A._TwoInputBitwiseGate__setup_closure(_this)));
      t1 = _this.___TwoInputBitwiseGate__in1Name_F;
      t1 === $ && A.throwLateFieldNI("_in1Name");
      t1 = _this.input$1(t1)._wire._glitchController._emitter;
      B.JSArray_methods.add$1(t1._actions, t1.$ti._eval$1("~(1)")._as(new A._TwoInputBitwiseGate__setup_closure0(_this)));
    },
    _gates$_execute$0() {
      var t1, t2, exception, _this = this, toPut = null;
      try {
        t1 = _this.___TwoInputBitwiseGate__in0Name_F;
        t1 === $ && A.throwLateFieldNI("_in0Name");
        t1 = _this.input$1(t1)._wire._currentValue;
        t2 = _this.___TwoInputBitwiseGate__in1Name_F;
        t2 === $ && A.throwLateFieldNI("_in1Name");
        toPut = _this._op.call$2(t1, _this.input$1(t2)._wire._currentValue);
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception)))
          toPut = B._FilledLogicValue__LogicValueEnum_2_1;
        else
          throw exception;
      }
      t1 = _this.___TwoInputBitwiseGate__outName_F;
      t1 === $ && A.throwLateFieldNI("_outName");
      t1 = _this.output$1(t1);
      t2 = toPut;
      t1._wire.put$2$fill(t2, false);
    },
    inlineVerilog$1(inputs) {
      var t1, t2;
      type$.Map_String_String._as(inputs);
      if (inputs.__js_helper$_length !== 2)
        throw A.wrapException(A.Exception_Exception("Gate has exactly two inputs."));
      t1 = this.___TwoInputBitwiseGate__in0Name_F;
      t1 === $ && A.throwLateFieldNI("_in0Name");
      t1 = inputs.$index(0, t1);
      t1.toString;
      t2 = this.___TwoInputBitwiseGate__in1Name_F;
      t2 === $ && A.throwLateFieldNI("_in1Name");
      t2 = inputs.$index(0, t2);
      t2.toString;
      return t1 + " " + this._opStr + " " + t2;
    },
    $isCustomSystemVerilog: 1
  };
  A._TwoInputBitwiseGate__setup_closure.prototype = {
    call$1(args) {
      type$.LogicValueChanged._as(args);
      this.$this._gates$_execute$0();
    },
    $signature: 1
  };
  A._TwoInputBitwiseGate__setup_closure0.prototype = {
    call$1(args) {
      type$.LogicValueChanged._as(args);
      this.$this._gates$_execute$0();
    },
    $signature: 1
  };
  A.Add.prototype = {};
  A.Add_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.LogicValue;
      return t1._as(a).$add(0, t1._as(b));
    },
    $signature: 19
  };
  A.Multiply.prototype = {};
  A.Multiply_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.LogicValue;
      return t1._as(a).$mul(0, t1._as(b));
    },
    $signature: 19
  };
  A.__TwoInputBitwiseGate_Module_InlineSystemVerilog.prototype = {};
  A.SimulatorPhase.prototype = {
    toString$0(_) {
      return "SimulatorPhase." + this._name;
    }
  };
  A.Simulator_tick_closure.prototype = {
    call$0() {
    },
    $signature: 0
  };
  A.Simulator_tick_closure0.prototype = {
    call$0() {
      var t1, t2, _i;
      for (t1 = $.$get$Simulator__pendingTimestamps().$index(0, this.nextTimeStamp), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].call$0();
    },
    $signature: 0
  };
  A._SimulatorException.prototype = {};
  A.SynthBuilder.prototype = {
    SynthBuilder$2($top, synthesizer) {
      var t1, t2, i, moduleI, t3, t4,
        modulesToParse = A._setArrayType([this.top], type$.JSArray_Module);
      for (t1 = type$.UnmodifiableListView_Module, t2 = type$.CustomSystemVerilog, i = 0; i < modulesToParse.length; ++i) {
        moduleI = modulesToParse[i];
        if (t2._is(moduleI))
          continue;
        B.JSArray_methods.addAll$1(modulesToParse, new A.UnmodifiableListView(moduleI._modules, t1));
      }
      for (t1 = type$.ReversedListIterable_Module, t3 = new A.ReversedListIterable(modulesToParse, t1), t3 = new A.ListIterator(t3, t3.get$length(t3), t1._eval$1("ListIterator<ListIterable.E>")), t1 = t1._eval$1("ListIterable.E"); t3.moveNext$0();) {
        t4 = t3.__internal$_current;
        if (t4 == null)
          t4 = t1._as(t4);
        if (!t2._is(t4))
          this._getInstanceType$1(t4);
      }
    },
    getFileContents$0() {
      var t1 = this._synthesisResults,
        t2 = A._instanceType(t1),
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,String>");
      return A.List_List$of(new A.EfficientLengthMappedIterable(t1, t2._eval$1("String(1)")._as(type$.UnmodifiableSetView_SynthesisResult._eval$1("String(1)")._as(new A.SynthBuilder_getFileContents_closure())), t3), true, t3._eval$1("Iterable.E"));
    },
    _getInstanceType$1(module) {
      var t2, newName, newSynthesisResult,
        t1 = this._moduleToInstanceTypeMap;
      if (t1.containsKey$1(module)) {
        t1 = t1.$index(0, module);
        t1.toString;
        return t1;
      }
      t2 = A._rtiToString(A.getRuntimeType(module)._rti, null);
      newName = A.Sanitizer_sanitizeSV(t2);
      type$.Map_Module_String._as(t1);
      t2 = type$._SynthLogic;
      t2 = new A._SynthModuleDefinition(module, A._setArrayType([], type$.JSArray__SynthAssignment), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashSet_LinkedHashSet$_empty(t2), A.LinkedHashMap_LinkedHashMap$_empty(type$.Logic, t2), A.LinkedHashMap_LinkedHashMap$_empty(type$.Module, type$._SynthSubModuleInstantiation));
      t2._SynthModuleDefinition$1(module);
      newSynthesisResult = new A._SystemVerilogSynthesisResult(t2, module, t1);
      t2 = A.List_List$of(newSynthesisResult._verilogInputs$0(), true, type$.String);
      B.JSArray_methods.addAll$1(t2, newSynthesisResult._verilogOutputs$0());
      t2 = B.JSArray_methods.join$1(t2, ",\n");
      newSynthesisResult.___SystemVerilogSynthesisResult__portsString_F !== $ && A.throwLateFieldAI("_portsString");
      newSynthesisResult.___SystemVerilogSynthesisResult__portsString_F = t2;
      t2 = newSynthesisResult._verilogModuleContents$1(t1);
      newSynthesisResult.___SystemVerilogSynthesisResult__moduleContentsString_F !== $ && A.throwLateFieldAI("_moduleContentsString");
      newSynthesisResult.___SystemVerilogSynthesisResult__moduleContentsString_F = t2;
      t2 = this._synthesisResults;
      if (t2.contains$1(0, newSynthesisResult)) {
        t2 = t1.$index(0, t2.lookup$1(newSynthesisResult).module);
        t2.toString;
        newName = t2;
      } else {
        t2.add$1(0, newSynthesisResult);
        newName = this._instanceTypeUniquifier.getUniqueName$2$initialName$reserved(newName, false);
      }
      t1.$indexSet(0, module, newName);
      return newName;
    }
  };
  A.SynthBuilder_getFileContents_closure.prototype = {
    call$1(synthesisResult) {
      var t1, t2, t3;
      type$.SynthesisResult._as(synthesisResult);
      t1 = A.S(type$.Map_Module_String._as(synthesisResult.moduleToInstanceTypeMap).$index(0, synthesisResult.module));
      t2 = synthesisResult.___SystemVerilogSynthesisResult__portsString_F;
      t2 === $ && A.throwLateFieldNI("_portsString");
      t3 = synthesisResult.___SystemVerilogSynthesisResult__moduleContentsString_F;
      t3 === $ && A.throwLateFieldNI("_moduleContentsString");
      return B.JSArray_methods.join$1(A._setArrayType(["module " + t1 + "(", t2, ");", t3, "endmodule : " + t1], type$.JSArray_String), "\n");
    },
    $signature: 41
  };
  A.SynthesisResult.prototype = {
    $eq(_, other) {
      var t1, t2,
        _s12_ = "_portsString",
        _s21_ = "_moduleContentsString";
      if (other == null)
        return false;
      if (other instanceof A.SynthesisResult) {
        t1 = other.___SystemVerilogSynthesisResult__portsString_F;
        t1 === $ && A.throwLateFieldNI(_s12_);
        t2 = this.___SystemVerilogSynthesisResult__portsString_F;
        t2 === $ && A.throwLateFieldNI(_s12_);
        if (t1 === t2) {
          t1 = other.___SystemVerilogSynthesisResult__moduleContentsString_F;
          t1 === $ && A.throwLateFieldNI(_s21_);
          t2 = this.___SystemVerilogSynthesisResult__moduleContentsString_F;
          t2 === $ && A.throwLateFieldNI(_s21_);
          t2 = t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var t2,
        t1 = this.___SystemVerilogSynthesisResult__portsString_F;
      t1 === $ && A.throwLateFieldNI("_portsString");
      t1 = B.JSString_methods.get$hashCode(t1);
      t2 = this.___SystemVerilogSynthesisResult__moduleContentsString_F;
      t2 === $ && A.throwLateFieldNI("_moduleContentsString");
      return t1 ^ B.JSString_methods.get$hashCode(t2);
    }
  };
  A.Synthesizer.prototype = {};
  A.SystemVerilogSynthesizer.prototype = {};
  A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure.prototype = {
    call$2(signalName, logic) {
      A._asString(signalName);
      type$.Logic._as(logic);
      B.JSArray_methods.add$1(this.connections, "." + signalName + "(" + A.S(this.inputs.$index(0, signalName)) + ")");
    },
    $signature: 20
  };
  A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure0.prototype = {
    call$2(signalName, logic) {
      A._asString(signalName);
      type$.Logic._as(logic);
      B.JSArray_methods.add$1(this.connections, "." + signalName + "(" + A.S(this.outputs.$index(0, signalName)) + ")");
    },
    $signature: 20
  };
  A.CustomSystemVerilog.prototype = {};
  A.InlineSystemVerilog.prototype = {
    instantiationVerilog$4(instanceType, instanceName, inputs, outputs) {
      var t1 = type$.Map_String_String;
      t1._as(inputs);
      t1._as(outputs);
      if (outputs.__js_helper$_length !== 1)
        throw A.wrapException(A.Exception_Exception("Inline verilog must have exactly one output, but saw " + outputs.toString$0(0) + "."));
      t1 = outputs.get$values();
      return "assign " + t1._f.call$1(J.get$first$ax(t1.__internal$_iterable)) + " = " + this.inlineVerilog$1(inputs) + ";  // " + instanceName;
    },
    $isModule: 1,
    $isCustomSystemVerilog: 1
  };
  A._SystemVerilogSynthesisResult.prototype = {
    _verilogInputs$0() {
      var t1 = this._synthModuleDefinition.inputs,
        t2 = A._instanceType(t1),
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,String>");
      return A.List_List$of(new A.EfficientLengthMappedIterable(t1, t2._eval$1("String(1)")._as(new A._SystemVerilogSynthesisResult__verilogInputs_closure()), t3), true, t3._eval$1("Iterable.E"));
    },
    _verilogOutputs$0() {
      var t1 = this._synthModuleDefinition.outputs,
        t2 = A._instanceType(t1),
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,String>");
      return A.List_List$of(new A.EfficientLengthMappedIterable(t1, t2._eval$1("String(1)")._as(new A._SystemVerilogSynthesisResult__verilogOutputs_closure()), t3), true, t3._eval$1("Iterable.E"));
    },
    _verilogInternalNets$0() {
      var t1, t2, t3,
        declarations = A._setArrayType([], type$.JSArray_String);
      for (t1 = this._synthModuleDefinition.internalNets, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3._needsDeclaration)
          B.JSArray_methods.add$1(declarations, "logic " + t3.definitionName$0() + ";");
      }
      return B.JSArray_methods.join$1(declarations, "\n");
    },
    _verilogAssignments$0() {
      var t1, t2, _i, assignment,
        assignmentLines = A._setArrayType([], type$.JSArray_String);
      for (t1 = this._synthModuleDefinition.assignments, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        assignment = t1[_i];
        B.JSArray_methods.add$1(assignmentLines, "assign " + assignment.dst.get$name() + " = " + assignment.srcName$0() + ";");
      }
      return B.JSArray_methods.join$1(assignmentLines, "\n");
    },
    _verilogSubModuleInstantiations$1(moduleToInstanceTypeMap) {
      var subModuleLines, t1, t2, t3, t4, t5, instanceType, instantiationVerilog;
      type$.Map_Module_String._as(moduleToInstanceTypeMap);
      subModuleLines = A._setArrayType([], type$.JSArray_String);
      for (t1 = this._synthModuleDefinition.moduleToSubModuleInstantiationMap.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t3 = type$.CustomSystemVerilog, t2 = t2._rest[1]; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        t5 = t4.module;
        if (!t3._is(t5) && !moduleToInstanceTypeMap.containsKey$1(t5))
          throw A.wrapException(A.Exception_Exception("No defined instance type found."));
        instanceType = moduleToInstanceTypeMap.$index(0, t5);
        instantiationVerilog = t4.instantiationVerilog$1(instanceType == null ? "*NONE*" : instanceType);
        if (instantiationVerilog != null)
          B.JSArray_methods.add$1(subModuleLines, instantiationVerilog);
      }
      return B.JSArray_methods.join$1(subModuleLines, "\n");
    },
    _verilogModuleContents$1(moduleToInstanceTypeMap) {
      type$.Map_Module_String._as(moduleToInstanceTypeMap);
      return new A.WhereIterable(A._setArrayType([this._verilogInternalNets$0(), this._verilogAssignments$0(), this._verilogSubModuleInstantiations$1(moduleToInstanceTypeMap)], type$.JSArray_String), type$.bool_Function_String._as(new A._SystemVerilogSynthesisResult__verilogModuleContents_closure()), type$.WhereIterable_String).join$1(0, "\n");
    }
  };
  A._SystemVerilogSynthesisResult__verilogInputs_closure.prototype = {
    call$1(sig) {
      return "input logic " + type$._SynthLogic._as(sig).definitionName$0();
    },
    $signature: 8
  };
  A._SystemVerilogSynthesisResult__verilogOutputs_closure.prototype = {
    call$1(sig) {
      return "output logic " + type$._SynthLogic._as(sig).definitionName$0();
    },
    $signature: 8
  };
  A._SystemVerilogSynthesisResult__verilogModuleContents_closure.prototype = {
    call$1(element) {
      return A._asString(element).length !== 0;
    },
    $signature: 21
  };
  A._SynthSubModuleInstantiation.prototype = {
    toString$0(_) {
      return "_SynthSubModuleInstantiation '" + this.name + "', module name:'" + this.module.name + "'";
    },
    _moduleInputsMap$0() {
      var t1 = type$.String;
      return this.inputMapping.map$2$1(0, new A._SynthSubModuleInstantiation__moduleInputsMap_closure(this), t1, t1);
    },
    instantiationVerilog$1(instanceType) {
      var t1, _this = this;
      if (!_this._needsDeclaration)
        return null;
      t1 = type$.String;
      return A.SystemVerilogSynthesizer_instantiationVerilogWithParameters(_this.module, instanceType, _this.name, _this._moduleInputsMap$0(), _this.outputMapping.map$2$1(0, new A._SynthSubModuleInstantiation_instantiationVerilog_closure(), t1, t1));
    },
    set$_synthLogicNameToInlineableSynthSubmoduleMap(_synthLogicNameToInlineableSynthSubmoduleMap) {
      this._synthLogicNameToInlineableSynthSubmoduleMap = type$.nullable_Map_String__SynthSubModuleInstantiation._as(_synthLogicNameToInlineableSynthSubmoduleMap);
    }
  };
  A._SynthSubModuleInstantiation__moduleInputsMap_closure.prototype = {
    call$2(synthLogic, logic) {
      var t1;
      type$._SynthLogic._as(synthLogic);
      type$.Logic._as(logic);
      t1 = this.$this._synthLogicNameToInlineableSynthSubmoduleMap;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1.$index(0, synthLogic.get$name());
        t1 = t1 == null ? null : "(" + type$.InlineSystemVerilog._as(t1.module).inlineVerilog$1(t1._moduleInputsMap$0()) + ")";
      }
      if (t1 == null)
        t1 = synthLogic.get$name();
      return new A.MapEntry(logic.name, t1, type$.MapEntry_String_String);
    },
    $signature: 22
  };
  A._SynthSubModuleInstantiation_instantiationVerilog_closure.prototype = {
    call$2(synthLogic, logic) {
      type$._SynthLogic._as(synthLogic);
      return new A.MapEntry(type$.Logic._as(logic).name, synthLogic.get$name(), type$.MapEntry_String_String);
    },
    $signature: 22
  };
  A._SynthModuleDefinition.prototype = {
    _getSynthSubModuleInstantiation$1(m) {
      var t1, t2, t3, t4, t5, newSSMI;
      type$.Module._as(m);
      t1 = this.moduleToSubModuleInstantiationMap;
      if (t1.containsKey$1(m)) {
        t1 = t1.$index(0, m);
        t1.toString;
        return t1;
      } else {
        t2 = m.get$uniqueInstanceName();
        t3 = this.___SynthModuleDefinition__synthInstantiationNameUniquifier_F;
        t3 === $ && A.throwLateFieldNI("_synthInstantiationNameUniquifier");
        t4 = type$._SynthLogic;
        t5 = type$.Logic;
        newSSMI = new A._SynthSubModuleInstantiation(m, t3.getUniqueName$3$initialName$nullStarter$reserved(t2, "m", false), A.LinkedHashMap_LinkedHashMap$_empty(t4, t5), A.LinkedHashMap_LinkedHashMap$_empty(t4, t5));
        t1.$indexSet(0, m, newSSMI);
        return newSSMI;
      }
    },
    toString$0(_) {
      return "module name: '" + this.module.name + "'";
    },
    _getSynthLogic$2(logic, allowPortName) {
      var t1, t2, t3, newSynth;
      if (logic == null)
        return null;
      else {
        t1 = this.logicToSynthMap;
        if (t1.containsKey$1(logic)) {
          t1 = t1.$index(0, logic);
          t1.toString;
          return t1;
        } else {
          t2 = logic.name;
          t3 = this.___SynthModuleDefinition__synthInstantiationNameUniquifier_F;
          t3 === $ && A.throwLateFieldNI("_synthInstantiationNameUniquifier");
          newSynth = new A._SynthLogic(logic, t3.getUniqueName$2$initialName$reserved(t2, allowPortName), !allowPortName);
          t1.$indexSet(0, logic, newSynth);
          return newSynth;
        }
      }
    },
    _SynthModuleDefinition$1(module) {
      var logicsToTraverse, t5, t6, t7, t8, t9, t10, i, receiver, driver, receiverIsModuleInput, receiverIsModuleOutput, t11, driverIsModuleInput, driverIsModuleOutput, t12, synthDriver, t13, receiverIsSubModuleOutput, t14, receiverIsSubModuleInput, _this = this, _null = null,
        t1 = _this.module,
        t2 = t1._inputs,
        t3 = A.LinkedHashSet_LinkedHashSet$of(new A.LinkedHashMapKeyIterable(t2, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>")), type$.String),
        t4 = t1._outputs;
      t3.addAll$1(0, new A.LinkedHashMapKeyIterable(t4, A._instanceType(t4)._eval$1("LinkedHashMapKeyIterable<1>")));
      t3 = A.Uniquifier$(t3);
      _this.___SynthModuleDefinition__synthInstantiationNameUniquifier_F !== $ && A.throwLateFieldAI("_synthInstantiationNameUniquifier");
      _this.___SynthModuleDefinition__synthInstantiationNameUniquifier_F = t3;
      logicsToTraverse = new A.TraverseableCollection(A.LinkedHashSet_LinkedHashSet$_empty(type$.Logic), A._setArrayType([], type$.JSArray_Logic), type$.TraverseableCollection_Logic);
      t3 = type$.Iterable_Logic;
      t5 = logicsToTraverse.get$add(logicsToTraverse);
      t3._as(t4.get$values()).forEach$1(0, t5);
      for (t6 = t4.get$values(), t7 = A._instanceType(t6), t7 = t7._eval$1("@<1>")._bind$1(t7._rest[1]), t6 = new A.MappedIterator(J.get$iterator$ax(t6.__internal$_iterable), t6._f, t7._eval$1("MappedIterator<1,2>")), t8 = _this.outputs, t7 = t7._rest[1]; t6.moveNext$0();) {
        t9 = t6.__internal$_current;
        t9 = _this._getSynthLogic$2(t9 == null ? t7._as(t9) : t9, true);
        t9.toString;
        t8.add$1(0, t9);
      }
      for (t6 = t2.get$values(), t7 = A._instanceType(t6), t7 = t7._eval$1("@<1>")._bind$1(t7._rest[1]), t6 = new A.MappedIterator(J.get$iterator$ax(t6.__internal$_iterable), t6._f, t7._eval$1("MappedIterator<1,2>")), t9 = _this.inputs, t7 = t7._rest[1]; t6.moveNext$0();) {
        t10 = t6.__internal$_current;
        t10 = _this._getSynthLogic$2(t10 == null ? t7._as(t10) : t10, true);
        t10.toString;
        t9.add$1(0, t10);
      }
      for (t6 = type$.UnmodifiableListView_Module, t7 = new A.UnmodifiableListView(t1._modules, t6), t7 = new A.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListMixin.E>")), t6 = t6._eval$1("ListMixin.E"); t7.moveNext$0();) {
        t10 = t7.__internal$_current;
        if (t10 == null)
          t10 = t6._as(t10);
        _this._getSynthSubModuleInstantiation$1(t10);
        t3._as(t10._inputs.get$values()).forEach$1(0, t5);
        t3._as(t10._outputs.get$values()).forEach$1(0, t5);
      }
      for (t3 = logicsToTraverse._list, t5 = _this.internalNets, t6 = _this.assignments, t7 = logicsToTraverse._traverseable_collection$_set, i = 0; i < t3.length; ++i) {
        receiver = t3[i];
        driver = receiver._srcConnection;
        t10 = receiver.name;
        receiverIsModuleInput = J.$eq$(t2.$index(0, t10), receiver);
        receiverIsModuleOutput = J.$eq$(t4.$index(0, t10), receiver);
        t11 = driver != null;
        driverIsModuleInput = t11 && J.$eq$(t2.$index(0, driver.name), driver);
        driverIsModuleOutput = t11 && J.$eq$(t4.$index(0, driver.name), driver);
        t12 = _this._getSynthLogic$2(receiver, receiverIsModuleInput || receiverIsModuleOutput);
        t12.toString;
        synthDriver = _this._getSynthLogic$2(driver, driverIsModuleInput || driverIsModuleOutput);
        if (receiverIsModuleInput)
          t9.add$1(0, t12);
        else if (receiverIsModuleOutput)
          t8.add$1(0, t12);
        else
          t5.add$1(0, t12);
        t13 = receiver._parentModule;
        t13 = t13 == null ? _null : J.$eq$(t13._outputs.$index(0, t10), receiver);
        if (t13 === true) {
          t13 = receiver._parentModule;
          receiverIsSubModuleOutput = (t13 == null ? _null : t13._parent) === t1;
        } else
          receiverIsSubModuleOutput = false;
        if (receiverIsSubModuleOutput) {
          t11 = receiver._parentModule;
          t11.toString;
          _this._getSynthSubModuleInstantiation$1(t11).outputMapping.$indexSet(0, t12, receiver);
          for (t11 = t11._inputs.get$values(), t13 = A._instanceType(t11), t13 = t13._eval$1("@<1>")._bind$1(t13._rest[1]), t11 = new A.MappedIterator(J.get$iterator$ax(t11.__internal$_iterable), t11._f, t13._eval$1("MappedIterator<1,2>")), t13 = t13._rest[1]; t11.moveNext$0();) {
            t14 = t11.__internal$_current;
            if (t14 == null)
              t14 = t13._as(t14);
            if (!t7.contains$1(0, t14))
              if (!t7.contains$1(0, t14)) {
                B.JSArray_methods.add$1(t3, t14);
                t7.add$1(0, t14);
              }
          }
        } else if (t11) {
          if (!J.$eq$(t2.$index(0, t10), receiver)) {
            if (!t7.contains$1(0, driver))
              if (!t7.contains$1(0, driver)) {
                B.JSArray_methods.add$1(t3, driver);
                t7.add$1(0, driver);
              }
            B.JSArray_methods.add$1(t6, new A._SynthAssignment(t12, synthDriver));
          }
        } else {
          t11 = receiver._wire._currentValue.get$isValid();
          if (t11)
            B.JSArray_methods.add$1(t6, new A._SynthAssignment(t12, receiver._wire._currentValue));
          else {
            t11 = receiver._wire._currentValue.get$isFloating();
            if (!t11)
              B.JSArray_methods.add$1(t6, new A._SynthAssignment(t12, receiver._wire._currentValue));
          }
        }
        t11 = receiver._parentModule;
        t10 = t11 == null ? _null : J.$eq$(t11._inputs.$index(0, t10), receiver);
        if (t10 === true) {
          t10 = receiver._parentModule;
          receiverIsSubModuleInput = (t10 == null ? _null : t10._parent) === t1;
        } else
          receiverIsSubModuleInput = false;
        if (receiverIsSubModuleInput) {
          t10 = receiver._parentModule;
          t10.toString;
          _this._getSynthSubModuleInstantiation$1(t10).inputMapping.$indexSet(0, t12, receiver);
        }
      }
      _this._collapseAssignments$0();
      _this._collapseChainableModules$0();
    },
    _collapseChainableModules$0() {
      var signalNameUsage, t3, t4, synthModuleInputNames, t5, t6, t7, inputSynthLogicName, synthLogicNameToInlineableSynthSubmoduleMap, it, outputSynthLogic, _this = this, _box_0 = {},
        t1 = type$.WhereTypeIterable_InlineSystemVerilog,
        t2 = type$._SynthSubModuleInstantiation,
        inlineableSubmoduleInstantiations = A.MappedIterable_MappedIterable(new A.WhereTypeIterable(new A.UnmodifiableListView(_this.module._modules, type$.UnmodifiableListView_Module), t1), t1._eval$1("_SynthSubModuleInstantiation(Iterable.E)")._as(_this.get$_getSynthSubModuleInstantiation()), t1._eval$1("Iterable.E"), t2);
      t1 = type$.String;
      signalNameUsage = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int);
      t3 = _this.inputs;
      t4 = A._instanceType(t3);
      synthModuleInputNames = new A.EfficientLengthMappedIterable(t3, t4._eval$1("String(1)")._as(new A._SynthModuleDefinition__collapseChainableModules_closure()), t4._eval$1("EfficientLengthMappedIterable<1,String>"));
      for (t3 = _this.moduleToSubModuleInstantiationMap, t4 = t3.get$values(), t5 = A._instanceType(t4), t5 = t5._eval$1("@<1>")._bind$1(t5._rest[1]), t4 = new A.MappedIterator(J.get$iterator$ax(t4.__internal$_iterable), t4._f, t5._eval$1("MappedIterator<1,2>")), t5 = t5._rest[1]; t4.moveNext$0();) {
        t6 = t4.__internal$_current;
        for (t6 = (t6 == null ? t5._as(t6) : t6).inputMapping, t7 = new A.LinkedHashMapKeyIterator(t6, t6._modifications, A._instanceType(t6)._eval$1("LinkedHashMapKeyIterator<1>")), t7._cell = t6._first; t7.moveNext$0();) {
          inputSynthLogicName = t7.__js_helper$_current.get$name();
          if (synthModuleInputNames.contains$1(0, inputSynthLogicName))
            continue;
          if (!signalNameUsage.containsKey$1(inputSynthLogicName))
            signalNameUsage.$indexSet(0, inputSynthLogicName, 1);
          else {
            t6 = signalNameUsage.$index(0, inputSynthLogicName);
            t6.toString;
            signalNameUsage.$indexSet(0, inputSynthLogicName, t6 + 1);
          }
        }
      }
      _box_0.singleUseNames = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      signalNameUsage.forEach$1(0, new A._SynthModuleDefinition__collapseChainableModules_closure0(_box_0));
      t4 = _box_0.singleUseNames;
      t5 = A._instanceType(t4);
      t6 = t5._eval$1("WhereIterable<1>");
      _box_0.singleUseNames = A.LinkedHashSet_LinkedHashSet$of(new A.WhereIterable(t4, t5._eval$1("bool(1)")._as(A.module_Module_isUnpreferred$closure()), t6), t6._eval$1("Iterable.E"));
      t6 = A._instanceType(inlineableSubmoduleInstantiations);
      t5 = t6._eval$1("bool(Iterable.E)")._as(new A._SynthModuleDefinition__collapseChainableModules_closure1(_box_0));
      synthLogicNameToInlineableSynthSubmoduleMap = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      for (t1 = inlineableSubmoduleInstantiations.get$iterator(inlineableSubmoduleInstantiations), t6 = new A.WhereIterator(t1, t5, t6._eval$1("WhereIterator<Iterable.E>")); t6.moveNext$0();) {
        t2 = t1.get$current();
        t4 = t2.outputMapping;
        t4 = new A.LinkedHashMapKeyIterable(t4, A._instanceType(t4)._eval$1("LinkedHashMapKeyIterable<1>"));
        it = t4.get$iterator(t4);
        if (!it.moveNext$0())
          A.throwExpression(A.IterableElementError_noElement());
        outputSynthLogic = it.get$current();
        outputSynthLogic._needsDeclaration = false;
        t4 = outputSynthLogic._mergedNameSynthLogic;
        if (t4 != null)
          t4.clearDeclaration$0();
        t2._needsDeclaration = false;
        synthLogicNameToInlineableSynthSubmoduleMap.$indexSet(0, outputSynthLogic.get$name(), t2);
      }
      for (t1 = t3.get$values(), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        (t3 == null ? t2._as(t3) : t3).set$_synthLogicNameToInlineableSynthSubmoduleMap(synthLogicNameToInlineableSynthSubmoduleMap);
      }
    },
    _collapseAssignments$0() {
      var t1, t2, prevAssignmentCount, reducedAssignments, t3, _i, assignment, dst, src, t4, t5, _null = null;
      for (t1 = this.assignments, t2 = type$.JSArray__SynthAssignment, prevAssignmentCount = 0; prevAssignmentCount !== t1.length;) {
        reducedAssignments = A._setArrayType([], t2);
        for (t3 = t1.length, _i = 0; prevAssignmentCount = t1.length, _i < prevAssignmentCount; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
          assignment = t1[_i];
          dst = assignment.dst;
          src = assignment._src;
          src = src instanceof A._SynthLogic ? src : _null;
          t4 = dst.get$name();
          t5 = src == null;
          if (t4 === (t5 ? _null : src.get$name()))
            throw A.wrapException(A.Exception_Exception("Circular assignment detected between " + dst.toString$0(0) + " and " + A.S(src) + "."));
          if (!t5) {
            t4 = dst._mergedNameSynthLogic;
            t4 = t4 == null ? _null : t4.get$renameable();
            if (t4 == null ? dst._renameable : t4) {
              t4 = src._mergedNameSynthLogic;
              t4 = t4 == null ? _null : t4.get$renameable();
              if (t4 == null)
                t4 = src._renameable;
            } else
              t4 = false;
            if (t4)
              if (B.JSString_methods.startsWith$1(dst.get$name(), "_"))
                dst.mergeName$1(src);
              else
                src.mergeName$1(dst);
            else {
              t4 = dst._mergedNameSynthLogic;
              t4 = t4 == null ? _null : t4.get$renameable();
              if (t4 == null ? dst._renameable : t4)
                dst.mergeName$1(src);
              else {
                t4 = src._mergedNameSynthLogic;
                t4 = t4 == null ? _null : t4.get$renameable();
                if (t4 == null ? src._renameable : t4)
                  src.mergeName$1(dst);
                else
                  B.JSArray_methods.add$1(reducedAssignments, assignment);
              }
            }
          } else {
            t4 = dst._mergedNameSynthLogic;
            t4 = t4 == null ? _null : t4.get$renameable();
            if (t4 == null ? dst._renameable : t4)
              dst.mergeConst$1(assignment.srcName$0());
            else
              B.JSArray_methods.add$1(reducedAssignments, assignment);
          }
        }
        B.JSArray_methods.clear$0(t1);
        B.JSArray_methods.addAll$1(t1, reducedAssignments);
      }
    }
  };
  A._SynthModuleDefinition__collapseChainableModules_closure.prototype = {
    call$1(inputSynth) {
      return type$._SynthLogic._as(inputSynth).get$name();
    },
    $signature: 8
  };
  A._SynthModuleDefinition__collapseChainableModules_closure0.prototype = {
    call$2(signalName, signalUsageCount) {
      A._asString(signalName);
      if (A._asInt(signalUsageCount) === 1)
        this._box_0.singleUseNames.add$1(0, signalName);
    },
    $signature: 47
  };
  A._SynthModuleDefinition__collapseChainableModules_closure1.prototype = {
    call$1(submoduleInstantiation) {
      var t1 = type$._SynthSubModuleInstantiation._as(submoduleInstantiation).outputMapping;
      t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      return this._box_0.singleUseNames.contains$1(0, t1.get$first(t1).get$name());
    },
    $signature: 48
  };
  A._SynthLogic.prototype = {
    get$renameable() {
      var t1 = this._mergedNameSynthLogic;
      t1 = t1 == null ? null : t1.get$renameable();
      return t1 == null ? this._renameable : t1;
    },
    get$name() {
      var t1 = this._mergedNameSynthLogic;
      t1 = t1 == null ? null : t1.get$name();
      if (t1 == null)
        t1 = this._mergedConst;
      return t1 == null ? this._systemverilog$_name : t1;
    },
    toString$0(_) {
      return "'" + this.get$name() + "', logic name: '" + this.logic.name + "'";
    },
    clearDeclaration$0() {
      this._needsDeclaration = false;
      var t1 = this._mergedNameSynthLogic;
      if (t1 != null)
        t1.clearDeclaration$0();
    },
    mergeName$1(other) {
      var t1, _this = this;
      if (!_this.get$renameable())
        throw A.wrapException(A.Exception_Exception("This _SynthLogic (" + _this.toString$0(0) + ") cannot be renamed to " + other.toString$0(0) + "."));
      _this._mergedConst = null;
      t1 = _this._mergedNameSynthLogic;
      if (t1 != null)
        t1.mergeName$1(_this);
      _this._mergedNameSynthLogic = other;
      _this._needsDeclaration = false;
    },
    mergeConst$1(constant) {
      var t1, _this = this;
      if (!_this.get$renameable())
        throw A.wrapException(A.Exception_Exception("This _SynthLogic (" + _this.toString$0(0) + ") cannot be renamed to " + constant + "."));
      t1 = _this._mergedNameSynthLogic;
      if (t1 != null)
        t1.mergeConst$1(constant);
      _this._mergedNameSynthLogic = null;
      _this._mergedConst = constant;
      _this._needsDeclaration = false;
    },
    definitionName$0() {
      var t1 = this.logic._wire.width;
      if (t1 > 1)
        return "[" + (t1 - 1) + ":0] " + this.get$name();
      else
        return this.get$name();
    }
  };
  A._SynthAssignment.prototype = {
    toString$0(_) {
      return this.dst.get$name() + " <= " + this.srcName$0();
    },
    srcName$0() {
      var t1 = this._src;
      if (t1 instanceof A.LogicValue)
        return t1.toString$0(0);
      else if (t1 instanceof A._SynthLogic)
        return t1.get$name();
      else
        throw A.wrapException(A.Exception_Exception("Don't know how to synthesize value: " + A.S(t1)));
    }
  };
  A.SynchronousPropagator.prototype = {};
  A.SynchronousEmitter.prototype = {
    _propagate$1(t) {
      var t1, t2, _i, _this = this;
      _this.$ti._precomputed1._as(t);
      _this._isEmitting = true;
      for (t1 = _this._actions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].call$1(t);
      _this._isEmitting = false;
    }
  };
  A.Uniquifier.prototype = {
    getUniqueName$3$initialName$nullStarter$reserved(initialName, nullStarter, reserved) {
      var actualName, t2, t3, t4, t5, _this = this,
        constructActualName = new A.Uniquifier_getUniqueName_constructActualName(_this, initialName),
        t1 = _this._nameCounters;
      if (!t1.containsKey$1(initialName)) {
        t1.$indexSet(0, initialName, -1);
        actualName = initialName;
      } else {
        t2 = t1.$index(0, initialName);
        t2.toString;
        t1.$indexSet(0, initialName, t2 + 1);
        actualName = constructActualName.call$0();
      }
      t2 = _this._takenNames;
      t3 = !reserved;
      t4 = _this._reservedNames;
      while (true) {
        if (!t2.contains$1(0, actualName))
          t5 = t3 && t4.contains$1(0, actualName);
        else
          t5 = true;
        if (!t5)
          break;
        t5 = t1.$index(0, initialName);
        t5.toString;
        t1.$indexSet(0, initialName, t5 + 1);
        actualName = constructActualName.call$0();
      }
      if (reserved && initialName !== actualName)
        throw A.wrapException(A.Exception_Exception('Unable to acquire reserved name "' + initialName + '".'));
      t2.add$1(0, actualName);
      if (reserved)
        t4.add$1(0, actualName);
      return actualName;
    },
    getUniqueName$2$initialName$reserved(initialName, reserved) {
      return this.getUniqueName$3$initialName$nullStarter$reserved(initialName, "i", reserved);
    },
    getUniqueName$1$initialName(initialName) {
      return this.getUniqueName$3$initialName$nullStarter$reserved(initialName, "i", false);
    }
  };
  A.Uniquifier_getUniqueName_constructActualName.prototype = {
    call$0() {
      var t1 = this.requestedName,
        t2 = this.$this._nameCounters.$index(0, t1);
      t2.toString;
      return t1 + "_" + t2;
    },
    $signature: 49
  };
  A._BigLogicValue.prototype = {
    _equals$1(other) {
      var t1, t2,
        _s8_ = "_invalid";
      if (other instanceof A._FilledLogicValue)
        return other.$eq(0, this);
      if (!(other instanceof A._BigLogicValue))
        return false;
      t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      t2 = other.___BigLogicValue__value_F;
      t2 === $ && A.throwLateFieldNI("_value");
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0) {
        t1 = this.___BigLogicValue__invalid_F;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = other.___BigLogicValue__invalid_F;
        t2 === $ && A.throwLateFieldNI(_s8_);
        t1 = t1.compareTo$1(0, t2) === 0;
      } else
        t1 = false;
      return t1;
    },
    get$_hashCode() {
      var t2,
        t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      t1 = t1.get$hashCode(t1);
      t2 = this.___BigLogicValue__invalid_F;
      t2 === $ && A.throwLateFieldNI("_invalid");
      return t1 ^ t2.get$hashCode(t2);
    },
    _getIndex$1(index) {
      var bitValue,
        t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      t1 = t1.$shr(0, index);
      bitValue = !t1.get$isEven(t1);
      t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      t1 = t1.$shr(0, index);
      if (!t1.get$isEven(t1))
        t1 = bitValue ? B._FilledLogicValue__LogicValueEnum_3_1 : B._FilledLogicValue__LogicValueEnum_2_1;
      else
        t1 = bitValue ? B._FilledLogicValue__LogicValueEnum_1_1 : B._FilledLogicValue__LogicValueEnum_0_1;
      return t1;
    },
    _getRange$2(start, end) {
      var t2,
        _s8_ = "_invalid",
        newWidth = end - start,
        t1 = this.___BigLogicValue__value_F;
      if (newWidth > 64) {
        t1 === $ && A.throwLateFieldNI("_value");
        t1 = t1.$shr(0, start).$and(0, A._BigLogicValue__maskOfWidth(newWidth));
        t2 = this.___BigLogicValue__invalid_F;
        t2 === $ && A.throwLateFieldNI(_s8_);
        return A.LogicValue__bigLogicValueOrFilled(t1, t2.$shr(0, start).$and(0, A._BigLogicValue__maskOfWidth(newWidth)), newWidth);
      } else {
        t1 === $ && A.throwLateFieldNI("_value");
        t1 = A.BigLogicValueBigIntUtilities_toIntUnsigned(t1.$shr(0, start).$and(0, A._BigLogicValue__maskOfWidth(newWidth)), newWidth);
        t2 = this.___BigLogicValue__invalid_F;
        t2 === $ && A.throwLateFieldNI(_s8_);
        return A.LogicValue__smallLogicValueOrFilled(t1, A.BigLogicValueBigIntUtilities_toIntUnsigned(t2.$shr(0, start).$and(0, A._BigLogicValue__maskOfWidth(newWidth)), newWidth), newWidth);
      }
    },
    get$reversed(_) {
      var t1 = this.toList$0(0);
      return A.LogicValue_of(new A.ReversedListIterable(t1, A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>")));
    },
    get$isValid() {
      var t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      return t1.get$sign(t1) === 0;
    },
    get$isFloating() {
      var t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      t1 = t1.compareTo$1(0, A._BigLogicValue__maskOfWidth(this.width));
      if (t1 === 0) {
        t1 = this.___BigLogicValue__value_F;
        t1 === $ && A.throwLateFieldNI("_value");
        t1 = t1.compareTo$1(0, $.$get$_BigIntImpl_one()) === 0;
      } else
        t1 = false;
      return t1;
    },
    toBigInt$0() {
      var t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      if (t1.get$sign(t1) !== 0)
        throw A.wrapException(A.Exception_Exception("Cannot convert invalid LogicValue to BigInt: " + this.toString$0(0)));
      t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      return t1;
    },
    toInt$0(_) {
      return A.throwExpression(A.Exception_Exception("LogicValue width " + this.width + string$.x20is_to));
    },
    $not(_) {
      var t2, t3,
        t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      t1 = t1.$not(0);
      t2 = this.___BigLogicValue__invalid_F;
      t2 === $ && A.throwLateFieldNI("_invalid");
      t3 = this.width;
      return A.LogicValue__bigLogicValueOrFilled(t1.$and(0, t2.$not(0)).$and(0, A._BigLogicValue__maskOfWidth(t3)), t2, t3);
    },
    get$_bigIntInvalid() {
      var t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      return t1;
    },
    get$_bigIntValue() {
      var t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      return t1;
    },
    get$_intInvalid() {
      var t1 = this.___BigLogicValue__invalid_F;
      t1 === $ && A.throwLateFieldNI("_invalid");
      return A.BigLogicValueBigIntUtilities_toIntUnsigned(t1, this.width);
    },
    get$_intValue() {
      var t1 = this.___BigLogicValue__value_F;
      t1 === $ && A.throwLateFieldNI("_value");
      return A.BigLogicValueBigIntUtilities_toIntUnsigned(t1, this.width);
    }
  };
  A._FilledLogicValue.prototype = {
    _equals$1(other) {
      var _this = this, _s6_ = "_value",
        _s8_ = "_invalid",
        t1 = other.width,
        t2 = _this.width;
      if (t1 !== t2)
        return false;
      if (t1 === 0 && t2 === 0)
        return true;
      if (other instanceof A._FilledLogicValue)
        return _this._values$_value === other._values$_value;
      else if (other instanceof A._SmallLogicValue) {
        t2 = _this._values$_value;
        if (t2 === B._LogicValueEnum_0)
          return other._values$_value === 0 && other._invalid === 0;
        else if (t2 === B._LogicValueEnum_1)
          return other._values$_value === A._SmallLogicValue__maskOfWidth(t1) && other._invalid === 0;
        else if (t2 === B._LogicValueEnum_2)
          return other._values$_value === 0 && other._invalid === A._SmallLogicValue__maskOfWidth(t1);
        else if (t2 === B._LogicValueEnum_3)
          return other._values$_value === A._SmallLogicValue__maskOfWidth(t1) && other._invalid === A._SmallLogicValue__maskOfWidth(t1);
      } else if (other instanceof A._BigLogicValue) {
        t2 = _this._values$_value;
        if (t2 === B._LogicValueEnum_0) {
          t1 = other.___BigLogicValue__value_F;
          t1 === $ && A.throwLateFieldNI(_s6_);
          if (t1.get$sign(t1) === 0) {
            t1 = other.___BigLogicValue__invalid_F;
            t1 === $ && A.throwLateFieldNI(_s8_);
            t1 = t1.get$sign(t1) === 0;
          } else
            t1 = false;
          return t1;
        } else if (t2 === B._LogicValueEnum_1) {
          t2 = other.___BigLogicValue__value_F;
          t2 === $ && A.throwLateFieldNI(_s6_);
          t1 = t2.compareTo$1(0, A._BigLogicValue__maskOfWidth(t1));
          if (t1 === 0) {
            t1 = other.___BigLogicValue__invalid_F;
            t1 === $ && A.throwLateFieldNI(_s8_);
            t1 = t1.get$sign(t1) === 0;
          } else
            t1 = false;
          return t1;
        } else if (t2 === B._LogicValueEnum_2) {
          t2 = other.___BigLogicValue__value_F;
          t2 === $ && A.throwLateFieldNI(_s6_);
          if (t2.get$sign(t2) === 0) {
            t2 = other.___BigLogicValue__invalid_F;
            t2 === $ && A.throwLateFieldNI(_s8_);
            t1 = t2.compareTo$1(0, A._BigLogicValue__maskOfWidth(t1)) === 0;
          } else
            t1 = false;
          return t1;
        } else if (t2 === B._LogicValueEnum_3) {
          t2 = other.___BigLogicValue__value_F;
          t2 === $ && A.throwLateFieldNI(_s6_);
          t2 = t2.compareTo$1(0, A._BigLogicValue__maskOfWidth(t1));
          if (t2 === 0) {
            t2 = other.___BigLogicValue__invalid_F;
            t2 === $ && A.throwLateFieldNI(_s8_);
            t1 = t2.compareTo$1(0, A._BigLogicValue__maskOfWidth(t1)) === 0;
          } else
            t1 = false;
          return t1;
        }
      }
      throw A.wrapException(A.Exception_Exception("Unexpected unknown comparison between " + A.getRuntimeType(_this).toString$0(0) + " and " + A.getRuntimeType(other).toString$0(0) + "."));
    },
    _getIndex$1(index) {
      return new A._FilledLogicValue(this._values$_value, 1);
    },
    _getRange$2(start, end) {
      var t1 = this._values$_value,
        t2 = end - start;
      return new A._FilledLogicValue(t2 > 0 ? t1 : B._LogicValueEnum_0, t2);
    },
    get$reversed(_) {
      return this;
    },
    get$_hashCode() {
      return A.Primitives_objectHashCode(this._values$_value);
    },
    get$isValid() {
      var t1 = this._values$_value;
      return !(t1 === B._LogicValueEnum_2 || t1 === B._LogicValueEnum_3);
    },
    get$isFloating() {
      return this._values$_value === B._LogicValueEnum_3;
    },
    toBigInt$0() {
      var t1 = this._values$_value;
      if (t1 === B._LogicValueEnum_1)
        return A._BigLogicValue__maskOfWidth(this.width);
      else if (t1 === B._LogicValueEnum_0)
        return $.$get$_BigIntImpl_zero();
      throw A.wrapException(A.Exception_Exception('Cannot convert invalid value "' + t1.toString$0(0) + '" to BigInt.'));
    },
    toInt$0(_) {
      var t2,
        t1 = this.width;
      if (t1 > 64)
        throw A.wrapException(A.Exception_Exception("LogicValue width " + t1 + string$.x20is_to));
      t2 = this._values$_value;
      if (t2 === B._LogicValueEnum_1)
        return A._SmallLogicValue__maskOfWidth(t1);
      else if (t2 === B._LogicValueEnum_0)
        return 0;
      throw A.wrapException(A.Exception_Exception('Cannot convert invalid value "' + t2.toString$0(0) + '" to an int.'));
    },
    $not(_) {
      var t2,
        t1 = this._values$_value;
      if (t1 === B._LogicValueEnum_2 || t1 === B._LogicValueEnum_3)
        t1 = B._LogicValueEnum_2;
      else
        t1 = t1 === B._LogicValueEnum_0 ? B._LogicValueEnum_1 : B._LogicValueEnum_0;
      t2 = this.width;
      return new A._FilledLogicValue(t2 > 0 ? t1 : B._LogicValueEnum_0, t2);
    },
    get$_bigIntInvalid() {
      var t1 = this._values$_value;
      return t1 === B._LogicValueEnum_3 || t1 === B._LogicValueEnum_2 ? A._BigLogicValue__maskOfWidth(this.width) : $.$get$_BigIntImpl_zero();
    },
    get$_bigIntValue() {
      var t1 = this._values$_value;
      return t1 === B._LogicValueEnum_1 || t1 === B._LogicValueEnum_3 ? A._BigLogicValue__maskOfWidth(this.width) : $.$get$_BigIntImpl_zero();
    },
    get$_intInvalid() {
      var t1 = this._values$_value;
      return t1 === B._LogicValueEnum_3 || t1 === B._LogicValueEnum_2 ? A._SmallLogicValue__maskOfWidth(this.width) : 0;
    },
    get$_intValue() {
      var t1 = this._values$_value;
      return t1 === B._LogicValueEnum_1 || t1 === B._LogicValueEnum_3 ? A._SmallLogicValue__maskOfWidth(this.width) : 0;
    }
  };
  A.LogicValue.prototype = {
    get$length(_) {
      return this.width;
    },
    get$_enum() {
      var _this = this,
        t1 = _this.width;
      if (t1 !== 1)
        throw A.wrapException(A.Exception_Exception("Cannot convert value of width " + t1 + " to a single bit value."));
      if (_this.$eq(0, B._FilledLogicValue__LogicValueEnum_1_1))
        t1 = B._LogicValueEnum_1;
      else if (_this.$eq(0, B._FilledLogicValue__LogicValueEnum_0_1))
        t1 = B._LogicValueEnum_0;
      else if (_this.$eq(0, B._FilledLogicValue__LogicValueEnum_2_1))
        t1 = B._LogicValueEnum_2;
      else
        t1 = _this.$eq(0, B._FilledLogicValue__LogicValueEnum_3_1) ? B._LogicValueEnum_3 : A.throwExpression(A.Exception_Exception("Failed to convert."));
      return t1;
    },
    _concatenate$1(other) {
      var t2, newWidth, _this = this,
        t1 = other.width;
      if (t1 === 0)
        return _this;
      else {
        t2 = _this.width;
        if (t2 === 0)
          return other;
      }
      newWidth = t2 + t1;
      if (_this instanceof A._FilledLogicValue && other instanceof A._FilledLogicValue && other.$index(0, 0).$eq(0, _this.$index(0, 0))) {
        t1 = other._values$_value;
        return new A._FilledLogicValue(newWidth > 0 ? t1 : B._LogicValueEnum_0, newWidth);
      } else if (newWidth > 64)
        return A._BigLogicValue$(_this.get$_bigIntValue().$shl(0, t1).$or(0, other.get$_bigIntValue()), _this.get$_bigIntInvalid().$shl(0, t1).$or(0, other.get$_bigIntInvalid()), newWidth);
      else
        return A._SmallLogicValue$((B.JSInt_methods.$shl(_this.get$_intValue(), t1) | other.get$_intValue()) >>> 0, (B.JSInt_methods.$shl(_this.get$_intInvalid(), t1) | other.get$_intInvalid()) >>> 0, newWidth);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.LogicValue))
        return false;
      if (other.width !== this.width)
        return false;
      return this._equals$1(other);
    },
    get$hashCode(_) {
      return this.get$_hashCode();
    },
    toList$0(_) {
      var index, t1,
        _length = this.width,
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.LogicValue);
      for (index = 0; index < _length; ++index)
        _list[index] = this.$index(0, index);
      t1 = A._setArrayType(_list.slice(0), A._arrayInstanceType(_list));
      return t1;
    },
    toString$1$includeWidth(_, includeWidth) {
      var t1, hexValue, _length, _list, index, t2, t3, _this = this;
      if (_this.get$isValid() && includeWidth) {
        t1 = _this.width;
        hexValue = t1 > 64 ? _this.toBigInt$0().toRadixString$1(0, 16) : B.JSInt_methods.toRadixString$1(_this.toInt$0(0), 16);
        return "" + t1 + "'h" + hexValue;
      } else {
        t1 = A._setArrayType([], type$.JSArray_String);
        if (includeWidth)
          t1.push("" + _this.width + "'b");
        _length = _this.width;
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.String);
        for (index = 0; index < _length; ++index) {
          t2 = _this.$index(0, index);
          t3 = t2.width;
          if (t3 !== 1)
            A.throwExpression(A.Exception_Exception("Cannot convert value of width " + t3 + " to a single bit value."));
          if (t2.$eq(0, B._FilledLogicValue__LogicValueEnum_2_1))
            t2 = "x";
          else if (t2.$eq(0, B._FilledLogicValue__LogicValueEnum_3_1))
            t2 = "z";
          else
            t2 = t2.$eq(0, B._FilledLogicValue__LogicValueEnum_1_1) ? "1" : "0";
          _list[index] = t2;
        }
        B.JSArray_methods.addAll$1(t1, new A.ReversedListIterable(_list, A._arrayInstanceType(_list)._eval$1("ReversedListIterable<1>")));
        return B.JSArray_methods.join$0(t1);
      }
    },
    toString$0($receiver) {
      return this.toString$1$includeWidth($receiver, true);
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this.width;
      if (index >= t1 || index < 0)
        throw A.wrapException(A.IndexError$(index, this, "LogicValueIndexOutOfRange", "Index out of range: " + index + "(=" + index + ").", t1));
      return this._getIndex$1(index);
    },
    getRange$2(_, startIndex, endIndex) {
      var t1, _this = this,
        modifiedStartIndex = startIndex < 0 ? _this.width + startIndex : startIndex,
        modifiedEndIndex = endIndex < 0 ? _this.width + endIndex : endIndex;
      if (modifiedEndIndex < modifiedStartIndex)
        throw A.wrapException(A.Exception_Exception("End " + modifiedEndIndex + "(=" + endIndex + ") cannot be less than start " + modifiedStartIndex + "(=" + startIndex + ")."));
      t1 = _this.width;
      if (modifiedEndIndex > t1)
        throw A.wrapException(A.Exception_Exception("End " + modifiedEndIndex + "(=" + endIndex + ") must be less than width (" + t1 + ")."));
      if (modifiedStartIndex < 0)
        throw A.wrapException(A.Exception_Exception("Start " + modifiedStartIndex + "(=" + startIndex + ") must be greater than or equal to 0."));
      return _this._getRange$2(modifiedStartIndex, modifiedEndIndex);
    },
    $add(_, other) {
      return this._doMath$2(other, new A.LogicValue_operator$add_closure());
    },
    $mul(_, other) {
      return this._doMath$2(other, new A.LogicValue_operator$mul_closure());
    },
    _doMath$2(other, op) {
      var t1, t2, t3, a, b, _this = this;
      type$.dynamic_Function_dynamic_dynamic._as(op);
      t1 = other.width;
      t2 = _this.width;
      if (t1 !== t2)
        throw A.wrapException(A.Exception_Exception('Widths  must match, but found "' + _this.toString$0(0) + '" and "' + other.toString$0(0) + '".'));
      if (!_this.get$isValid()) {
        t1 = B._FilledLogicValue__LogicValueEnum_2_1.get$_enum();
        return new A._FilledLogicValue(t2 > 0 ? t1 : B._LogicValueEnum_0, t2);
      }
      t3 = other.get$isValid();
      if (!t3) {
        t2 = B._FilledLogicValue__LogicValueEnum_2_1.get$_enum();
        return new A._FilledLogicValue(t1 > 0 ? t2 : B._LogicValueEnum_0, t1);
      }
      if (!(_this instanceof A._BigLogicValue))
        t1 = other instanceof A._BigLogicValue;
      else
        t1 = true;
      if (t1) {
        a = _this.toBigInt$0();
        t1 = other.toBigInt$0();
        b = t1;
        return A.LogicValue_ofBigInt(type$.BigInt._as(op.call$2(a, b)), t2);
      } else {
        a = _this.toInt$0(0);
        b = other.toInt$0(0);
        return A.LogicValue_ofInt(A._asInt(op.call$2(a, b)), t2);
      }
    }
  };
  A.LogicValue_operator$add_closure.prototype = {
    call$2(a, b) {
      return J.$add$ansx(a, b);
    },
    $signature: 10
  };
  A.LogicValue_operator$mul_closure.prototype = {
    call$2(a, b) {
      return J.$mul$ns(a, b);
    },
    $signature: 10
  };
  A._LogicValueEnum.prototype = {
    toString$0(_) {
      return "_LogicValueEnum." + this._name;
    }
  };
  A._SmallLogicValue.prototype = {
    _equals$1(other) {
      if (other instanceof A._FilledLogicValue)
        return other.$eq(0, this);
      if (!(other instanceof A._SmallLogicValue))
        return false;
      return this._values$_value === other._values$_value && this._invalid === other._invalid;
    },
    get$_hashCode() {
      return B.JSInt_methods.get$hashCode(this._values$_value) ^ B.JSInt_methods.get$hashCode(this._invalid);
    },
    _getIndex$1(index) {
      var t1,
        bitValue = (B.JSInt_methods._shrReceiverPositive$1(this._values$_value, index) & 1) === 1;
      if ((B.JSInt_methods._shrReceiverPositive$1(this._invalid, index) & 1) === 1)
        t1 = bitValue ? B._FilledLogicValue__LogicValueEnum_3_1 : B._FilledLogicValue__LogicValueEnum_2_1;
      else
        t1 = bitValue ? B._FilledLogicValue__LogicValueEnum_1_1 : B._FilledLogicValue__LogicValueEnum_0_1;
      return t1;
    },
    _getRange$2(start, end) {
      var newWidth = end - start;
      return A.LogicValue__smallLogicValueOrFilled((B.JSInt_methods._shrReceiverPositive$1(this._values$_value, start) & A._SmallLogicValue__maskOfWidth(newWidth)) >>> 0, (B.JSInt_methods._shrReceiverPositive$1(this._invalid, start) & A._SmallLogicValue__maskOfWidth(newWidth)) >>> 0, newWidth);
    },
    get$reversed(_) {
      var t1 = this.toList$0(0);
      return A.LogicValue_of(new A.ReversedListIterable(t1, A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>")));
    },
    get$isValid() {
      return this._invalid === 0;
    },
    get$isFloating() {
      var t1 = this.width;
      return this._invalid === A._SmallLogicValue__maskOfWidth(t1) && this._values$_value === A._SmallLogicValue__maskOfWidth(t1);
    },
    toBigInt$0() {
      return A._BigIntImpl__BigIntImpl$from(this.toInt$0(0));
    },
    toInt$0(_) {
      if (this._invalid !== 0)
        throw A.wrapException(A.Exception_Exception("Cannot convert invalid LogicValue to int: " + this.toString$0(0)));
      return this._values$_value;
    },
    $not(_) {
      var t1 = this._invalid,
        t2 = this.width;
      return A.LogicValue__smallLogicValueOrFilled((~this._values$_value & ~t1 & A._SmallLogicValue__maskOfWidth(t2)) >>> 0, t1, t2);
    },
    get$_bigIntInvalid() {
      return A._BigIntImpl__BigIntImpl$from(this._invalid).$and(0, A._BigLogicValue__maskOfWidth(this.width));
    },
    get$_bigIntValue() {
      return A._BigIntImpl__BigIntImpl$from(this._values$_value).$and(0, A._BigLogicValue__maskOfWidth(this.width));
    },
    get$_intInvalid() {
      return this._invalid;
    },
    get$_intValue() {
      return this._values$_value;
    }
  };
  A.WaveDumper.prototype = {
    WaveDumper$2$outputPath(module, outputPath) {
      var t2, t3, t4, newTable, split, _this = this,
        t1 = _this.module;
      if (!t1._hasBuilt)
        throw A.wrapException(A.Exception_Exception("Module must be built before passed to dumper.  Call build() first."));
      t2 = _this._outputFile;
      t3 = t2.open$1$mode(B.FileMode_1);
      t4 = $.Zone__current;
      _this.__WaveDumper__outFileSink_F !== $ && A.throwLateFieldAI("_outFileSink");
      t4 = _this.__WaveDumper__outFileSink_F = new A._IOSinkImpl(B.C_Utf8Codec, new A._FileStreamConsumer(t2, t3), new A._AsyncCompleter(new A._Future(t4, type$._Future_dynamic), type$._AsyncCompleter_dynamic));
      _this._collectAllSignals$0();
      t4.write$1("$date\n  " + new A.DateTime(Date.now(), false).toIso8601String$0() + "\n$end\n$version\n  ROHD v0.4.1\n$end\n$comment\n  Generated by ROHD - www.github.com/intel/rohd\n$end\n$timescale 1ps $end\n");
      t4.write$1(_this._computeScopeString$1(t1) + "$enddefinitions $end\n$dumpvars\n");
      t1 = _this._signalToMarkerMap;
      new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).forEach$1(0, _this.get$_writeSignalValueUpdate());
      t4.write$1("$end\n");
      t4 = $.$get$Simulator__preTickController();
      new A._BroadcastStream(t4, A._instanceType(t4)._eval$1("_BroadcastStream<1>")).listen$1(new A.WaveDumper_closure(_this));
      t4 = $.$get$Simulator__endOfSimulationActions();
      t1 = A._instanceType(t4);
      t3 = t1._precomputed1._as(new A.WaveDumper_closure0(_this));
      B.JSArray_methods.$indexSet(t4._table, t4._tail, t3);
      t3 = t4._tail;
      t2 = t4._table.length;
      t3 = (t3 + 1 & t2 - 1) >>> 0;
      t4._tail = t3;
      if (t4._head === t3) {
        newTable = A.List_List$filled(t2 * 2, null, false, t1._eval$1("1?"));
        t1 = t4._table;
        t2 = t4._head;
        split = t1.length - t2;
        B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        B.JSArray_methods.setRange$4(newTable, split, split + t4._head, t4._table, 0);
        t4._head = 0;
        t4._tail = t4._table.length;
        t4.set$_table(newTable);
      }
      ++t4._modificationCount;
    },
    _terminate$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t1;
      var $async$_terminate$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.__WaveDumper__outFileSink_F;
              t1 === $ && A.throwLateFieldNI("_outFileSink");
              $async$goto = 2;
              return A._asyncAwait(t1.flush$0(), $async$_terminate$0);
            case 2:
              // returning from await.
              if (t1._isBound)
                A.throwExpression(A.StateError$("StreamSink is bound to a stream"));
              if (!t1._isClosed) {
                t1._isClosed = true;
                t2 = t1._controllerInstance;
                if (t2 != null)
                  t2.close$0();
                else
                  t1._closeTarget$0();
              }
              $async$goto = 3;
              return A._asyncAwait(t1._doneCompleter.future, $async$_terminate$0);
            case 3:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_terminate$0, $async$completer);
    },
    _collectAllSignals$0() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, i, m, t10, t11, t12, t13, _this = this,
        modulesToParse = A._setArrayType([_this.module], type$.JSArray_Module);
      for (t1 = type$.UnmodifiableListView_Module, t2 = t1._eval$1("ListIterator<ListMixin.E>"), t3 = type$.InlineSystemVerilog, t4 = t1._eval$1("ListMixin.E"), t5 = type$.UnmodifiableListView_Logic, t6 = type$.JSArray_List_Logic, t7 = type$.CombinedListView_Logic, t8 = type$.nullable_void_Function, t9 = _this._signalToMarkerMap, i = 0; i < modulesToParse.length; ++i) {
        m = modulesToParse[i];
        for (t10 = new A.CombinedListView(A._setArrayType([new A.UnmodifiableListView(m._inputs.get$values(), t5), new A.UnmodifiableListView(m._outputs.get$values(), t5), new A.UnmodifiableListView(new A.UnmodifiableListView(m._internalSignals, t5), t5)], t6), t7), t10 = t10.get$iterator(t10); t10.moveNext$0();) {
          t11 = t10.get$current();
          if (t11 instanceof A.Const)
            continue;
          t9.$indexSet(0, t11, "s" + _this._signalMarkerIdx++);
          t12 = t11._wire.get$changed();
          t13 = t12.$ti;
          t11 = t13._eval$1("~(1)?")._as(new A.WaveDumper__collectAllSignals_closure(_this, t11));
          t8._as(null);
          t12._controller._subscribe$4(t13._eval$1("~(1)?")._as(t11), null, null, false);
        }
        for (t10 = new A.UnmodifiableListView(m._modules, t1), t10 = new A.ListIterator(t10, t10.get$length(t10), t2); t10.moveNext$0();) {
          t11 = t10.__internal$_current;
          if (t11 == null)
            t11 = t4._as(t11);
          if (t3._is(t11))
            continue;
          B.JSArray_methods.add$1(modulesToParse, t11);
        }
      }
    },
    _computeScopeString$2$indent(m, indent) {
      var t2, t3, t4, t5, t6, marker, t7, signalName, t8,
        moduleSignalUniquifier = A.Uniquifier$(null),
        padding = B.JSArray_methods.join$0(A.List_List$filled(indent, "  ", false, type$.String)),
        t1 = m.get$uniqueInstanceName(),
        innerScopeString = new A.StringBuffer("");
      for (t2 = m.get$signals(), t2 = t2.get$iterator(t2), t3 = "  " + padding + "$var wire ", t4 = this._signalToMarkerMap; t2.moveNext$0();) {
        t5 = t2.get$current();
        if (!t4.containsKey$1(t5))
          continue;
        t6 = t5._wire;
        marker = t4.$index(0, t5);
        t7 = t5.name;
        signalName = A.Sanitizer_sanitizeSV(t7);
        t8 = t5._parentModule;
        t8 = t8 == null ? null : J.$eq$(t8._inputs.$index(0, t7), t5);
        if (t8 !== true) {
          t8 = t5._parentModule;
          t5 = t8 == null ? null : J.$eq$(t8._outputs.$index(0, t7), t5);
          t5 = t5 === true;
        } else
          t5 = true;
        innerScopeString._contents += t3 + t6.width + " " + A.S(marker) + " " + moduleSignalUniquifier.getUniqueName$2$initialName$reserved(signalName, t5) + " $end\n";
      }
      for (t2 = type$.UnmodifiableListView_Module, t3 = new A.UnmodifiableListView(m._modules, t2), t3 = new A.ListIterator(t3, t3.get$length(t3), t2._eval$1("ListIterator<ListMixin.E>")), t4 = indent + 1, t2 = t2._eval$1("ListMixin.E"); t3.moveNext$0();) {
        t5 = t3.__internal$_current;
        innerScopeString._contents += this._computeScopeString$2$indent(t5 == null ? t2._as(t5) : t5, t4);
      }
      t2 = innerScopeString._contents;
      if (t2.length === 0)
        return "";
      return padding + "$scope module " + t1 + " $end\n" + (t2.charCodeAt(0) == 0 ? t2 : t2) + (padding + "$upscope $end\n");
    },
    _computeScopeString$1(m) {
      return this._computeScopeString$2$indent(m, 0);
    },
    _captureTimestamp$1(timestamp) {
      var t1 = this.__WaveDumper__outFileSink_F;
      t1 === $ && A.throwLateFieldNI("_outFileSink");
      t1.write$1("#" + timestamp + "\n");
      t1 = this._changedLogicsThisTimestamp;
      t1.forEach$1(0, this.get$_writeSignalValueUpdate());
      t1.clear$0(0);
    },
    _writeSignalValueUpdate$1(signal) {
      var t1, t2, binaryValue, updateValue, marker;
      type$.Logic._as(signal);
      t1 = signal._wire._currentValue;
      t1 = t1.get$reversed(t1).toList$0(0);
      t2 = A._arrayInstanceType(t1);
      binaryValue = new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.WaveDumper__writeSignalValueUpdate_closure()), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
      t1 = signal._wire;
      updateValue = t1.width > 1 ? "b" + binaryValue + " " : t1._currentValue.toString$1$includeWidth(0, false);
      marker = this._signalToMarkerMap.$index(0, signal);
      t1 = this.__WaveDumper__outFileSink_F;
      t1 === $ && A.throwLateFieldNI("_outFileSink");
      t1.write$1(updateValue + A.S(marker) + "\n");
    }
  };
  A.WaveDumper_closure.prototype = {
    call$1(args) {
      var t1 = $.Simulator__currentTimestamp,
        t2 = this.$this,
        t3 = t2._currentDumpingTimestamp;
      if (t1 !== t3) {
        if (t2._changedLogicsThisTimestamp._collection$_length !== 0)
          t2._captureTimestamp$1(t3);
        t2._currentDumpingTimestamp = $.Simulator__currentTimestamp;
      }
    },
    $signature: 7
  };
  A.WaveDumper_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t1._captureTimestamp$1($.Simulator__currentTimestamp);
              $async$goto = 2;
              return A._asyncAwait(t1._terminate$0(), $async$call$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 15
  };
  A.WaveDumper__collectAllSignals_closure.prototype = {
    call$1(args) {
      type$.LogicValueChanged._as(args);
      this.$this._changedLogicsThisTimestamp.add$1(0, this.sig);
    },
    $signature: 1
  };
  A.WaveDumper__writeSignalValueUpdate_closure.prototype = {
    call$1(e) {
      return type$.LogicValue._as(e).toString$1$includeWidth(0, false);
    },
    $signature: 52
  };
  A.main_closure.prototype = {
    call$0() {
      return this.en._wire.put$2$fill(1, false);
    },
    $signature: 0
  };
  A.main_closure0.prototype = {
    call$0() {
      return this.resetB._wire.put$2$fill(1, false);
    },
    $signature: 0
  };
  A.main_closure1.prototype = {
    call$0() {
      return this.inputVal._wire.put$2$fill(this.i, false);
    },
    $signature: 0
  };
  A.main_closure2.prototype = {
    call$0() {
      if (!this.noPrint)
        A.print("Simulation completed!");
    },
    $signature: 0
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
  })();
  (function installTearOffs() {
    var _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static_2 = hunkHelpers._static_2,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 13);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 4);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 4);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 4);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 5);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 12);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_i(A._BroadcastStreamController.prototype, "get$add", "add$1", 11);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 37, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 12);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(_ = A._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(A._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _static_2(A, "collection___dynamicCompare$closure", "_dynamicCompare", 39);
    _static_2(A, "core_Comparable_compare$closure", "Comparable_compare", 36);
    _instance_0_i(A._File.prototype, "get$length", "length$0", 55);
    _instance_1_u(_ = A._StreamSinkImpl.prototype, "get$_completeDoneValue", "_completeDoneValue$1", 5);
    _instance_2_u(_, "get$_completeDoneError", "_completeDoneError$2", 30);
    _instance_1_i(A.TraverseableCollection.prototype, "get$add", "add$1", 11);
    _static_1(A, "module_Module_isUnpreferred$closure", "Module_isUnpreferred", 21);
    _instance_1_u(A._SynthModuleDefinition.prototype, "get$_getSynthSubModuleInstantiation", "_getSynthSubModuleInstantiation$1", 46);
    _instance_1_u(A.WaveDumper.prototype, "get$_writeSignalValueUpdate", "_writeSignalValueUpdate$1", 51);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.Closure, A.Iterable, A.ListIterator, A.Iterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A._ListBase_Object_ListMixin, A.ConstantMap, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A.StringMatch, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A.AsyncError, A.Stream, A._BufferingStreamSubscription, A._BroadcastStreamController, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamConsumer, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._Zone, A.__SetBase_Object_SetMixin, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListMixin, A._UnmodifiableMapMixin, A.MapView, A._ListQueueIterator, A.SetMixin, A._SetBase_Object_SetMixin, A._UnmodifiableSetMixin, A._SplayTreeNode, A._SplayTree, A._SplayTreeIterator, A.Codec, A._Utf8Encoder, A._BigIntImpl, A.DateTime, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.Stopwatch, A.StringBuffer, A.OSError, A._BufferAndStart, A.FileMode, A.FileSystemException, A.FileSystemEntity, A._StreamSinkImpl, A.CombinedIterator, A._DelegatingIterableBase, A.UnmodifiableSetMixin, A.Module, A.Level, A.LogRecord, A.Logger, A.TraverseableCollection, A.SignalRedrivenException, A.LogicValueChanged, A.Logic, A._Wire, A.Conditional, A._SimulatorException, A.SynthBuilder, A.SynthesisResult, A.Synthesizer, A.CustomSystemVerilog, A.InlineSystemVerilog, A._SynthSubModuleInstantiation, A._SynthModuleDefinition, A._SynthLogic, A._SynthAssignment, A.SynchronousPropagator, A.SynchronousEmitter, A.Uniquifier, A.LogicValue, A.WaveDumper]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeByteBuffer, A.NativeTypedData]);
    _inherit(J.LegacyJavaScriptObject, J.JavaScriptObject);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.NullThrownError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inheritMany(A.Closure, [A.Closure0Args, A.Closure2Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._SyncBroadcastStreamController__sendData_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A.Stream_first_closure0, A.SplayTreeMap_closure, A._BigIntImpl_hashCode_finish, A._FileStreamConsumer_addStream_closure, A._FileStreamConsumer_addStream__closure, A._FileStreamConsumer_addStream___closure, A._FileStreamConsumer_close_closure, A._FileStreamConsumer_close_closure0, A._File_open_closure, A._File_length_closure, A._RandomAccessFile_close_closure, A._RandomAccessFile_writeFrom_closure, A._StreamSinkImpl__controller_closure, A.CombinedListView_iterator_closure, A._Wire_changed_closure, A._Wire_changed_closure0, A.BusSubset__setup_closure, A.SimpleClockGenerator_closure, A.Sequential__setup_closure, A.Sequential__setup__closure2, A.Sequential__setup__closure4, A.Sequential__setup_closure0, A.Sequential__setup__closure, A.Sequential__setup__closure1, A.Sequential_alwaysVerilogStatement_closure, A.If_verilogContents_closure, A.If_verilogContents_closure0, A._TwoInputBitwiseGate__setup_closure, A._TwoInputBitwiseGate__setup_closure0, A.SynthBuilder_getFileContents_closure, A._SystemVerilogSynthesisResult__verilogInputs_closure, A._SystemVerilogSynthesisResult__verilogOutputs_closure, A._SystemVerilogSynthesisResult__verilogModuleContents_closure, A._SynthModuleDefinition__collapseChainableModules_closure, A._SynthModuleDefinition__collapseChainableModules_closure1, A.WaveDumper_closure, A.WaveDumper__collectAllSignals_closure, A.WaveDumper__writeSignalValueUpdate_closure]);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._cancelAndValue_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A._FileStreamConsumer_addStream__closure0, A._StreamSinkImpl_flush_closure, A.Logger_Logger_closure, A.SimpleClockGenerator__closure, A.Simulator_tick_closure, A.Simulator_tick_closure0, A.Uniquifier_getUniqueName_constructActualName, A.WaveDumper_closure0, A.main_closure, A.main_closure0, A.main_closure1, A.main_closure2]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.WhereTypeIterable, A._ConstantMapKeyIterable]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.LinkedHashMapKeyIterable, A._SplayTreeKeyIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.WhereIterator]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.CombinedListView]);
    _inherit(A.ConstantStringMap, A.ConstantMap);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inheritMany(A.Closure2Args, [A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A.MapBase_mapToString_closure, A._BigIntImpl_hashCode_combine, A._FileStreamConsumer_addStream_closure_error, A._StreamSinkImpl__controller_closure0, A.CombinedListView_length_closure, A.Sequential__setup__closure3, A.Sequential__setup__closure0, A.Add_closure, A.Multiply_closure, A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure, A.SystemVerilogSynthesizer_instantiationVerilogWithParameters_closure0, A._SynthSubModuleInstantiation__moduleInputsMap_closure, A._SynthSubModuleInstantiation_instantiationVerilog_closure, A._SynthModuleDefinition__collapseChainableModules_closure0, A.LogicValue_operator$add_closure, A.LogicValue_operator$mul_closure]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.NativeTypedArray);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeUint16List, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inherit(A._StreamImpl, A.Stream);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inherit(A._ControllerSubscription, A._BufferingStreamSubscription);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inherit(A._SyncBroadcastStreamController, A._BroadcastStreamController);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inherit(A._SyncStreamController, A._StreamController);
    _inherit(A._DelayedData, A._DelayedEvent);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.__SetBase_Object_SetMixin);
    _inheritMany(A._SetBase, [A._LinkedHashSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin]);
    _inherit(A.UnmodifiableListView, A.UnmodifiableListBase);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.SetBase, A._SetBase_Object_SetMixin);
    _inherit(A._UnmodifiableSet, A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin);
    _inherit(A._SplayTreeMapNode, A._SplayTreeNode);
    _inherit(A._SplayTreeMap__SplayTree_MapMixin, A._SplayTree);
    _inherit(A.SplayTreeMap, A._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(A._SplayTreeIterator, [A._SplayTreeKeyIterator, A._SplayTreeMapEntryIterator]);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inherit(A.Encoding, A.Codec);
    _inherit(A.Utf8Codec, A.Encoding);
    _inherit(A.Utf8Encoder, A.Converter);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._FileStreamConsumer, A.StreamConsumer);
    _inherit(A._File, A.FileSystemEntity);
    _inherit(A._IOSinkImpl, A._StreamSinkImpl);
    _inherit(A.DelegatingSet, A._DelegatingIterableBase);
    _inherit(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.DelegatingSet);
    _inherit(A.UnmodifiableSetView, A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inheritMany(A.Module, [A.FirFilter, A._BusSubset_Module_InlineSystemVerilog, A._SimpleClockGenerator_Module_CustomSystemVerilog, A.__Always_Module_CustomSystemVerilog, A.__TwoInputBitwiseGate_Module_InlineSystemVerilog]);
    _inherit(A.DuplicateDetectionSet, A.SetBase);
    _inherit(A.Const, A.Logic);
    _inherit(A.BusSubset, A._BusSubset_Module_InlineSystemVerilog);
    _inherit(A.SimpleClockGenerator, A._SimpleClockGenerator_Module_CustomSystemVerilog);
    _inherit(A._Always, A.__Always_Module_CustomSystemVerilog);
    _inherit(A.Sequential, A._Always);
    _inheritMany(A.Conditional, [A.ConditionalAssign, A.If]);
    _inherit(A._TwoInputBitwiseGate, A.__TwoInputBitwiseGate_Module_InlineSystemVerilog);
    _inheritMany(A._TwoInputBitwiseGate, [A.Add, A.Multiply]);
    _inheritMany(A._Enum, [A.SimulatorPhase, A._LogicValueEnum]);
    _inherit(A.SystemVerilogSynthesizer, A.Synthesizer);
    _inherit(A._SystemVerilogSynthesisResult, A.SynthesisResult);
    _inheritMany(A.LogicValue, [A._BigLogicValue, A._FilledLogicValue, A._SmallLogicValue]);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
    _mixin(A._SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A._SplayTreeMap__SplayTree_MapMixin, A.MapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__SetBase_Object_SetMixin, A.SetMixin);
    _mixin(A.__UnmodifiableSet__SetBase__UnmodifiableSetMixin, A._UnmodifiableSetMixin);
    _mixin(A._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin, A.UnmodifiableSetMixin);
    _mixin(A._BusSubset_Module_InlineSystemVerilog, A.InlineSystemVerilog);
    _mixin(A._SimpleClockGenerator_Module_CustomSystemVerilog, A.CustomSystemVerilog);
    _mixin(A.__Always_Module_CustomSystemVerilog, A.CustomSystemVerilog);
    _mixin(A.__TwoInputBitwiseGate_Module_InlineSystemVerilog, A.InlineSystemVerilog);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "~(LogicValueChanged)", "Null(@)", "Null()", "~(~())", "~(@)", "Null(Object,StackTrace)", "~(~)", "String(_SynthLogic)", "Null(~)", "@(@,@)", "~(Object?)", "~(Object,StackTrace)", "int()", "String(Conditional)", "Future<Null>()", "_RandomAccessFile(@)", "Future<~>(LogicValueChanged)", "bool(Object)", "LogicValue(LogicValue,LogicValue)", "~(String,Logic)", "bool(String)", "MapEntry<String,String>(_SynthLogic,Logic)", "Future<~>(RandomAccessFile)", "~(RandomAccessFile)", "Null(@,StackTrace)", "File?(~)", "bool(@)", "_Future<@>(@)", "int/(@)", "~(@,StackTrace?)", "Null(@,@)", "Logger()", "Null(~())", "@(@)", "~(int,@)", "int(Comparable<@>,Comparable<@>)", "~(Object[StackTrace?])", "String(Logic)", "int(@,@)", "int(int,int)", "String(SynthesisResult)", "int(int)", "@(@,String)", "Null(RandomAccessFile)", "~(@,StackTrace)", "_SynthSubModuleInstantiation(Module)", "~(String,int)", "bool(_SynthSubModuleInstantiation)", "String()", "~(List<int>)", "~(Logic)", "String(LogicValue)", "@(String)", "~(Object?,Object?)", "Future<int>()"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"num":[],"Comparable":["num"]},"JSInt":{"int":[],"num":[],"Comparable":["num"]},"JSNumNotInt":{"num":[],"Comparable":["num"]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[]},"LateError":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"Pattern":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventDispatch":["1"]},"_AsyncAwaitCompleter":{"Completer":["1"]},"AsyncError":{"Error":[]},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"]},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"]},"_BroadcastStreamController":{"StreamController":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_StreamController":{"StreamController":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"]},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_SplayTreeMapNode":{"_SplayTreeNode":["1","_SplayTreeMapNode<1,2>"],"MapEntry":["1","2"],"_SplayTreeNode.1":"_SplayTreeMapNode<1,2>","_SplayTreeNode.K":"1"},"_LinkedHashSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ListQueue":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"SplayTreeMap":{"MapMixin":["1","2"],"_SplayTree":["1","_SplayTreeMapNode<1,2>"],"Map":["1","2"],"_SplayTree.K":"1","_SplayTree.1":"_SplayTreeMapNode<1,2>"},"_SplayTreeIterator":{"Iterator":["3"]},"_SplayTreeKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_SplayTreeKeyIterator":{"_SplayTreeIterator":["1","2","1"],"Iterator":["1"],"_SplayTreeIterator.K":"1","_SplayTreeIterator.T":"1","_SplayTreeIterator.1":"2"},"_SplayTreeMapEntryIterator":{"_SplayTreeIterator":["1","_SplayTreeMapNode<1,2>","MapEntry<1,2>"],"Iterator":["MapEntry<1,2>"],"_SplayTreeIterator.K":"1","_SplayTreeIterator.T":"MapEntry<1,2>","_SplayTreeIterator.1":"_SplayTreeMapNode<1,2>"},"Encoding":{"Codec":["String","List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_StringStackTrace":{"StackTrace":[]},"_RandomAccessFile":{"RandomAccessFile":[]},"OSError":{"Exception":[]},"FileSystemException":{"Exception":[]},"_FileStreamConsumer":{"StreamConsumer":["List<int>"]},"_File":{"File":[]},"_StreamSinkImpl":{"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl":["List<int>"],"IOSink":[],"StreamConsumer":["List<int>"],"_StreamSinkImpl.T":"List<int>"},"CombinedIterator":{"Iterator":["1"]},"CombinedListView":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"UnmodifiableSetView":{"_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin":["1"],"DelegatingSet":["1"],"UnmodifiableSetMixin":["1"],"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_DelegatingIterableBase":{"Iterable":["1"]},"DelegatingSet":{"Set":["1"],"_DelegatingIterableBase":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"FirFilter":{"Module":[]},"Level":{"Comparable":["Level"]},"DuplicateDetectionSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"SignalRedrivenException":{"Exception":[]},"Const":{"Logic":[]},"BusSubset":{"InlineSystemVerilog":[],"CustomSystemVerilog":[],"Module":[]},"SimpleClockGenerator":{"CustomSystemVerilog":[],"Module":[]},"ConditionalAssign":{"Conditional":[]},"_Always":{"CustomSystemVerilog":[],"Module":[]},"Sequential":{"CustomSystemVerilog":[],"Module":[]},"If":{"Conditional":[]},"_TwoInputBitwiseGate":{"InlineSystemVerilog":[],"CustomSystemVerilog":[],"Module":[]},"Add":{"InlineSystemVerilog":[],"CustomSystemVerilog":[],"Module":[]},"Multiply":{"InlineSystemVerilog":[],"CustomSystemVerilog":[],"Module":[]},"InlineSystemVerilog":{"CustomSystemVerilog":[],"Module":[]},"SystemVerilogSynthesizer":{"Synthesizer":[]},"_SystemVerilogSynthesisResult":{"SynthesisResult":[]},"_BigLogicValue":{"LogicValue":[]},"_FilledLogicValue":{"LogicValue":[]},"_SmallLogicValue":{"LogicValue":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"StreamTransformerBase":2,"ListBase":1,"MapBase":2,"SetBase":1,"_SetBase":1,"_ListBase_Object_ListMixin":1,"_SetBase_Object_SetMixin":1,"_SplayTreeMap__SplayTree_MapMixin":2,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"Comparable":1}'));
  var string$ = {
    x20is_to: " is too long to convert to int. Use toBigInt() instead.",
    x22_has_: '" has been marked as unassignable.  It may be a constant expression or otherwise should not be assigned.',
    x2e__Log: ".  Logic within a Module should only consume inputs and drive outputs of that Module.  See https://github.com/intel/rohd#modules for more information.",
    Cannot: "Cannot fire new event. Controller is already firing an event",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_void: findType("@<~>"),
      AsyncError: findType("AsyncError"),
      BigInt: findType("BigInt"),
      CombinedListView_Logic: findType("CombinedListView<Logic>"),
      Comparable_dynamic: findType("Comparable<@>"),
      Conditional: findType("Conditional"),
      ConditionalAssign: findType("ConditionalAssign"),
      CustomSystemVerilog: findType("CustomSystemVerilog"),
      DateTime: findType("DateTime"),
      DuplicateDetectionSet_Logic: findType("DuplicateDetectionSet<Logic>"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Error: findType("Error"),
      Exception: findType("Exception"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Future_void: findType("Future<~>"),
      InlineSystemVerilog: findType("InlineSystemVerilog"),
      Iterable_Logic: findType("Iterable<Logic>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_Conditional: findType("JSArray<Conditional>"),
      JSArray_ConditionalAssign: findType("JSArray<ConditionalAssign>"),
      JSArray_List_Logic: findType("JSArray<List<Logic>>"),
      JSArray_Logic: findType("JSArray<Logic>"),
      JSArray_Module: findType("JSArray<Module>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray__SynthAssignment: findType("JSArray<_SynthAssignment>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_LogicValue: findType("JSArray<LogicValue?>"),
      JSArray_of_void_Function: findType("JSArray<~()>"),
      JSArray_of_void_Function_LogicValueChanged: findType("JSArray<~(LogicValueChanged)>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      Level: findType("Level"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      Logger: findType("Logger"),
      Logic: findType("Logic"),
      LogicValue: findType("LogicValue"),
      LogicValueChanged: findType("LogicValueChanged"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      Map_Logic_Logic: findType("Map<Logic,Logic>"),
      Map_Logic_LogicValue: findType("Map<Logic,LogicValue>"),
      Map_Module_String: findType("Map<Module,String>"),
      Map_String_String: findType("Map<String,String>"),
      Module: findType("Module"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      Null: findType("Null"),
      Object: findType("Object"),
      RandomAccessFile: findType("RandomAccessFile"),
      ReversedListIterable_Module: findType("ReversedListIterable<Module>"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      Set_Logic: findType("Set<Logic>"),
      StackTrace: findType("StackTrace"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_LogicValueChanged: findType("Stream<LogicValueChanged>"),
      String: findType("String"),
      SynchronousEmitter_LogicValueChanged: findType("SynchronousEmitter<LogicValueChanged>"),
      SynchronousPropagator_LogicValueChanged: findType("SynchronousPropagator<LogicValueChanged>"),
      SynthesisResult: findType("SynthesisResult"),
      TraverseableCollection_Logic: findType("TraverseableCollection<Logic>"),
      TypeError: findType("TypeError"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableListView_Logic: findType("UnmodifiableListView<Logic>"),
      UnmodifiableListView_Module: findType("UnmodifiableListView<Module>"),
      UnmodifiableMapView_String_Logic: findType("UnmodifiableMapView<String,Logic>"),
      UnmodifiableSetView_SynthesisResult: findType("UnmodifiableSetView<SynthesisResult>"),
      Utf8Codec: findType("Utf8Codec"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_InlineSystemVerilog: findType("WhereTypeIterable<InlineSystemVerilog>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_File: findType("_Future<File?>"),
      _Future_void: findType("_Future<~>"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _SyncCompleter_nullable_File: findType("_SyncCompleter<File?>"),
      _SynthLogic: findType("_SynthLogic"),
      _SynthSubModuleInstantiation: findType("_SynthSubModuleInstantiation"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_File: findType("File?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Map_String__SynthSubModuleInstantiation: findType("Map<String,_SynthSubModuleInstantiation>?"),
      nullable_Object: findType("Object?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_bool_Function_Object: findType("bool(Object)?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_LogicValueChanged: findType("~(LogicValueChanged)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.FileMode_0 = new A.FileMode(0);
    B.FileMode_1 = new A.FileMode(1);
    B.FileMode_2 = new A.FileMode(2);
    B.FileMode_3 = new A.FileMode(3);
    B.FileMode_4 = new A.FileMode(4);
    B.Level_INFO_800 = new A.Level("INFO", 800);
    B.Level_SEVERE_1000 = new A.Level("SEVERE", 1000);
    B.Level_WARNING_900 = new A.Level("WARNING", 900);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_Conditional);
    B.List_o0y = A._setArrayType(makeConstList(["alias", "always", "always_comb", "always_ff", "always_latch", "and", "assert", "assign", "assume", "automatic", "before", "begin", "bind", "bins", "binsof", "bit", "break", "buf", "bufif0", "bufif1", "byte", "case", "casex", "casez", "cell", "chandle", "class ", "clocking", "cmos", "config", "const", "constraint", "context", "continue", "cover ", "covergroup", "coverpoint", "cross", "deassign", "default", "defparam", "design", "disable", "dist", "do", "edge", "else", "end", "endcase", "endclass", "endclocking", "endconfig", "endfunction", "endgenerate", "endgroup", "endinterface", "endmodule", "endpackage", "endprimitive", "endprogram", "endproperty", "endspecify", "endsequence", "endtable", "endtask", "enum", "event", "expect", "export", "extends", "extern", "final", "first_match", "for", "force", "foreach", "forever", "fork", "forkjoin", "function", "generate", "genvar", "highz0", "highz1", "if", "iff", "ifnone", "ignore_bins", "illegal_bins", "import", "incdir", "include", "initial", "inout", "input", "inside", "instance", "int", "integer", "interface", "intersect", "join", "join_any", "join_none", "large", "liblist", "library", "local", "localparam", "logic", "longint", "macromodule", "matches", "medium", "modport", "module", "nand", "negedge", "new", "nmos", "nor", "noshowcancelled", "not", "notif0", "notif1", "null", "or", "output", "package", "packed", "parameter", "pmos", "posedge", "primitive", "priority", "program", "property", "protected", "pull0", "pull1", "pulldown", "pullup", "pulsestyle_onevent", "pulsestyle_ondetect", "pure", "rand", "randc", "randcase", "randsequence", "rcmos", "real", "realtime", "ref", "reg", "release", "repeat", "return", "rnmos", "rpmos", "rtran", "rtranif0", "rtranif1", "scalared", "sequence", "shortint", "shortreal", "showcancelled", "signed", "small", "solve", "specify", "specparam", "static", "string", "strong0", "strong1", "struct", "super", "supply0", "supply1", "table", "tagged", "task", "this", "throughout", "time", "timeprecision", "timeunit", "tran", "tranif0", "tranif1", "tri", "tri0", "tri1", "triand", "trior", "trireg", "type", "typedef", "union", "unique", "unsigned", "use", "var", "vectored", "virtual", "void", "wait", "wait_order", "wand", "weak0", "weak1", "while", "wildcard", "wire", "with", "within", "wor", "xnor", "xor"]), type$.JSArray_String);
    B.Map_o0BG8 = new A.ConstantStringMap(220, {alias: null, always: null, always_comb: null, always_ff: null, always_latch: null, and: null, assert: null, assign: null, assume: null, automatic: null, before: null, begin: null, bind: null, bins: null, binsof: null, bit: null, break: null, buf: null, bufif0: null, bufif1: null, byte: null, case: null, casex: null, casez: null, cell: null, chandle: null, "class ": null, clocking: null, cmos: null, config: null, const: null, constraint: null, context: null, continue: null, "cover ": null, covergroup: null, coverpoint: null, cross: null, deassign: null, default: null, defparam: null, design: null, disable: null, dist: null, do: null, edge: null, else: null, end: null, endcase: null, endclass: null, endclocking: null, endconfig: null, endfunction: null, endgenerate: null, endgroup: null, endinterface: null, endmodule: null, endpackage: null, endprimitive: null, endprogram: null, endproperty: null, endspecify: null, endsequence: null, endtable: null, endtask: null, enum: null, event: null, expect: null, export: null, extends: null, extern: null, final: null, first_match: null, for: null, force: null, foreach: null, forever: null, fork: null, forkjoin: null, function: null, generate: null, genvar: null, highz0: null, highz1: null, if: null, iff: null, ifnone: null, ignore_bins: null, illegal_bins: null, import: null, incdir: null, include: null, initial: null, inout: null, input: null, inside: null, instance: null, int: null, integer: null, interface: null, intersect: null, join: null, join_any: null, join_none: null, large: null, liblist: null, library: null, local: null, localparam: null, logic: null, longint: null, macromodule: null, matches: null, medium: null, modport: null, module: null, nand: null, negedge: null, new: null, nmos: null, nor: null, noshowcancelled: null, not: null, notif0: null, notif1: null, null: null, or: null, output: null, package: null, packed: null, parameter: null, pmos: null, posedge: null, primitive: null, priority: null, program: null, property: null, protected: null, pull0: null, pull1: null, pulldown: null, pullup: null, pulsestyle_onevent: null, pulsestyle_ondetect: null, pure: null, rand: null, randc: null, randcase: null, randsequence: null, rcmos: null, real: null, realtime: null, ref: null, reg: null, release: null, repeat: null, return: null, rnmos: null, rpmos: null, rtran: null, rtranif0: null, rtranif1: null, scalared: null, sequence: null, shortint: null, shortreal: null, showcancelled: null, signed: null, small: null, solve: null, specify: null, specparam: null, static: null, string: null, strong0: null, strong1: null, struct: null, "super": null, supply0: null, supply1: null, table: null, tagged: null, task: null, this: null, throughout: null, time: null, timeprecision: null, timeunit: null, tran: null, tranif0: null, tranif1: null, tri: null, tri0: null, tri1: null, triand: null, trior: null, trireg: null, type: null, typedef: null, union: null, unique: null, unsigned: null, use: null, var: null, vectored: null, virtual: null, void: null, wait: null, wait_order: null, wand: null, weak0: null, weak1: null, while: null, wildcard: null, wire: null, with: null, within: null, wor: null, xnor: null, xor: null}, B.List_o0y, A.findType("ConstantStringMap<String,Null>"));
    B.Set_o0yI = new A._UnmodifiableSet(B.Map_o0BG8, A.findType("_UnmodifiableSet<String>"));
    B.SimulatorPhase_0 = new A.SimulatorPhase("outOfTick");
    B.SimulatorPhase_1 = new A.SimulatorPhase("beforeTick");
    B.SimulatorPhase_2 = new A.SimulatorPhase("mainTick");
    B.SimulatorPhase_3 = new A.SimulatorPhase("clkStable");
    B.Type_ByteBuffer_RkP = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_zNC = A.typeLiteral("ByteData");
    B.Type_JSObject_8k0 = A.typeLiteral("JSObject");
    B.Type_Null_Yyn = A.typeLiteral("Null");
    B.Type_String_k8F = A.typeLiteral("String");
    B.Type_Uint16List_2bx = A.typeLiteral("Uint16List");
    B.Type_Uint8List_WLA = A.typeLiteral("Uint8List");
    B.Type_bool_lhE = A.typeLiteral("bool");
    B.Type_double_K1J = A.typeLiteral("double");
    B.Type_int_tHn = A.typeLiteral("int");
    B.Type_num_cv7 = A.typeLiteral("num");
    B._LogicValueEnum_0 = new A._LogicValueEnum("zero");
    B._FilledLogicValue__LogicValueEnum_0_0 = new A._FilledLogicValue(B._LogicValueEnum_0, 0);
    B._FilledLogicValue__LogicValueEnum_0_1 = new A._FilledLogicValue(B._LogicValueEnum_0, 1);
    B._LogicValueEnum_1 = new A._LogicValueEnum("one");
    B._FilledLogicValue__LogicValueEnum_1_1 = new A._FilledLogicValue(B._LogicValueEnum_1, 1);
    B._LogicValueEnum_2 = new A._LogicValueEnum("x");
    B._FilledLogicValue__LogicValueEnum_2_1 = new A._FilledLogicValue(B._LogicValueEnum_2, 1);
    B._LogicValueEnum_3 = new A._LogicValueEnum("z");
    B._FilledLogicValue__LogicValueEnum_3_1 = new A._FilledLogicValue(B._LogicValueEnum_3, 1);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $._FileResourceInfo_openFiles = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, A.findType("_FileResourceInfo"));
    $.LogRecord__nextNumber = 0;
    $.Logger__loggers = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger);
    $.Simulator__currentTimestamp = 0;
    $.Simulator__simExceptions = A._setArrayType([], A.findType("JSArray<_SimulatorException>"));
    $.Simulator__maxSimTime = -1;
    $.Simulator__phase = B.SimulatorPhase_0;
    $._BigLogicValue__masksOfWidth = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.BigInt);
    $._SmallLogicValue__masksOfWidth = function() {
      var t1 = type$.int;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    }();
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<Null>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", () => new Error().stack != void 0);
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
      A.Primitives_initTicker();
      return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_IOResourceInfo__sw", "$get$_IOResourceInfo__sw", () => {
      var t1 = new A.Stopwatch();
      $.$get$Stopwatch__frequency();
      t1._start = A.Stopwatch__now() - 0;
      t1._stop = null;
      return t1;
    });
    _lazyFinal($, "_IOResourceInfo__startTime", "$get$_IOResourceInfo__startTime", () => A.DateTime$now()._value);
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", () => new A.Object());
    _lazyFinal($, "Logger_root", "$get$Logger_root", () => A.Logger_Logger(""));
    _lazyFinal($, "Simulator_logger", "$get$Simulator_logger", () => A.Logger_Logger("ROHD"));
    _lazyFinal($, "Simulator__pendingTimestamps", "$get$Simulator__pendingTimestamps", () => A.SplayTreeMap$(type$.int, A.findType("List<~()>")));
    _lazyFinal($, "Simulator__injectedActions", "$get$Simulator__injectedActions", () => A.ListQueue$(type$.dynamic_Function));
    _lazyFinal($, "Simulator__endOfSimulationActions", "$get$Simulator__endOfSimulationActions", () => A.ListQueue$(type$.dynamic_Function));
    _lazy($, "Simulator__preTickController", "$get$Simulator__preTickController", () => A.StreamController_StreamController$broadcast(true, type$.void));
    _lazy($, "Simulator__startTickController", "$get$Simulator__startTickController", () => A.StreamController_StreamController$broadcast(true, type$.void));
    _lazy($, "Simulator__clkStableController", "$get$Simulator__clkStableController", () => A.StreamController_StreamController$broadcast(true, type$.void));
    _lazy($, "Simulator__postTickController", "$get$Simulator__postTickController", () => A.StreamController_StreamController$broadcast(true, type$.void));
    _lazy($, "Simulator__simulationEndedCompleter", "$get$Simulator__simulationEndedCompleter", () => A.Completer_Completer(type$.void));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Uint16Array: A.NativeUint16List, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Uint16Array: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = function() {
      return A.main();
    };
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=out.js.map
